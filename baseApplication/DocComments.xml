<?xml version="1.0"?>
<doc>
    <application>
        <id>437dbf0e-84ff-417a-965d-ed2bb9650972</id>
        <name>Base Application</name>
        <publisher>Microsoft</publisher>
        <version>25.3.28755.35906</version>
    </application>
    <members>
        <member name="M:Page::System#Environment#Configuration#Personalized Pages.PrivacyFilterUserPersonalizations">
            <summary>
            Ensure that users can only see their own personalizations, unless they have the permission to manage users on the tenant.
            </summary>
        </member>
        <member name="M:Codeunit::System#Environment#Configuration#Profile Helper.ImportProfiles(Profile Import@):Guid">
            <summary>
            Given a read profile package, this function will import the profiles specified from that package
            </summary>
            <param name="TempProfileImport"></param>
            <returns>Guid representing the import diagnostics ID</returns>
        </member>
        <member name="O:Page::System#Environment#Global Admin Message">
            <summary>
            The page displays a warning message to users with the Global Administrator or Dynamics 365 Administrator role but without a Business Central license.
            </summary>
            <remarks>This page is not supposed to be referenced in extensions.</remarks>
        </member>
        <member name="O:Codeunit::System#Environment#Global Admin Notifier">
            <summary>
            The purpose of this codeunit is to notify users with only Global Administration role that their capabilities in Business Central are limited. 
            </summary>
        </member>
        <member name="M:Codeunit::System#Reflection#Type Helper.ConvertDateTimeFromUTCToTimeZone(DateTime,Text):DateTime">
            <summary>
            NOTE: The procedure's name is incorrect. This procedure converts the time from current client timezone to target timezone, instead of converting from utc to target time zone.
            </summary>
            <param name="InputDateTime">The datetime based on current Client's time zone.</param>
            <param name="TimeZoneTxt">The destination timezone, such as 'GMT standard time','UTC','China standard time'.</param>
            <returns>The new datetime based on the detination timezone</returns>
        </member>
        <member name="M:Codeunit::System#Reflection#Type Helper.ConvertDateTimeFromInputTimeZoneToClientTimezone(DateTime,Text):DateTime">
            <summary>
            Convert the datetime from the specified timezone to current client's timezone.
            </summary>
            <param name="InputDateTime">The datetime based on the specified timezone.</param>
            <param name="TimeZoneTxt">The specified timezone, such as 'GMT standard time','UTC','China standard time'.</param>
            <returns>The new datetime based on current client's timezone</returns>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Context Settings">
            <summary>
            Persists the user settings for a specific Power BI context (e.g. which visual to display).
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Customer Reports">
            <summary>
            Stores in a BLOB the reports uploaded to Power BI using the Business Central pages.
            </summary>
            <remarks>
            The schema of this table mirrors the one for table 2000000144 "Power BI Blob". 
            Table 2000000144 contains the demo reports provided by Microsoft, wereas table 6310 (this table) contains the reports uploaded by the users.
            </remarks>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Displayed Element">
            <summary>
            Saves a list of reports to be displayed for a user in each specific context.
            </summary>
        </member>
        <member name="M:Page::System#Integration#PowerBI#Power BI Element Card.SetFilterToMultipleValues(Variant,Integer)">
            <summary>
            Filters the currently displayed Power BI report to multiple values.
            These values are picked from the field number <paramref name="FieldNumber"/> in the records within the filter of <paramref name="FilteringVariant"/>.
            </summary>
            <remarks>
            The values will be applied to the first filter defined in the Power BI report. If no record falls within the filter, the filter is reset to all values.
            </remarks>
            <param name="FilteringVariant">A Record or RecordRef filtered to the records to show in the Power BI Report.</param>
            <param name="FieldNumber">The number of the field of <paramref name="FilteringVariant"/> that should be used for filtering the Power BI Report.</param>
        </member>
        <member name="M:Page::System#Integration#PowerBI#Power BI Element Card.SetCurrentListSelection(Variant)">
            <summary>
            Filters the currently displayed Power BI report to a single value. Only values of primitive types (such as Text, Code, Guid, Integer, Date) are supported.
            </summary>
            <remarks>
            The value will be applied to the first filter defined in the Power BI report.
            </remarks>
            <param name="InputSelectionVariant">A value to set as filter for the Power BI Report.</param>
        </member>
        <member name="O:Enum::System#Integration#PowerBI#Power BI Element Type">
            <summary>
            Enum that lists the possible types of elements returned by API calls to Power BI, when discovering the Power BI reports.
            </summary>
            <remarks>
            When displayed in a tree structure in the Web Client, the tree structure needs to be sorted by this enum. On the other hand, Web Client does not support 
            descending sorting. So, make sure you keep this enum IDs ordered from the larger group to the smaller group.
            See also: 1) Bug 335749; 2) Documentation at https://go.microsoft.com/fwlink/?linkid=2206170
            </remarks>
        </member>
        <member name="M:Page::System#Integration#PowerBI#Power BI Embedded Report Part.SetFilterToMultipleValues(Variant,Integer)">
            <summary>
            Filters the currently displayed Power BI report to multiple values.
            These values are picked from the field number <paramref name="FieldNumber"/> in the records within the filter of <paramref name="FilteringVariant"/>.
            </summary>
            <remarks>
            The values will be applied to the first filter defined in the Power BI report. If no record falls within the filter, the filter is reset to all values.
            </remarks>
            <param name="FilteringVariant">A Record or RecordRef filtered to the records to show in the Power BI Report.</param>
            <param name="FieldNumber">The number of the field of <paramref name="FilteringVariant"/> that should be used for filtering the Power BI Report.</param>
        </member>
        <member name="M:Page::System#Integration#PowerBI#Power BI Embedded Report Part.SetCurrentListSelection(Variant)">
            <summary>
            Filters the currently displayed Power BI report to a single value. Only values of primitive types (such as Text, Code, Guid, Integer, Date) are supported.
            </summary>
            <remarks>
            The value will be applied to the first filter defined in the Power BI report.
            </remarks>
            <param name="InputSelectionVariant">A value to set as filter for the Power BI Report.</param>
        </member>
        <member name="O:Codeunit::System#Integration#PowerBI#Power BI Report Synchronizer">
            <summary>
            Encapsulates the logic to deploy and/or delete default Power BI reports. Should be run in background.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Report Uploads">
            <summary>
            Persists information about the reports that Business Central has uploaded to the user's Power BI personal workspace.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Selection Element">
            <summary>
            Represents a Power BI Element (such as report, workspace or dashboard) as returned by the Power BI backend.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Service Mgt#.AddReportVisualForContext(Guid,Text[200],Text[200],Text[50])">
             <summary>
             Add a Power BI report visual to the database, so that it's displayed in a certain context for the current user.
             </summary>
             <param name="ReportId">The ID of the Power BI Report that contains the visual to embed</param>
             <param name="ReportPageId">The name of the page in the report that contains the visual to embed</param>
             <param name="ReportVisualId">The ID of the report visual to embed</param>
             <param name="Context">The context where the Power BI report visual should show up</param>
             <remarks>
             The easiest way to get the necessary IDs for report visuals is to:
               1. Open the Power BI report in the browser
               2. Hover over the visual you want to embed, and click on the three dots menu
               3. Choose to "Share" the visual, and choose "Link to this Visual"
               4. Use the "Copy" button to copy the URL
               5. From the URL, you can find:
                 a. The Report ID after the /reports/ segment 
                 b. The Report Page right after the Report ID
                 c. The visual ID in a URL query parameter called "visual"
            
             Example URL with placeholders:
             https://app.powerbi.com/groups/me/reports/REPORT_ID/PAGE_ID?[...]&amp;visual=VISUAL_ID
             </remarks>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Service Mgt#.AddReportForContext(Guid,Text[50])">
            <summary>
            Add a Power BI report to the database, so that it's displayed in a certain context for the current user.
            </summary>
            <param name="ReportId">The ID of the Power BI Report to embed</param>
            <param name="Context">The context where the Power BI report should show up</param>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBIResourceUrl:Text">
            <summary>
            Returns the AAD resource URL for Power BI.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBIApiUrl:Text">
            <summary>
            Returns the URL to be used for Power BI report upload.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBIReportsUrl:Text">
            <summary>
            Returns the URL to retrieve the Power BI reports in the user's personal workspace.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBISharedReportsUrl(Guid):Text">
            <summary>
            Returns the URL to retrieve the Power BI reports in one of the user's shared workspaces.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBIWorkspacesUrl:Text">
            <summary>
            Returns the URL to retrieve the Power BI workspaces shared with the user.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetLicenseUrl:Text">
            <summary>
            Returns the URL where the user can get a Power BI license.
            </summary>
        </member>
        <member name="M:Codeunit::System#Integration#PowerBI#Power BI Url Mgt.GetPowerBIEmbedReportsUrl:Text">
            <summary>
            Returns the base URL to embed a Power BI report in Business Central.
            </summary>
        </member>
        <member name="O:Page::System#Integration#PowerBI#Upload Power BI Report">
            <summary>
            Allows users to upload report files to Business Central, which will automatically deploy them to Power BI.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Ongoing Deployments">
            <summary>
            Tracks if a user has active background sessions to deploy, delete or retry deployment of Power BI reports.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Report Configuration">
            <summary>
            Saves a list of reports to be displayed for a user in each specific context.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI Service Status Setup">
            <summary>
            Contains only one record that tracks whether the Power BI service is throttling the calls coming from Business Central, and when the service will be available again.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI User Configuration">
            <summary>
            Persists the first report to be displayed to a user, depending on the page and profile/role they are using.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI User License">
            <summary>
            Caches the validity of the Power BI license for a user.
            </summary>
        </member>
        <member name="O:Table::System#Integration#PowerBI#Power BI User Status">
            <summary>
            Tracks status for a user, e.g. if a user has active background sessions to synchronize Power BI reports.
            </summary>
        </member>
        <member name="O:Codeunit::System#EMail#Email Feature">
            <summary>
            Provides functionality to determine whether the email enhancements have been enabled.
            </summary>
        </member>
        <member name="M:Codeunit::System#EMail#Email Scenario Mapping.FromReportSelectionUsage(Enum::Microsoft#Foundation#Reporting#Report Selection Usage):Enum::System#Email#Email Scenario">
            <summary>
            Gets the document sending email scenario from report selection usage.
            </summary>
            <param name="ReportSelectionUsage"></param>
            <returns>The email scenario corresponding to the report selection usage</returns>
        </member>
        <member name="M:Codeunit::System#EMail#Email Scenario Mapping.OnAfterFromReportSelectionUsage(Enum::Microsoft#Foundation#Reporting#Report Selection Usage,Enum::System#Email#Email Scenario@)">
            <summary>
            Subscribe to this event to add custom mappings from report selection usage (in case the enum was extended) to email scenarios.
            </summary>
            <param name="ReportSelectionUsage">The input report selection usage of the FromReportSelectionUsage function.</param>
            <param name="EmailScenario">The output email scenario of the FromReportSelectionUsage function.</param>
        </member>
        <member name="O:PermissionSet::System#Security#AccessControl#D365 Agent">
            <summary>
            Provides basic access to the agent functionality. 
            TODO: Move permission set to the System app Agent module when it is introduced
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#AccessControl#Effective Permissions Mgt#.HasDirectRIMPermissionsOnTableData(Integer):Boolean">
            <summary>
            Checks if the user has direct read, insert and modify permissions on the given table id.
            </summary>
            <param name="TableId">Id of the table</param>
            <returns>True if user has direct read, insert and modify permissions on table.</returns>
        </member>
        <member name="O:Enum::System#Security#AccessControl#Permission">
            <summary>
            Specifies the rank of a permission.
            The higher the rank (value) is, the more restrictive the persmission is.
            </summary>
        </member>
        <member name="E:Enum::System#Security#AccessControl#Permission.None">
            <summary>
            Denotes that the permission is missing.
            </summary>
        </member>
        <member name="E:Enum::System#Security#AccessControl#Permission.Indirect">
            <summary>
            Denotes that the permission is Indirect.
            </summary>
        </member>
        <member name="E:Enum::System#Security#AccessControl#Permission.Direct">
            <summary>
            Denotes that the permission is Direct.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#AccessControl#Permission Manager.GetDefaultProfileID(Guid,All Profile@)">
            <summary>
            This procedure retrieves a Default Profile ID to be used for a user, in case there is no valid 
            custom profile set for them in their User Personalization. 
            </summary>
            <param name="UserSecurityID">The SID for the User to find a default profile for</param>
            <param name="AllProfile">The returned AllProfile that is the default for the specified user</param>
            <remarks>
            <list type="number">
              <item><description>If we can provide a tailored default for the user (from the Plan/License), return that, otherwise</description></item>
              <item><description>If there is any system-wide default AllProfile in the table, return it, otherwise</description></item>
              <item><description>Find the default Role Center ID for the system (which checks the Plan/License again and has some additional 
              defaulting logic), and if there is a profile for it return it, otherwise</description></item>
              <item><description>Fall back to just return the first AllProfile available in the table</description></item>
            </list>
            </remarks>
        </member>
        <member name="O:Codeunit::System#Security#AccessControl#User Security Groups PBT">
            <summary>
            Gets Microsoft Entra security groups when run from a page background task.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessToken(OAuth 2#0 Setup@,Text@,Text,Text,Text,Text@,Text@):Boolean">
            <summary>
            Request access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessToken(OAuth 2#0 Setup@,Text@,SecretText,Text,SecretText,SecretText@,SecretText@):Boolean">
            <summary>
            Request access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessTokenWithGivenRequestJson(OAuth 2#0 Setup@,Text,Text@,Text,Text,Text,Text@,Text@):Boolean">
            <summary>
            Request access token using given request json and application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessTokenWithGivenRequestJson(OAuth 2#0 Setup@,Text,Text@,SecretText,Text,SecretText,SecretText@,SecretText@):Boolean">
            <summary>
            Request access token using given request json and application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessTokenWithContentType(OAuth 2#0 Setup@,Text,Text@,Text,Text,Text,Text@,Text@,Boolean):Boolean">
            <summary>
            Request access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RequestAccessTokenWithContentType(OAuth 2#0 Setup@,Text,Text@,SecretText,Text,SecretText,SecretText@,SecretText@,Boolean):Boolean">
            <summary>
            Request access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessToken(OAuth 2#0 Setup@,Text@,Text,Text,Text@,Text@):Boolean">
            <summary>
            Refreshes access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessToken(OAuth 2#0 Setup@,Text@,Text,SecretText,SecretText@,SecretText@):Boolean">
            <summary>
            Refreshes access token using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessTokenWithGivenRequestJson(OAuth 2#0 Setup@,Text,Text@,Text,Text,Text@,Text@):Boolean">
            <summary>
            Refreshes access token with given request json using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessTokenWithGivenRequestJson(OAuth 2#0 Setup@,Text,Text@,Text,SecretText,SecretText@,SecretText@):Boolean">
            <summary>
            Refreshes access token with given request json using application/json ContentType.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessTokenWithContentType(OAuth 2#0 Setup@,Text,Text@,Text,Text,Text@,Text@,Boolean):Boolean">
            <summary>
            Refreshes access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="M:Codeunit::System#Security#Authentication#OAuth 2#0 Mgt#.RefreshAccessTokenWithContentType(OAuth 2#0 Setup@,Text,Text@,Text,SecretText,SecretText@,SecretText@,Boolean):Boolean">
            <summary>
            Refreshes access token using application/x-www-form-urlencoded ContentType if UseUrlEncodedContentType is set to true or application/json ContentType otherwise.
            </summary>
        </member>
        <member name="O:PageExtension::System#Security#User#User Card Perf# Factboxes">
            <summary>
            Modifies the behavior of security group factboxes on the user card for better performance.
            </summary>
        </member>
        <member name="O:PageExtension::System#Security#User#Users Perf# Factboxes">
            <summary>
            Modifies the behavior of security group factboxes on the user list for better performance.
            </summary>
        </member>
        <member name="M:Codeunit::System#IO#File Management.GetFileContents(Text):Text">
            <summary>
            Gets the file contents as text from the file path provided in UTF8 text encoding.
            </summary>
            <param name="FilePath">The path to the file.</param>
            <returns>The text content of the file in UTF8 text encoding.</returns>
        </member>
        <member name="M:Codeunit::System#IO#File Management.GetFileContents(Text,TextEncoding):Text">
            <summary>
            Gets the file contents as text from the file path provided in the requested text encoding.
            </summary>
            <param name="FilePath">The path to the file.</param>
            <param name="Encoding">The text encoding to open the file with.</param>
            <returns>The text content of the file in requested text encoding.</returns>
        </member>
        <member name="O:Table::System#IO#CSV Buffer">
            <summary>
            Table to store CSV (comma-separated values).
            </summary>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InsertEntry(Integer,Integer,Text[250])">
            <summary>
            Inserts an entry to the record.
            </summary>
            <param name="LineNo">The line number on which to insert the value.</param>
            <param name="FieldNo">The field number (or position) on which to insert the value.</param>
            <param name="FieldValue">The value to insert.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.LoadData(Text,Text[1],Text)">
            <summary>
            Loads data from a file.
            </summary>
            <remark>
            Reads the content of the file by lines and separate values using <paramref name="CSVFieldSeparator"/>.
            All the characters in <paramref name="CSVCharactersToTrim"/> will be removed from the beginning and the end of the read values.
            </remark>
            <param name="CSVFileName">The name of the file from which to laod data.</param>
            <param name="CSVFieldSeparator">The separator to use to split the values.</param>
            <param name="CSVCharactersToTrim">Characters to trim from the beginning and the end of the read values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.LoadData(Text,Text[1])">
            <summary>
            Loads data from a file.
            </summary>
            <remark>
            Reads the content of the file by lines and separate values using <paramref name="CSVFieldSeparator"/>.
            </remark>
            <param name="CSVFileName">The name of the file from which to load data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.LoadDataFromStream(InStream,Text[1],Text)">
            <summary>
            Loads data from a stream.
            </summary>
            <remark>
            Reads the content of the stream by lines and separate values using <paramref name="CSVFieldSeparator"/>.
            All the characters in <paramref name="CSVCharactersToTrim"/> will be omitted from the read values.
            </remark>
            <param name="CSVInStream">The stream from which to laod data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
            <param name="CSVCharactersToTrim">Characters to trim from the beginning and the end of the read values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.LoadDataFromStream(InStream,Text[1])">
            <summary>
            Loads data from a stream.
            </summary>
            <remark>
            Reads the content of the stream by lines and separate values using <paramref name="CSVFieldSeparator"/>.
            </remark>
            <param name="CSVInStream">The stream from which to laod data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.SaveData(Text,Text[1])">
            <summary>
            Saves the data stored in the record to a file.
            </summary>
            <param name="CSVFileName">The name of the output file.</param>
            <param name="CSVFieldSeparator">The character to use as separator.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.SaveDataToBlob(Codeunit::System#Utilities#Temp Blob@,Text[1])">
            <summary>
            Saves the data stored in the record to a BLOB.
            </summary>
            <param name="TempBlob">The BLOB in which to save the data.</param>
            <param name="CSVFieldSeparator">The character to use as separator.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InitializeReader(Text,Text[1])">
            <summary>
            Initializes the CSV buffer.
            </summary>
            <remarks>
            No data is inserted into the buffer.
            </remarks>
            <param name="CSVFileName">The name of the file from which to read data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InitializeReader(Text,Text[1],Text)">
            <summary>
            Initializes the CSV buffer.
            </summary>
            <remarks>
            No data is inserted into the buffer.
            </remarks>
            <param name="CSVFileName">The name of the file from which to read data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
            <param name="CSVCharactersToTrim">Characters to trim from the beginning and the end of the read values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InitializeReader(Text,Text[1],Text,DotNetTypeDeclaration::System#Encoding)">
            <summary>
            Initializes the CSV buffer.
            </summary>
            <remarks>
            No data is inserted into the buffer.
            </remarks>
            <param name="CSVFileName">The name of the file from which to read data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
            <param name="CSVCharactersToTrim">Characters to trim from the beginning and the end of the read values.</param>
            <param name="Encoding">The character encoding to use.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InitializeReaderFromStream(InStream,Text[1],Text)">
            <summary>
            Initializes the CSV buffer.
            </summary>
            <remarks>
            No data is inserted into the buffer.
            </remarks>
            <param name="CSVInStream">The stream from which to read data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
            <param name="CSVCharactersToTrim">Characters to trim from the beginning and the end of the read values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.InitializeReaderFromStream(InStream,Text[1])">
            <summary>
            Initializes the CSV buffer.
            </summary>
            <remarks>
            No data is inserted into the buffer.
            </remarks>
            <param name="CSVInStream">The stream from which to read data.</param>
            <param name="CSVFieldSeparator">The character to use to split the values.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.ReadLines(Integer):Boolean">
            <summary>
            Populated the CSV buffer with entries.
            </summary>
            <remarks>
            The entries are read from the stream with which the CSV buffer was initialized.
            </remarks>
            <param name="NumberOfLines">The number of lines to read. If called with 0 or less, the function will read all of the data.</param>
            <returns>True if there were any read lines; otherwise - false.</returns>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.ResetFilters">
            <summary>
            Resets the filters on the record.
            </summary>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetValue(Integer,Integer):Text[250]">
            <summary>
            Gets a value from the record.
            </summary>
            <param name="LineNo">The line number to identify the value.</param>
            <param name="FieldNo">The field number (or position) to identify the value.</param>
            <error>The field in line %1 with index %2 does not exist. The data could not be retrieved.</error>
            <returns>The value stored on line <paramref name="LineNo"/> and field <paramref name="FieldNo"/>.</returns>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetCSVLinesWhere(Integer,Text,CSV Buffer@)">
            <summary>
            Gets all the lines that contain a specific value on a specific field/position.
            </summary>
            <param name="FilterFieldNo">The field number (or position) of the value.</param>
            <param name="FilterValue">The value to filter on.</param>
            <param name="TempResultCSVBuffer">Out parameter to store the result.</param>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetValueOfLineAt(Integer):Text[250]">
            <summary>
            Gets the value on the current line with a specific field number (or position).
            </summary>
            <error>The field in line %1 with index %2 does not exist. The data could not be retrieved.</error>
            <param name="FieldNo">The field number (or posistion) to identify the value.</param>
            <returns>The value on the current line and field number <paramref name="FieldNo"/></returns>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetValueOfLineAt(Integer,Boolean):Text[250]">
            <summary>
            Gets the value on the current line with a specific field number (or position).
            </summary>
            <error>The field in line %1 with index %2 does not exist. The data could not be retrieved.</error>
            <error>unless AcceptNonExisting is set</error>
            <param name="FieldNo">The field number (or posistion) to identify the value.</param>
            <returns>The value on the current line and field number <paramref name="FieldNo"/></returns>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetNumberOfColumns:Integer">
            <summary>
            Gets the number of columns store in the record.
            </summary>
            <returns>The number of fields for every line.</returns>
        </member>
        <member name="M:Table::System#IO#CSV Buffer.GetNumberOfLines:Integer">
            <summary>
            Gets the number of lines stored in the record.
            </summary>
            <returns>The number of lines stored in the record.</returns>
        </member>
        <member name="O:Page::System#IO#Config# Package Warning">
            <summary> 
            This page is meant to inform users that importing and applying Configuration packages may affect the system's performance.
            </summary>
            <remarks>This page is not meant to be used by extensions.</remarks>
        </member>
        <member name="M:Codeunit::System#IO#Config# XML Exchange.ExportPackageXMLToStream(Config# Package,OutStream)">
            <summary>
            Export the provided configuration package to an OutStream.
            </summary>
            <param name="ConfigPackage">Configuration package to export.</param>
            <param name="PackageOutStream">OutStream object that the content of the package will be written to.</param>
        </member>
        <member name="O:Enum::System#AI#Azure AI Service">
            <summary>
            The types of Azure AI services that are available in Business Central.
            </summary>
        </member>
        <member name="E:Enum::System#AI#Azure AI Service.Machine Learning">
            <summary>
            Value corresponds to an Azure Machine Learning service. 
            </summary>
        </member>
        <member name="E:Enum::System#AI#Azure AI Service.Computer Vision">
            <summary>
            Value corresponds to an Azure Computer Vision service. 
            </summary>
        </member>
        <member name="O:Codeunit::System#AI#Azure AI Usage">
            <summary>
            Retrieves information about the usage of the Azure AI services.
            </summary>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.IncrementTotalProcessingTime(Enum::System#AI#Azure AI Service,Decimal)">
            <summary>
            Increments the processing time for the provided Azure AI service with <paramref name="ProcessingTime"/>.
            </summary>
            <error>If <paramref name="ProcessingTime"/> is less or equal to zero.</error>
            <param name="Service">The Azure AI service for which to increment the processing time.</param>
            <param name="ProcessingTime">The value with which to increment the total processing time of the Azure AI service.</param>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.IsLimitReached(Enum::System#AI#Azure AI Service,Decimal):Boolean">
            <summary>
            Checks whether the total processing time of a provided Azure AI service has reached a certain limit.
            </summary>
            <param name="Service">The Azure AI service for which to check.</param>
            <param name="UsageLimit">The limit for which to check if it was reached.</param>
            <returns>True if the limit was reached; otherwise - false.</returns>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.GetTotalProcessingTime(Enum::System#AI#Azure AI Service):Decimal">
            <summary>
            Gets the total processing time of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the processing time.</param>
            <returns>The processing time that the service has used so far.</returns>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.GetResourceLimit(Enum::System#AI#Azure AI Service):Decimal">
            <summary>
            Gets the limit of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the resource limit.</param>
            <returns>The resource limit for the provided service.</returns>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.GetLimitPeriod(Enum::System#AI#Azure AI Service):Option">
            <summary>
            Gets the type of limit period of an Azure AI service.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the limit period.</param>
            <returns>An option: Year,Month,Day,Hour.</returns>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.GetLastTimeUpdated(Enum::System#AI#Azure AI Service):DateTime">
            <summary>
            Gets the last time the provided Azure AI service was updated.
            </summary>
            <param name="Service">The Azure AI service for which to retrieve the last time it was updated.</param>
            <returns>A datetime that notes the last time the Azure AI service was updated.</returns>
        </member>
        <member name="M:Codeunit::System#AI#Azure AI Usage.SetImageAnalysisIsSetup(Boolean)">
            <summary>
            Sets a value that denotes whether the Image Analysis service was setup.
            </summary>
            <remarks>The function will be discontinued as it should not be part of the this API.</remarks>
            <param name="NewValue">The value to set.</param>
        </member>
        <member name="E:Enum::System#AI#Image Analysis Type.Tags">
            <summary>
            Tags - tags the image with a detailed list of words related to the image content.
            </summary>
        </member>
        <member name="E:Enum::System#AI#Image Analysis Type.Faces">
            <summary>
            Faces - detects if faces are present. If present, generate coordinates, gender and age.
            </summary>
        </member>
        <member name="E:Enum::System#AI#Image Analysis Type.Color">
            <summary>
            Color - determines the accent color, dominant color, and whether an image is black and white.
            </summary>
        </member>
        <member name="E:Enum::System#AI#Image Analysis Type.Adult">
            <summary>
            Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected.
            </summary>
        </member>
        <member name="M:Codeunit::System#Text#SelectionFilterManagement.GetSelectionFilter(RecordRef@,Integer):Text">
            <summary>
            Get a filter for the selected field from a provided record. Ranges will be used inside the filter were possible.
            </summary>
            <param name="TempRecRef">Record used to determine the field filter.</param>
            <param name="SelectionFieldID">The field for which the filter will be constructed.</param>
            <returns>The filter for the provided field ID. For example, '1..3|6'.</returns>
            <remarks>This method queries the database intensively, can cause perfomance issues and even cause database server exceptions. Consider using the overload with ComputeRangesUsingRecords set to false.</remarks>
        </member>
        <member name="M:Codeunit::System#Text#SelectionFilterManagement.GetSelectionFilter(RecordRef@,Integer,Boolean):Text">
            <summary>
            Get a filter for the selected field from a provided record. Ranges will be used inside the filter were possible.
            The values in the selected field must be unique and sorted in ascending order.
            </summary>
            <param name="SourceRecRef">Record used to determine the field filter.</param>
            <param name="SelectionFieldID">The field for which the filter will be constructed.</param>
            <param name="ComputeRangesUsingRecords">Specify if the computations should be performed on records, or in-memory structures.
            If the parameter is false, the database load is greatly reduced, but the memory footprint is bigger</param>
            <returns>The filter for the provided field ID. For example, '1..3|6'.</returns>
        </member>
        <member name="M:Table::System#Threading#Job Queue Entry.GetRecLockedExtendedTimeout:Boolean">
             <summary>
             Allow up to three lock time-outs = 90 seconds, in order to reduce lock timeouts
            </summary>    
        </member>
        <member name="M:Codeunit::System#Threading#Job Queue Management.FindStaleJobsAndSetError">
            <summary>
            To find stale jobs (in process jobs with no scheduled tasks) and set them to error state.
            For both JQE and JQLE
            </summary>
        </member>
        <member name="M:Codeunit::System#Threading#Job Queue Management.OnGetCheckDelayInMinutes(Integer@)">
            <Summary>Used for test. Sets the minimum age of stale job queue entries and job queue log entries.</Summary>
            <Parameters>DelayInMinutes defaults to 10 minutes but can be overridden to a longer or shorter time, including 0</Parameters>
        </member>
        <member name="O:Enum::System#Threading#Job Queue Priority">
            <summary>
            Specifies the priority of a job in the job queue. Only used for jobs with a Category Code, which is used for serialization of jobs.
            </summary>
        </member>
        <member name="M:Codeunit::System#Xml#OpenXML Management.CopyDataToExcelTable(DotNetTypeDeclaration::System#WorksheetWriter,DotNetTypeDeclaration::System#DataTable)">
            <summary>
            A CopyDataToExcelTable function overload with HideDialog parameter set to true.
            </summary>
        </member>
        <member name="O:Page::System#DataAdministration#Data Administration Guide">
            <summary>
            Manage the size of your database. The guide will suggest ways to clean up expired records.
            </summary>
        </member>
        <member name="M:Page::System#DataAdministration#Data Administration Guide.OnAfterLoadPages(List of [Data Administration Guide Page]@,Dictionary of [Data Administration Guide Page,Data Administration Guide Page]@,List of [Data Administration Guide Page]@)">
            <summary>
            Use this event to add new pages to the guide.
            </summary>
            <param name="Pages">The list of pages that make up the guide.</param>
            <param name="SkipTo">A dictionary which defines which pages allow skipping to another page. The dictionary key is the page from which you can skip, the value is the page to which you can skip.</param>
        </member>
        <member name="M:Page::System#DataAdministration#Data Administration Guide.OnAfterUpdateControls(Enum::System#DataAdministration#Data Administration Guide Page)">
            <summary>
            Use this event to set the visibility of pages in the guide.
            </summary>
            <param name="CurrentPage">The current page of the guide.</param>
        </member>
        <member name="O:Enum::System#DataAdministration#Data Administration Guide Page">
            <summary>
            The values in this enum represent the pages in the Data Administration Guide page
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.Blank">
            <summary>
            this value should not be used.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.Introduction">
            <summary>
            This value is used to identify the introduction page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.RetenPolIntro">
            <summary>
            This value is used to identify the retention policy introduction page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.CompaniesIntro">
            <summary>
            This value is used to identify the companies introduction page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionIntro">
            <summary>
            This value is used to identify the date compression introduction page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionSelection">
            <summary>
            This value is used to identify the date compression entries selection page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionOptions">
            <summary>
            This value is used to identify the date compression options page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionOptions2">
            <summary>
            This value is used to identify the second date compression options selection page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionRun">
            <summary>
            This value is used to identify the run date compression page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.DateCompressionResult">
            <summary>
            This value is used to identify the date compression results page.
            </summary>
        </member>
        <member name="E:Enum::System#DataAdministration#Data Administration Guide Page.Conclusion">
            <summary>
            This value is used to identify the conclusion page.
            </summary>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.GetCultureInfoByName(Text)">
            <summary>
            Points this codeunit to the specified culture.
            </summary>
            <param name="CultureName">The culture language tag, for example "en-US".</param>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.GetCultureInfoById(Integer)">
            <summary>
            Points this codeunit to the specified culture.
            </summary>
            <param name="LanguageId">The culture LCID, for example 1033.</param>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.InvariantCulture">
            <summary>
            Points this codeunit to the invariant culture.
            </summary>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.Name:Text">
            <summary>
            Gets the name of the culture.
            </summary>
            <returns>The name of the culture, for example "en-US".</returns>
            <remarks>Make sure you initialize this codeunit (for example with the procedure <see cref="GetCultureInfoById"/>) before calling this function.</remarks>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.LCID:Integer">
            <summary>
            Gets the language code (LCID) of the culture.
            </summary>
            <returns>The LCID of the culture, for example 1033.</returns>
            <remarks>Make sure you initialize this codeunit (for example with the procedure <see cref="GetCultureInfoById"/>) before calling this function.</remarks>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.CurrentCultureName:Text">
            <summary>
            Gets the name of the current culture.
            </summary>
            <returns>The name of the current culture, for example "en-US".</returns>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.ToString:Text">
            <summary>
            Gets a string representation of the culture.
            </summary>
            <returns>A string representation of the culture.</returns>
            <remarks>Make sure you initialize this codeunit (for example with the procedure <see cref="GetCultureInfoById"/>) before calling this function.</remarks>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.TwoLetterISOLanguageName:Text">
            <summary>
            Gets the language name for the culture.
            </summary>
            <returns>A code (two or three letters long), for example "en" or "quz".</returns>
            <remarks>Make sure you initialize this codeunit (for example with the procedure <see cref="GetCultureInfoById"/>) before calling this function.</remarks>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.ThreeLetterWindowsLanguageName:Text">
            <summary>
            Gets the three-letter windows language name.
            </summary>
            <returns>The three letter Windows language name, for example "ENU".</returns>
        </member>
        <member name="M:Codeunit::System#Globalization#DotNet_CultureInfo.DateTimeFormat(Codeunit::System#DateTime#DotNet_DateTimeFormatInfo@)">
            <summary>
            Gets the date-time format info for the culture.
            </summary>
            <param name="DotNet_DateTimeFormatInfo">The returned date-time format info.</param>
            <remarks>Make sure you initialize this codeunit (for example with the procedure <see cref="GetCultureInfoById"/>) before calling this function.</remarks>
        </member>
        <member name="M:Codeunit::System#Feedback#Onboarding Signal.RegisterNewOnboardingSignal(Text[30],Enum::System#Feedback#Onboarding Signal Type)">
            <summary> Register a new Onboarding Signal to keep track of. </summary>
            <param name="CompanyName"> The name of the company you want to register the onboarding signal for. </param>
            <param name="OnboardingSignalType"> A new Onboarding Signal. </param>
        </member>
        <member name="M:Codeunit::System#Feedback#Onboarding Signal.CheckAndEmitOnboardingSignals">
            <summary>
            Check the status on all registered onboarding signals, and emit corresponding Telemetry when the criteria is met. This is run automatically once a day when login.
            </summary>
        </member>
        <member name="M:Codeunit::System#Feedback#Onboarding Signal.HasCompanyOnboarded(Text):Boolean">
            <summary>
            Check if a company has onboarded
            </summary>
            <param name="CompanyName"> The Company's name to check. </param>
            <returns> True if all the signals for the current company has completed, except for the Company Signal </returns>
        </member>
        <member name="M:Codeunit::System#Feedback#Onboarding Signal.GetOnboardingSignals(Onboarding Signal Buffer@)">
            <summary>
            Get all Onboarding Signals with Read access
            </summary>
            <param name="OnboardingSignalBuffer"> The variable holds all the onboarding signals </param>
        </member>
        <member name="M:Interface::System#Feedback#Onboarding Signal.IsOnboarded:Boolean">
            <summary>
            Should check whether the onboarding criteria has been met.
            </summary>
            <returns> True if the onboarding criteria has been met. </returns>
        </member>
        <member name="E:Enum::Microsoft#Utilities#Company Setup Status. ">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Utilities#Company Setup Status.Completed">
            <summary>
            Setup completed.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Utilities#Company Setup Status.In Progress">
            <summary>
            Setup is in progress.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Utilities#Company Setup Status.Error">
            <summary>
            Setup ended in an error.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Utilities#Company Setup Status.Missing Permission">
            <summary>
            The user performing setup is missing permissions.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Utilities#DocumentNoVisibility.CheckNumberSeries(Variant,Code[20],Integer)">
            <summary>
            Increases the number series until the next number is free in the table for the specified field.
            </summary>
            <param name="RecVariant">Record or table id which the number series is used for.</param>
            <param name="NoSeriesCode">No. Series used.</param>
            <param name="FieldNo">Field the number series is used for.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Utilities#Sync#Dep#Fld-Utilities.GetPreviousRecord(Variant,RecordRef@):Boolean">
            <summary>
            Gets the previous record - xRec is not the previous version of the record it is the previous record on the page.
            If the update was not started from page, xRec will be same as the Rec.
            This function MUST be called before the update of the record is done, for example from OnBeforeModify trigger.
            </summary>
            <param name="CurrentRecord">Current record that we want to get a previous version of.</param>
            <param name="PreviousRecordRef">Previous record.</param>
            <returns>A boolean that indicates whether the previous record exists.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Utilities#Sync#Dep#Fld-Utilities.IsFieldSynchronizationDisabled:Boolean">
            <summary>
            Check if synchronization is disabled.
            By default is disabled when install or upgrade is in progress.
            In that cases is not suitable to run synchronization.
            </summary>
            <returns>A boolean that indicates whether the synchronization is disabled.</returns>
        </member>
        <member name="O:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree">
            <summary>
            Helps create and traverse data as nodes in a tree. The structure supports disjoint trees as well as multiple parents for a child node.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree.AddRelation(Codeunit::Microsoft#Inventory#BOM#Tree#BOM Node,Codeunit::Microsoft#Inventory#BOM#Tree#BOM Node)">
            <summary>
            Adds a relation between two nodes connected in a parent- child relationship.
            </summary>
            <param name="Parent">The node that represents the parent part of the relationship.</param>
            <param name="Child">The node that represents the child part of the relationship.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree.TraverseDown">
            <summary>
            Traverses the nodes starting from the root node and traverses down to the children and so on. Note that there can be many root nodes, in which case, the traversal starts from each of them.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree.TraverseDown(Codeunit::Microsoft#Inventory#BOM#Tree#BOM Node)">
            <summary>
            Traverses the nodes starting from the given node and traverses down to the children and so on. 
            </summary>
            <param name="Node">The node from which the traversal should start.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree.ChildHasKey(Text,Text):Boolean">
            <summary>
            Finds if a node with the given key is a child of another node with the given parent key.
            <param name="ParentKey">The key of the parent node.</param>
            <param name="ChildKey">The key of the child node.</param>
            <returns>True if there was a child found with the key, false otherwise.</returns>
            <remarks>This will return false if the node with the parent key was not found.</remarks>
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary">
            <summary>
            This exposes a collection of the BOM Tree Node objects that are hashed against the key for those instances.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.Add(Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node)">
            <summary>
            Adds an instance to the dictionary. The key is fetched from the GetKey() procedure of the Instance implementation.
            <param name="Instance">The instance to add.</param>
            <remarks>In case there is another instance with a key same as the one being added, an error shall be raised.</remarks>
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.Get(Text,Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node@)">
            <summary>
            Fetches the instance based on the given key.
            <param name="InstanceKey">The key given.</param>
            <param name="Found">The instance that was fetched.</param>
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.Remove(Text)">
            <summary>
            Removes the instance from the dictionary that correponds to the given key.
            <param name="InstanceKey">The given key.</param>
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.ResetEnumerator">
            <summary>
            Resets the internal variables that allow iterating through the items in the dictionary.
            <remarks>It is a good practice to call this before starting an iteration.</remarks>
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.MoveNext:Boolean">
            <summary>
            Advances the enumerator to the next element of the dictionary.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.GetCurrent(Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node@)">
            <summary>
            Gets the element in the dictionary at the current position of the enumerator.
            <param name="Instance">The instance pointed at.</param>
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#BOM#Tree#BOM Tree Node Dictionary.Count:Integer">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.GetMaxValuationDate(Item Ledger Entry,Value Entry):Date">
            <summary>
            The method find latest valuation date. 
            </summary>
            <param name="ItemLedgerEntry">Set Item Ledger Entry with data for search filters.</param>
            <param name="ValueEntry">Set Value Entry record which provide original Valuation Date for the search.</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.GetValuationPeriod(Date@,Date)">
            <summary>
            The method find valuation period for posting date. 
            </summary>
            <param name="CalendarPeriod">Date record for valuation period.</param>
            <param name="PostingDate">Set Posting Date for the search.</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.DeleteBuffer(Code[20],Date)">
            <summary>
            The method delete average cost adjustment buffer records for selected Item and from Valuation Date. 
            </summary>
            <param name="ItemNo">Set Item No. fo filtering buffer records. Use blank value to skip this filter.</param>
            <param name="FromValuationDate">Set the filter from Valuation Date. Use 0D to skip this filter.</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.IsEntriesAdjusted(Code[20],Date):Boolean">
            <summary>
            The method check is all ledger entries have been adjusted for selected item and before ending date. 
            </summary>
            <param name="ItemNo">Set Item No. fo filtering buffer records. Use blank value to skip this filter.</param>
            <param name="EndingDate">Set the filter before Ending Date. Use 0D to skip this filter.</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.LockBuffer">
            <summary>
            The method lock average cost adjustment buffer table. 
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Average Cost Entry Point.UpdateValuationDate(Value Entry)">
            <summary>
            The method update average cost adjustment buffer table based on data in value entry. 
            </summary>
            <param name="ValueEntry">Set parameter Value Entry with data for update.</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Inventory Adjustment.SetFilterItem(Item@)">
            <summary>
            The method set filters for items for inventory cost adjustments codeunit. 
            </summary>
            <param name="NewItem">the record gets filtered</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Inventory Adjustment.SetJobUpdateProperties(Boolean)">
            <summary>
            The method set skip job cost update parameter for inventory cost adjustment codeunit. 
            </summary>
            <param name="SkipUpdateJobItemCost">define if Job Item Cost update should be skipped</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Inventory Adjustment.SetProperties(Boolean,Boolean)">
            <summary>
            The method set properties for inventory cost adjustment codeunit. 
            </summary>
            <param name="NewIsOnlineAdjmt">set Online Adjmt paramater for inventory cost adjustment codeunit</param>
            <param name="NewIsOnlineAdjmt">set Post to G/L paramater for inventory cost adjustment codeunit</param>
        </member>
        <member name="M:Interface::Microsoft#Inventory#Costing#Inventory Adjustment.MakeMultiLevelAdjmt">
            <summary>
            The method run inventory cost adjustment codeunit. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.EmptyLine:Boolean">
            <summary>
            Determines if the current item journal line is considered empty based on its quantity, time, item number, 
            and value entry type.
            </summary>
            <returns>True if the item journal line is considered empty, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsValueEntryForDeletedItem:Boolean">
            <summary>
            Determines if the current item journal line is for a deleted item based on its entry type, value entry type, 
            item number, item charge number, and invoiced quantity.
            </summary>
            <returns>True if the item journal line is for a deleted item, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.UpdateAmount">
            <summary>
            Updates the amount of the current item journal line to reflect changes in quantity and unit amount.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckItemAvailable(Integer)">
            <summary>
            Checks if the item is available based on the current item journal line. 
            </summary>
            <remarks>
            An error or a notification is raised if the item is out of stock.
            </remarks>
            <param name="CalledByFieldNo">Field number that called the item availability check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SetUpNewLine(Item Journal Line)">
            <summary>
            Initializes a new item journal line based on the previous item journal line record.
            </summary>
            <param name="LastItemJnlLine">Previous item journal line record.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SetDocNos(Enum::Microsoft#Inventory#Ledger#Item Ledger Document Type,Code[20],Text[35],Code[20])">
            <summary>
            Sets the document-related fields of an item journal line.
            </summary>
            <param name="DocType">Document type to set.</param>
            <param name="DocNo">Document no. to set.</param>
            <param name="ExtDocNo">External document no. to set.</param>
            <param name="PostingNos">Posting no. series to set.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.GetUnitAmount(Integer)">
            <summary>
            Updates the unit amount of the current item journal line.
            </summary>
            <param name="CalledByFieldNo">Field number that called the unit amount update.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ApplyPrice(Enum::Microsoft#Pricing#PriceList#Price Type,Integer)">
            <summary>
            Updates the price of the item journal line.
            </summary>
            <param name="PriceType">The price type for which the price or discount will be calculated.</param>
            <param name="CalledByFieldNo">Field number that called the price update.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.GetLineWithPrice(Interface::Microsoft#Pricing#PriceList#Line With Price@)">
            <summary>
            Gets the default or overridden line with price interface implementation.
            </summary>
            <param name="LineWithPrice">Return value: line with price implementation.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.Signed(Decimal):Decimal">
            <summary>
            Adjusts the sign of the provided value based on the document type of the item journal line.
            </summary>
            <param name="Value">The value to adjust the sign of.</param>
            <returns>Signed value.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsInbound:Boolean">
            <summary>
            Determines if the item journal line is inbound based on the quantities.
            </summary>
            <returns>True if item journal line is inbound, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.OpenItemTrackingLines(Boolean)">
            <summary>
            Opens a page for editing item tracking lines for the item journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CreateDim(List of [Dictionary])">
            <summary>
            Creates dimensions for the item journal line based on the provided default dimension sources.
            </summary>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CreateDim(List of [Dictionary],Integer,Integer)">
            <summary>
            Creates dimensions for the item journal line based on the provided default dimension sources, 
            an inherited dimension set ID and an inherited table number.
            </summary>
            <remarks>
            Also updates the shortcut dimension codes and sets the new dimension set ID and new shortcut dimension codes 
            if the entry type is transfer.
            </remarks>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
            <param name="InheritFromDimSetID">Dimension set ID to inherit.</param>
            <param name="InheritFromTableNo">
            Table number to inherit from. This parameter is used to specify the table number for the new temporary 
            dimension buffer that are created based on the dimension set entries associated with InheritFromDimSetID. 
            These temporary records are used later in the procedure to determine the default dimension set ID.
            </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyDim(Integer)">
            <summary>
            Sets dimensions to the item journal line from the provided dimension set.
            </summary>
            <param name="DimesionSetID">Dimension set ID to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CreateProdDim">
            <summary>
            Creates and assigns a dimension set ID to an item journal line record based on the dimensions of the associated 
            production order, production order line, and production order component.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Verifies whether the provided shortcut dimension code and value are valid.
            </summary>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.LookupShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Opens a page for selecting a dimension code, then assigns the selected value to the provided number 
            of the shortcut dimension. 
            </summary>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Return value: Value of the selected shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ShowShortcutDimCode(Code[20][]@)">
            <summary>
            Gets an array of shortcut dimension values from the dimensions of the item journal line.
            </summary>
            <param name="ShortcutDimCode">Return value: The array of shortcut dimension values.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ValidateNewShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Verifies whether the provided new shortcut dimension code and value are valid.
            </summary>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="NewShortcutDimCode">Value of the new shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.LookupNewShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Opens a page for selecting a dimension code, then assigns the selected value to the presented number of 
            the new shortcut dimension. 
            </summary>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="NewShortcutDimCode">Return value: Value of the selected new shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ShowNewShortcutDimCode(Code[20][]@)">
            <summary>
            Gets an array of new shortcut dimension values from the dimensions of the item journal line.
            </summary>
            <param name="NewShortcutDimCode">Return value: The array of new shortcut dimension values.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyDocumentFields(Enum::Microsoft#Inventory#Ledger#Item Ledger Document Type,Code[20],Text[35],Code[10],Code[20])">
            <summary>
            Copies provided document-related fields to the current item journal line record.
            </summary>
            <param name="DocType">Document type to set.</param>
            <param name="DocNo">Document no. to set.</param>
            <param name="ExtDocNo">External document no. to set.</param>
            <param name="SourceCode">Source code to set.</param>
            <param name="NoSeriesCode">Posting no. series code to set.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyFromSalesHeader(Sales Header)">
            <summary>
            Copies fields from the provided sales header record to the current item journal line.
            </summary>
            <param name="SalesHeader">Sales header to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyFromSalesLine(Sales Line)">
            <summary>
            Copies fields from the provided sales line record to the current item journal line.
            </summary>
            <param name="SalesLine">Sales line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyFromPurchHeader(Purchase Header)">
            <summary>
            Copies fields from the provided purchase header record to the current item journal line.
            </summary>
            <param name="PurchHeader">Purchase header to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyFromPurchLine(Purchase Line)">
            <summary>
            Copies fields from the provided purchase line record to the current item journal line.
            </summary>
            <param name="PurchLine">Purchase line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyFromJobJnlLine(Job Journal Line)">
            <summary>
            Copies fields from the provided job journal line record to the current item journal line.
            </summary>
            <param name="JobJnlLine">Job journal line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.RetrieveCosts">
            <summary>
            Retrieves and sets the global UnitCost variable for an item journal line.
            </summary>
            <remarks>
            Global UnitCost variable is used to set and calculate unit cost and unit amount in various places.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.OnlyStopTime:Boolean">
            <summary>
            Determines if only the stop time field of the current item journal line record is set.
            </summary>
            <remarks>
            In order to return true, setup time and run time fields must not be set.
            </remarks>
            <returns>True if only the stop time is set, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.OutputValuePosting:Boolean">
            <summary>
            Determines if an output value posting should be performed for an item journal line.
            </summary>
            <returns>True if output posting should be performed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.TimeIsEmpty:Boolean">
            <summary>
            Determines if time related fields of the current item journal line record are empty.
            </summary>
            <remarks>
            Time related fields consists of setup time, run time, and stop time fields.
            </remarks>
            <returns>True if time related fields are empty, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.RowID1:Text[250]">
            <summary>
            Generates a unique identifier text for a item journal line record which is used for item tracking.
            </summary>
            <returns>Generated text.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.GetSourceCaption:Text">
            <summary>
            Returns a formatted text that represents the source of an item journal line record.
            </summary>
            <remarks>
            The resulting text consists of the journal template name, journal batch name and item number separated by space.
            </remarks>
            <returns>Formatted text of the journal template name, journal batch name and item number separated by space.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SetReservationEntry(Reservation Entry@)">
            <summary>
            Initializes the reservation entries from the item journal line.
            </summary>
            <param name="ReservEntry">Return value: Initialized reservation entry.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SetReservationFilters(Reservation Entry@)">
            <summary>
            Filters reservation entry from the item journal line.
            </summary>
            <param name="ReservEntry">Return value: Filtered reservation entry.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ReservEntryExist:Boolean">
            <summary>
            Checks if reservation entry exists for the item journal line.
            </summary>
            <returns>True if reservation entry exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ItemPosting:Boolean">
            <summary>
            Determines if the next operation number on the associated production order routing line exists.
            </summary>
            <remarks>
            If item journal line entry type is not output, it returns true.
            </remarks>
            <returns>True if next operation number does not exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.LastOutputOperation(Item Journal Line):Boolean">
            <summary>
            Determines whether the operation specified in the provided item journal line record is the last output operation 
            in the associated production order routing line.
            </summary>
            <param name="ItemJnlLine">Item journal line to check.</param>
            <returns>True if this is the last output operation, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.LookupItemNo">
            <summary>
            Performs a lookup for the item of an item journal line based on its entry type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.RecalculateUnitAmount">
            <summary>
            Updates the unit amount for an item journal line record based on various factors such as the item's 
            indirect cost percentage, overhead rate, quantity per unit of measure, and entry type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsReclass(Item Journal Line):Boolean">
            <summary>
            Determines whether an item journal line represents a reclassification.
            </summary>
            <param name="ItemJnlLine">Item journal line to check.</param>
            <returns>True if item journal line represents a reclassification, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckWhse(Code[20],Decimal@)">
            <summary>
            Checks warehouse settings for a provided location and adjusts the output quantity 
            for an item journal line record based on these settings and the entry type of the record.
            </summary>
            <param name="LocationCode">Location to check warehouse settings for.</param>
            <param name="QtyToPost">Return value: Output quantity to use.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ShowDimensions">
            <summary>
            Opens a page for editing dimensions for the item journal line. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ShowReclasDimensions">
            <summary>
            Opens a page for editing the dimension set associated with a reclassification in the current item journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SwitchLinesWithErrorsFilter(Boolean@)">
            <summary>
            Toggles the visibility of item journal lines based on whether they have associated error messages. 
            </summary>
            <remarks>
            When the ShowAllLinesEnabled flag is true, all item journal lines are shown. 
            When the flag is false, only item journal lines with associated error messages are shown.
            </remarks>
            <param name="ShowAllLinesEnabled">Return value: Flag to enable or disable item journal lines with errors.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.PostingItemJnlFromProduction(Boolean)">
            <summary>
            Posts an item journal line record from a production order.
            </summary>
            <param name="Print">If true, additional functionality of printing documents is executed.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsAssemblyResourceConsumpLine:Boolean">
            <summary>
            Determines whether an item journal line represents a resource consumption line for an assembly output.
            </summary>
            <returns>True if the line represents a resource consumption line for an assembly output, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsAssemblyOutputLine:Boolean">
            <summary>
            Determine whether an item journal line represents an assembly output line.
            </summary>
            <returns>True if the linerepresents an assembly output line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsATOCorrection:Boolean">
            <summary>
            Determines whether an item journal line represents a correction for an assemble-to-order (ATO) sale.
            </summary>
            <returns>True if theline represents a correction for an assemble-to-order sale, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ClearTracking">
            <summary>
            Clears the tracking information (serial, lot and package number) of an item journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ClearDates">
            <summary>
            Clears the expiration and warranty dates of the item journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyTrackingFromReservEntry(Reservation Entry)">
            <summary>
            Copies tracking information (serial, lot and package number) from a reservation entry to an item journal line.
            </summary>
            <param name="ReservationEntry">Reservation entry to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyTrackingFromItemLedgEntry(Item Ledger Entry)">
            <summary>
            Copies tracking information (serial, lot and package number) from a item ledger entry to an item journal line.
            </summary>
            <param name="ItemLedgEntry">Item ledger entry to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyTrackingFromSpec(Tracking Specification)">
            <summary>
            Copies tracking information (serial, lot and package number) from a tracking specification to an item journal line.
            </summary>
            <param name="TrackingSpecification">Tracking specification to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyNewTrackingFromNewSpec(Tracking Specification)">
            <summary>
            Copies new tracking information (new serial number and new lot number) from a tracking specification
            to an item journal line.
            </summary>
            <param name="TrackingSpecification">Tracking specification to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CopyNewTrackingFromOldItemLedgerEntry(Item Ledger Entry)">
            <summary>
            Copies tracking information (serial, lot and package number) from a item ledger entry to an item journal line.
            </summary>
            <param name="ItemLedgEntry">Item ledger entry to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SetTrackingFilterFromItemLedgerEntry(Item Ledger Entry)">
            <summary>
            Set tracking information (serial, lot and package number) filter from a item ledger entry to an item journal line.
            </summary>
            <param name="ItemledgerEntry">Item ledger entry to copy tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.TrackingExists:Boolean">
            <summary>
            Determines whether tracking information exists for an item journal line.
            </summary>
            <returns>True if the tracking exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.HasSameTracking(Item Journal Line):Boolean">
            <summary>
            Determines whether the current item journal line has the same tracking information as the provided item journal line.
            </summary>
            <param name="ItemJournalLine">Item journal line to check the tracking information from.</param>
            <returns>True if the tracking information is the same, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.HasSameNewTracking:Boolean">
            <summary>
            Determines whether the current item journal line has the same serial, lot and package numbers as the new serial, lot and package numbers.
            </summary>
            <returns>True if the tracking information is the same, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.TestItemFields(Code[20],Code[10],Code[10])">
            <summary>
            Tests if the item number, variant code and location code in an item journal line are the same as the provided values.
            </summary>
            <param name="ItemNo">Item number to check.</param>
            <param name="VariantCode">Variant code to check.</param>
            <param name="LocationCode">Location code to check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.DisplayErrorIfItemIsBlocked(Item)">
            <summary>
            Checks if the provided item is blocked and raises an error message if it is.
            </summary>
            <param name="Item">Item to check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.DisplayErrorIfItemVariantIsBlocked(Item Variant)">
            <summary>
            Checks if the provided item variant is blocked and raises an error message if it is.
            </summary>
            <param name="ItemVariant">Item variant to check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsPurchaseReturn:Boolean">
            <summary>
            Determines whether an item journal line represents a purchase return.
            </summary>
            <returns>True if an item journal line represents a purchase return, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsOpenedFromBatch:Boolean">
            <summary>
            Determines whether the current item journal line record was opened from a batch. 
            </summary>
            <remarks>
            It checks the filters applied to the journal batch name and journal template name fields.
            </remarks>
            <returns>True if the current item journal line record was opened from a batch, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.SubcontractingWorkCenterUsed:Boolean">
            <summary>
            Determines whether a subcontracting work center is used in an item journal line.
            </summary>
            <returns>True if a subcontracting work center is used, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckItemJournalLineRestriction">
            <summary>
            Triggers the OnCheckItemJournalLinePostRestrictions event to check any additional restrictions 
            before posting item journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckTrackingIsEmpty">
            <summary>
            Tests if the tracking information (serial, lot and package number) in the item journal line is empty.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckNewTrackingIsEmpty">
            <summary>
            Tests if the new tracking information (new serial number and new lot number) in the item journal line is empty.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckTrackingEqualItemLedgEntry(Item Ledger Entry)">
            <summary>
            Tests if the tracking information (serial, lot and package number) in the item journal line is equal to the 
            tracking information in the provided item ledger entry.
            </summary>
            <param name="ItemLedgerEntry">Item ledger entry to test the tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckTrackingEqualTrackingSpecification(Tracking Specification)">
            <summary>
            Tests if the tracking information (serial, lot and package number) in the item journal line is equal to the 
            tracking information in the provided tracking specifiation.
            </summary>
            <param name="TrackingSpecification">Tracking specification to test the tracking information from.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckTrackingIfRequired(Item Tracking Setup)">
            <summary>
            Tests if the tracking information (serial, lot and package number) of the item journal line are filled if 
            required by the item tracking setup.
            </summary>
            <param name="ItemTrackingSetup">Item tracking setup to use.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckNewTrackingIfRequired(Item Tracking Setup)">
            <summary>
            Tests if the new tracking information (new serial number and new lot number) of the item journal line are filled 
            if required by the item tracking setup.
            </summary>
            <param name="ItemTrackingSetup">Item tracking setup to use.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CheckTrackingIfRequiredNotBlank(Item Tracking Setup)">
            <summary>
            Tests if the new tracking information (new serial number and new lot number) of the item journal line 
            is required and not empty. If the tracking information is required and empty, an error message is raised.
            </summary>
            <param name="ItemTrackingSetup">Item tracking setup to use.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.ValidateTypeWithItemNo">
            <summary>
            Tests the type of the item journal line based on the type of the associated item.
            </summary>
            <remarks>
            It ensures that service items and non-inventoriable items are used correctly in item journal lines.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.IsNotInternalWhseMovement:Boolean">
            <summary>
            Determines if the item journal line does not represent an internal warehouse movement.
            </summary>
            <returns>True if the item journal line does not represent an internal warehouse movement, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.PrintInventoryMovement">
            <summary>
            Runs the inventory movement report for the item journal lines that have the same journal template name and 
            journal batch name as the current item journal line. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the item journal line if default dimensions are defined for the related entry.
            </summary>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.RenumberDocumentNo">
            <summary>
            Renumbers the document number of the current item journal line based on the number series specified in the 
            associated item journal batch.
            </summary>
            <remarks>
            An error will be raised if there is an active filter on the document number field.
            A commit is used during renumbering.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.LookUpTrackingSummary(Enum::Microsoft#Inventory#Tracking#Item Tracking Type)">
            <summary>
            Opens the item tracking summary page to update the tracking information for an item journal line 
            based on the specified tracking type.
            </summary>
            <param name="TrackingType">Item tracking type on which tracking information should be assigned.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Journal#Item Journal Line.GetDateForCalculations:Date">
            <summary>
            Gets the date required for item journal line calculations.
            </summary>
            <returns>The date for calculations.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.RunWithCheck(Item Journal Line@):Boolean">
            <summary>
            Posts the provided item journal line. The line is copied to a global variable. A check is performed to ensure the Item and Variant are not blocked.
            </summary>
            <param name="ItemJnlLine2">Item journal line to post.</param>
            <returns>True if item journal line was posted, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.RunPostWithReservation(Item Journal Line@,Reservation Entry@):Boolean">
            <summary>
            Posts the item journal line. Item journal lines are split before posting based on item tracking specification.
            </summary>
            <param name="ItemJnlLine2">Item journal line to post.</param>
            <param name="ReservationEntry">Return value: Get the set of reservation entries used in posting.</param>
            <returns>True if item journal line was posted, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.PostSplitJnlLine(Item Journal Line@,Boolean):Boolean">
            <summary>
            Splits the item journal line into multiple lines based on item tracking specification and posts them.
            <remarks>
            After posting, corrects the valuation date of output entries in the item ledger 
            based on the maximum consumption valuation date.
            </remarks>
            </summary>
            <param name="ItemJnlLineToPost">Item journal line to post.</param>
            <param name="TrackingSpecExists">True, if item tracking exists, otherwise false.</param>
            <returns>True if item journal line was posted, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.PostItem">
            <summary>
            Updates item journal line with information from the item or SKU and posts it creating item ledger, 
            value and item application entries.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ItemQtyPosting">
            <summary>
            Posts the current item journal line in the global ItemJnlLine buffer, creating item ledger, value and application entries.
            It checks if the quantity and invoiced quantity of the item journal line are different. If they are, 
            it tests if the invoiced quantity is zero and raises an error otherwise.
            Inserts an item ledger entry and a value entry from the item journal line information.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ItemValuePosting">
            <summary>
            Posts balance of expected cost reversal if it's expected by item's costing method.
            </summary>
            <remarks>
            If a balance is expected from a cost reversal based on the item's costing method and the properties of the 
            item journal line then the procedure inserts a balance expected cost reversal entry for a value entry.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.PostFlushedConsumption(Production Order,Prod# Order Line,Prod# Order Component,Prod# Order Routing Line@,Item Journal Line)">
            <summary>
            Posts the consumption of the component in a production order. 
            </summary>
            <param name="ProdOrder">Production order being posted.</param>
            <param name="ProdOrderLine">Production order line being posted.</param>
            <param name="ProdOrderComp">Production order component to post.</param>
            <param name="ProdOrderRoutingLine">Production order routing line. This record is only used on events.</param>
            <param name="OldItemJnlLine">Previous item journal line from which new one will be initialized.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.UpdateUnitCost(Value Entry)">
            <summary>
            Updates the unit cost on item and SKU for the last direct cost from the value entry.
            </summary>
            <param name="ValueEntry">Value entry to calculate unit cost from.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.UnApply(Item Application Entry)">
            <summary>
            Unapplies the provided item application entry.
            </summary>
            <remarks>
            Entries applied to an outbound transfer and drop shipment order cannot be unapplied.
            </remarks>
            <param name="ItemApplnEntry">Item application entry to unapply.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ReApply(Item Ledger Entry,Integer)">
            <summary>
            Reapplies item ledger entries.
            </summary>
            <param name="ItemLedgEntry">Item ledger entry to reaplly.</param>
            <param name="ApplyWith">Apply to item ledger entry no.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ApplyItemLedgEntry(Item Ledger Entry@,Item Ledger Entry@,Value Entry@,Boolean)">
            <summary>
            Applies an item ledger entry to another item ledger entry.
            </summary>
            <remarks>
            Usually used in inventory management where you want to match an incoming item ledger entry (like a purchase) 
            with an outgoing item ledger entry (like a sale).
            </remarks>
            <param name="ItemLedgEntry">
            Item Ledger entry to apply. If this is a cost application, the entry is marked as applied entry to adjust.
            </param>
            <param name="OldItemLedgEntry"> Return value: Item ledger entry the to-apply entry is applied to. </param>
            <param name="ValueEntry">Return value: Value entry with updated valuation date.</param>
            <param name="CausedByTransfer">Is caused by a transfer.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InitItemLedgEntry(Item Ledger Entry@)">
            <summary>
            Initializes the item ledger entry record from the global item journal line variable.
            </summary>
            <param name="ItemLedgEntry">Return value: Initialized item ledger entry.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InsertItemLedgEntry(Item Ledger Entry@,Boolean)">
            <summary>
            Creates an item ledger entry record with information from the global journal line.
            </summary>
            <remarks>
            If there is insufficient quantity of the item on the inventory, an error is raised.
            Inserts or update an item register record.
            </remarks>
            <param name="ItemLedgEntry">Return value: Created item ledger entry.</param>
            <param name="TransferItem">If true, new dimension information will be set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InsertPhysInventoryEntry(Item Journal Line@)">
            <summary>
            Inserts a physical inventory ledger entry based on a given item journal line.
            </summary>
            <param name="ItemJournalLine">Item journal line to insert from.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.PostInventoryToGL(Value Entry@)">
            <summary>
            Posts inventory transactions to the general ledger based on the provided value entry.
            </summary>
            <param name="ValueEntry">Value entry to post from.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InsertApplEntry(Integer,Integer,Integer,Integer,Date,Decimal,Boolean)">
            <summary>
            Creates an item application entry.
            </summary>
            <remarks>
            If the item is non-inventoriable, procedure is not executed.
            </remarks>
            <param name="ItemLedgEntryNo">Item ledger entry no.</param>
            <param name="InboundItemEntry">Inbound item ledger entry no.</param>
            <param name="OutboundItemEntry">Outbound item ledger entry no.</param>
            <param name="TransferedFromEntryNo">Transferred-from entry no.</param>
            <param name="PostingDate">Item ledger entry posting date.</param>
            <param name="Quantity">Item ledger entry quantity.</param>
            <param name="CostToApply">If true, then cost application will be set to true.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InsertValueEntry(Value Entry@,Item Ledger Entry@,Boolean)">
            <summary>
            Inserts the value entry for an item ledger entry and posts it to the general ledger.
            </summary>
            <remarks>
            Updates item ledger entry based on a value entry.
            Posts value entry information to the general ledger.
            Inserts or updates item register record based on a value entry.
            </remarks>
            <param name="ValueEntry">Return value: Inserted value entry record.</param>
            <param name="ItemLedgEntry">Return value: Item ledger entry to insert value entry for.</param>
            <param name="TransferItem">
            If true, global dimension codes and dimension set ID will be changed to new shorcut dimension values 
            instead of shortcut dimension values. A new shortcut dimension on an item journal line refers to adding a 
            new dimension specifically for item-related entries, providing additional flexibility and analysis capabilities 
            within the context of item transactions.
            </param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InitTransValueEntry(Value Entry@,Item Ledger Entry)">
            <summary>
            Initializes a value entry record for a transfer item ledger entry.
            Calculates the cost amounts and adjusted cost based on whether the average transfer is being used.
            </summary>
            <param name="ValueEntry">Return value: Initialized value entry.</param>
            <param name="ItemLedgEntry">Item ledger entry to initialize value entry from.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.AutoTrack(Item Ledger Entry@,Boolean)">
            <summary>
            Updates reservation entries for the item ledger entry based on item order tracking requirements.
            </summary>
            <remarks>
            If IsReserved parameter is false, and item doesn't have a tracking policy, reservations are not updated.
            </remarks>
            <param name="ItemLedgEntryRec">Item ledger entry to update reservation entries for.</param>
            <param name="IsReserved">Indicates if the item ledger entry is reserved. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetPostponeReservationHandling(Boolean)">
            <summary>
            Sets the value of the global flag PostponeReservationHandling.
            </summary>
            <remarks>
            Used to skip reservation handling functionality.
            </remarks>
            <param name="Postpone">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.CollectTrackingSpecification(Tracking Specification@):Boolean">
            <summary>
            Copies all tracking specification lines from the global variable to the parameter, overriding all existing lines. 
            After the transfer, all lines are deleted from the global record set.
            </summary>
            <remakrs>
            Global and the provided target tracking specification record set is deleted.
            </remakrs>
            <param name="TargetTrackingSpecification">Return value: Copied tracking specification lines.</param>
            <returns>True if any tracking specifications were transferred, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.CollectValueEntryRelation(Value Entry Relation@,Text[250]):Boolean">
            <summary>
            Copies all value entry relation lines from the global variable to the parameter, overriding all existing lines. 
            After the transfer, all lines are deleted from the global record set.
            </summary>
            <remakrs>
            Global value entry relation record set is deleted after the transfer.
            </remakrs>
            <param name="TargetValueEntryRelation">Return value: Copied value entry relations lines.</param>
            <param name="RowId">Unique identifier text of a line that will be used in source rowId field.</param>
            <returns>True if any value entry relations were transferred, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.CollectItemEntryRelation(Item Entry Relation@):Boolean">
            <summary>
            Copies all item entry relation lines from the global variable to the parameter, overriding all existing lines. 
            After the transfer, all lines are deleted from the global record set.
            </summary>
            <remakrs>
            Global item entry relation record set is deleted after the transfer.
            </remakrs>
            <param name="TargetItemEntryRelation">Return value: Copied item entry relation lines.</param>
            <returns>True if any item entry relation lines were transferred, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.UndoValuePostingWithJob(Integer,Integer)">
            <summary>
            Undoes the value entry posting of an item ledger entry with a job number.
            </summary>
            <param name="OldItemLedgEntryNo">Inbound item ledger entry number.</param>
            <param name="NewItemLedgEntryNo">Outbound item ledger entry number.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.CheckItemTracking">
            <summary>
            Checks the tracking information of an item journal. If serial, lot or package numbers are required but are missing, an error is thrown.
            </summary>
            <remarks>
            If the journal line is a transfer, it also checks for new serial, lot and package numbers to be assigned during the posting.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetCalledFromInvtPutawayPick(Boolean)">
            <summary>
            Sets the value of the global flag CalledFromInvtPutawayPick.
            </summary>
            <param name="NewCalledFromInvtPutawayPick">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetCalledFromAdjustment(Boolean,Boolean)">
            <summary>
            Sets the values of the global flags CalledFromAdjustment and PostToGL.
            </summary>
            <param name="NewCalledFromAdjustment">The new value to set.</param>
            <param name="NewPostToGL">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.NextOperationExist(Prod# Order Routing Line@):Boolean">
            <summary>
            Determines if the next operation number exists on the provided production order routing line.
            </summary>
            <param name="ProdOrderRtngLine">Production order routing line to check.</param>
            <returns>True if next operation number exists, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.AllowAdjmtOnPosting(Date):Boolean">
            <summary>
            Determines if an adjustment is allowed on a given posting date based on the automatic cost adjustment setting 
            in the inventory setup.
            </summary>
            <param name="TheDate">The date to check.</param>
            <returns>True if adjustment is allowed, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.RedoApplications">
            <summary>
            Reapplies all touched item ledger entries with remaining quantity, and deletes them afterwards.
            </summary>
            <remarks>
            Touched item ledger entries are entries that have been marked or identified in some way during the posting process.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.CostAdjust">
            <summary>
            Performs an inventory cost adjustment based on the automatic cost adjustment setting in the inventory setup.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.TouchEntry(Integer)">
            <summary>
            Marks an item ledger entry as touched by inserting it into a global buffer.
            </summary>
            <param name="EntryNo">Item ledger entry to mark.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.AnyTouchedEntries:Boolean">
            <summary>
            Determines if there are any temporary touched item ledger entries on the global record set.
            </summary>
            <returns>True if touched entires exists, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetValuationDateAllValueEntrie(Integer,Date,Boolean)">
            <summary>
            Sets the valuation date of all value entry records associated with a given item ledger entry no. to a given date.
            </summary>
            <remarks>
            The date is modified if the valuation date is not equal to the posting date, or if it's less than the given date, 
            or if it's greater than the given date and the application is fixed.
            </remarks>
            <param name="ItemLedgerEntryNo">Item ledger entry no. to find value entries for.</param>
            <param name="ValuationDate">Valuation date to set.</param>
            <param name="FixedApplication">Indicates if it's a fixed application.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetServUndoConsumption(Boolean)">
            <summary>
            Sets the value of the global flag IsServUndoConsumption.
            </summary>
            <param name="Value">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetProdOrderCompModified(Boolean)">
            <summary>
            Sets the value of the global flag ProdOrderCompModified.
            </summary>
            <param name="ProdOrderCompIsModified">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.InsertCountryCode(Item Ledger Entry@,Item Ledger Entry)">
            <summary>
            Updates the country/region on the new item ledger entry based on the new or existing item ledger entry's location.
            </summary>
            <param name="NewItemLedgEntry">Return value: New item ledger entry with updated coutnry/region code.</param>
            <param name="ItemLedgEntry">Existing item ledger entry.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetupTempSplitItemJnlLine(Item Journal Line,Integer,Decimal@,Decimal@,Decimal@,Decimal@,Boolean):Boolean">
            <summary>
            Splits a journal line based on the current global tracking specification line and stores it into a global buffer.
            </summary>
            <param name="ItemJnlLine2">Item journal line to split.</param>
            <param name="SignFactor">Sign factor to multiply all amounts with.</param>
            <param name="NonDistrQuantity">Total quantity used for determining the splitting factor.</param>
            <param name="NonDistrAmount">Total amount to split and set.</param>
            <param name="NonDistrAmountACY">Total Amount (ACY) to split and set.</param>
            <param name="NonDistrDiscountAmount">Discount amount to split and set.</param>
            <param name="Invoice">Indicates if journal line was already invoiced.</param>
            <returns>True if created split item journal line needs to be posted, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.PrepareItem(Item Journal Line@)">
            <summary>
            Prepares provided item journal line for posting and copies it to the global ItemJnlLine record.
            </summary>
            <remarks>
            If General Ledger Setup has additional reporting currency record, that record is retrieved 
            and mandatory fields are checked. Checks if an item and its variant are blocked and retrieve their records 
            if they are not.
            </remarks>
            <param name="ItemJnlLineToPost">Item journal line to prepare.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetSkipApplicationCheck(Boolean)">
            <summary>
            Sets the value of the global flag SkipApplicationCheck.
            </summary>
            <remarks>
            If true, then application check is not executed when an item ledger entry is applied to another item ledger entry.
            </remarks>
            <param name="NewValue">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.LogApply(Item Ledger Entry,Item Ledger Entry)">
            <summary>
            Logs the application of an item ledger entry by creating a new item application entry record and 
            adding it to the global temporary item application entry history record set.
            </summary>
            <param name="ApplyItemLedgEntry">Inbound item ledger entry record.</param>
            <param name="AppliedItemLedgEntry">Applied item ledger entry record.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.LogUnapply(Item Application Entry)">
            <summary>
            Logs un-application of an item ledger entry to the global temporary item application entry history record set 
            with cost application set to false.
            </summary>
            <param name="ItemApplnEntry">Item application entry to log.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ClearApplicationLog">
            <summary>
            Clears the global item application entry history temporary record set.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.UndoApplications">
            <summary>
            Undoes the applications of item ledger entries based on the records in the global 
            item application entry history temporary record set.
            </summary>
            <remarks>
            Used during undo manual changes action on application worksheet page.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.ApplicationLogIsEmpty:Boolean">
            <summary>
            Returns whether the global item application entry history record set is empty.
            </summary>
            <returns>True if item application entry history record set is empty, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.GetCalledFromAdjustment:Boolean">
            <summary>
            Returns the value of the global flag CalledFromAdjustment.
            </summary>
            <returns>The value of the global flag CalledFromAdjustment.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetCalledFromApplicationWorksheet(Boolean)">
            <summary>
            Sets the value of the global flag CalledFromApplicationWorksheet.
            </summary>
            <remarks>
            If false, then touched entries are not tracked.
            </remarks>
            <param name="IsCalledFromApplicationWorksheet">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.RestoreTouchedEntries(Item@)">
            <summary>
            Marks the entries that were previously modified by the current user as touched. Items of these entries are added to TempItem.
            </summary>
            <remarks>
            Used when opening the application worksheet.
            </remarks>
            <param name="TempItem">Return value: A collection of items of touched entries.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.SetSkipSerialNoQtyValidation(Boolean)">
            <summary>
            Sets the value of the global flag SkipSerialNoQtyValidation.
            </summary>
            <remarks>
            If true and item tracking code has serial number specific tracking enabled, it skips the checks.
            Enabled serial number specific tracking ensures that items are accurately traced with specific serial or lot numbers 
            both backward and forward in the supply chain, which is crucial for quality assurance and product recalls.
            </remarks>
            <param name="NewSkipSerialNoQtyValidation">The new value to set.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Inventory#Posting#Item Jnl#-Post Line.MarkAppliedInboundItemEntriesForAdjustment(Integer)">
            <summary>
            Marks the inbound item ledger entries that are applied to a specific outbound item ledger entry for adjustment.
            </summary>
            <param name="OutboundItemLedgerEntryNo">Outbound item ledger entry no.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetUpNewLine(Requisition Line)">
            <summary>
            Populates values of 'Order Date', 'Recurring Method' and 'Price Calculation Method' fields for a new requisition line.
            </summary>
            <param name="LastReqLine">Source requisition line record. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetDueDate">
            <summary>
            Sets the value of field 'Due Date' for the current requisition line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetCurrFieldNo(Integer)">
            <summary>
            Sets the global variable 'CurrentFieldNo'.
            </summary>
            <param name="NewCurrFieldNo">Specified field number. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetProdOrderLine(Prod# Order Line)">
            <summary>
            Prepares and transfers relevant field values from provided production order line to the current requisition line.
            </summary>
            <param name="ProdOrderLine">Source production order line record. </param>
            <remarks>In case no production order is found for the provided 'ProdOrderLine', error will be invoked. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetPurchOrderLine(Purchase Line)">
            <summary>
            Prepares and transfers relevant field values from provided purchase line to the current requisition line.
            </summary>
            <param name="PurchOrderLine">Source purchase line record. </param>
            <remarks>In case no purchase header is found for the provided 'PurchOrderLine', error will be invoked. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetTransLine(Transfer Line)">
            <summary>
            Prepares and transfers relevant field values from provided transfer line to the current requisition line.
            </summary>
            <param name="TransLine">Source transfer line record. </param>
            <remarks>In case no transfer header is found for the provided 'TransLine', error will be invoked. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetAsmHeader(Assembly Header)">
            <summary>
            Prepares and transfers relevant field values from provided assembly header to the current requisition line.
            </summary>
            <param name="AsmHeader">Source assembly header record. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetActionMessages">
            <summary>
            Runs the report 'Get Action Messages' in reference to the current requisition line. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetRemainingQty(Decimal@,Decimal@)">
            <summary>
            Calculates values of fields 'Remaining Quantity' and 'Remaining Quantity (Base)' for the current requisition line.
            </summary>
            <param name="RemainingQty">Parameter to hold the value of field 'Remaining Quantity'. </param>
            <param name="RemainingQtyBase">Parameter to hold the value of field 'Remaining Quantity (Base)'. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetReservationQty(Decimal@,Decimal@,Decimal@,Decimal@):Decimal">
            <summary>
            Calculates reserve quantity information for the current requisition line.
            </summary>
            <param name="QtyReserved">Parameter to hold the value of field 'Reserved Quantity'. </param>
            <param name="QtyReservedBase">Parameter to hold the value of field 'Reserved Qty. (Base)'. </param>
            <param name="QtyToReserve">Parameter to hold the quantity to reserve. </param>
            <param name="QtyToReserveBase">Parameter to hold the quantity to reserve base value. </param>
            <returns>Returns quantity per unit of measure information for the current record. </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetSourceCaption:Text">
            <summary>
            Combines values of 'Worksheet Template Name', 'Journal Batch Name' and 'No.' fields of the current requisition line. 
            </summary>
            <returns>Returns source requisiton line information. </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetReservationEntry(Reservation Entry@)">
            <summary>
            Copies values from the current record to specified reservation entry record.
            </summary>
            <param name="ReservEntry">Specified reservation entry. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetReservationFilters(Reservation Entry@)">
            <summary>
            Sets filters from the current requisition line to specified reservation entry record.
            </summary>
            <param name="ReservEntry">Specified reservation entry. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.ReservEntryExist:Boolean">
            <summary>
            Checks whether reservation entries related to the current requisition line exist. 
            </summary>
            <returns>Returns 'true' if reservation entry is found, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetRefOrderFilters(Enum::Microsoft#Inventory#Requisition#Requisition Ref# Order Type,Option,Code[20],Integer)">
            <summary>
            Sets filters from provided reference document line to the current requisition line.
            </summary>
            <param name="RefOrderType">Provided reference order type. </param>
            <param name="RefOrderStatus">Provided reference order status. </param>
            <param name="RefOrderNo">Provided reference order number. </param>
            <param name="RefLineNo">Provided reference order line number. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.TransferFromProdOrderLine(Prod# Order Line@)">
            <summary>
            Populates fields of the current requisition line based on reservation entry related to the provided action message entry. 
            </summary>
            <param name="ActionMessageEntry">Provided action message entry record. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetDirectCost(Integer)">
            <summary>
            Gets item unit cost of the current requisition line. 
            </summary>
            <param name="CalledByFieldNo">Indicates the number of the field which invoked the method. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.CalcEndingDate(Code[20])">
            <summary>
            Calculates value for the field 'Ending Date' based on provided 'LeadTime' formula or current requisition line. 
            </summary>
            <param name="LeadTime">Provided lead time formula. </param>
            <remarks>In case 'LeadTime' is empty, lead time code will be defined according to the reference order type. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.CalcStartingDate(Code[20])">
            <summary>
            Calculates value for the field 'Starting Date' based on provided 'LeadTime' formula for the current requisition line. 
            </summary>
            <param name="LeadTime">Provided lead time formula.</param>
            <remarks>In case 'LeadTime' is empty, lead time code will be defined according to the reference order type. 
            'Order Date' of the current requisition line will be set to newly calculated 'Starting Date'. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.TransferFromUnplannedDemand(Unplanned Demand@)">
            <summary>
            Populates corresponding values of the current requisition line in reference to the provided unplanned demand.
            </summary>
            <param name="UnplannedDemand">Source unplanned demand record.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetSupplyDates(Date)">
            <summary>
            Sets values of 'Demand Date', 'Order Date', 'Starting Date' and 'Ending Date' fields of the current record based on provided 'DemandDate'.
            </summary>
            <param name="DemandDate">Provided demand date.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.SetSupplyQty(Decimal,Decimal)">
            <summary>
            Calculates demanded and needed quantities based on provided parameters 'DemandQtyBase' and 'NeededQtyBase'.
            </summary>
            <param name="DemandQtyBase">Provided demanded quantity. </param>
            <param name="NeededQtyBase">Provided needed quantitiy. </param>
            <remarks>Validation of the field 'Quantity' will be triggered. </remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.FilterLinesWithItemToPlan(Item@)">
            <summary>
            Filters corresponding fields of the current record based on provided item record.
            </summary>
            <param name="Item">Provided item record. </param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.FindLinesWithItemToPlan(Item@):Boolean">
            <summary>
            Gets filtered requisition line based on values from provided item record. 
            </summary>
            <param name="Item">Provided item record.</param>
            <returns>Returns 'true' if filtered requisition line is found, otherwise 'false'.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.FilterLinesForReservation(Reservation Entry,Text,Boolean)">
            <summary>
            Sets filters on corresponding fields of requisition lines based on specified reservation entry, availability date filter and parameter 'Positive'.
            </summary>
            <param name="ReservationEntry">Specified reservation entry record.</param>
            <param name="AvailabilityFilter">Specified availability date filter.</param>
            <param name="Positive">In case 'true', 'Quantity (Base)' is to have value greater than zero, otherwise negative value.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.ShowDimensions">
            <summary>
            Depicts dimensions of the current requisition line. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetOriginalQtyBase:Decimal">
            <summary>
            Calcuates original base quantity from fields 'Original Quantity' and 'Qty. per Unit of Measure' of the current requisition line.
            </summary>
            <returns>Returns calculated quantity base value.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.IsDropShipment:Boolean">
            <summary>
            Checks whether the current requisition line is a drop shipment.
            </summary>
            <returns>Returns 'true' if requisition line is a drop shipment, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Requisition#Requisition Line.GetLocationCode">
            <summary>
            Sets location code for the current requisition line record.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.InitOutstandingQty">
            <summary>
            Initializes outstanding quantity and base quantity for the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.InitQtyToShip">
            <summary>
            Initializes quantity to ship fields for the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.InitQtyToReceive">
            <summary>
            Initializes quantity to receive based on in transit location for the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.InitQtyInTransit">
            <summary>
            Calculates the quantity in transit based on in transit location for the current transfer line.
            Verifies whether the transfer line is completely received by checking if the Quantity is not zero and if it is equal to the "Quantity Received".
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ResetPostedQty">
            <summary>
            Resets the posted quantities for the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.GetTransHeaderExternal">
            <summary>
            Retrieves the transfer header information and assigns it to the corresponding fields in the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.BlockDynamicTracking(Boolean)">
            <summary>
            Sets the block status for dynamic tracking of the transfer line.
            </summary>
            <param name="SetBlock">Specifies whether to block dynamic tracking.</param>
            <remarks>Global parameter 'TrackingBlocked' is used to prevent date conflict check.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ShowDimensions">
             <summary>
             Opens a page that shows the dimensions of the current transfer line.
             </summary>
            <remarks>In case transfer line is partially shipped, confirmation dialog will appear.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CreateDim(List of [Dictionary])">
            <summary>
            Generates a new dimension set id from provided default dimensions for the current transfer line.
            </summary>
            <param name="DefaultDimSource">Provided list of default dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ValidateShortcutDimCode(Integer,Code[20]@)">
             <summary>
             Triggers validation of shortcut dimension values.
             </summary>
             <param name="FieldNumber">Indicates the number of a field which is invoked by the method.</param>
             <param name="ShortcutDimCode">Specified value of the shortcut dimension.</param>
            <remarks>In case transfer line is partially shipped, confirmation dialog will appear.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.LookupShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Displays a shortcut dimension list for the user to choose from.
            </summary>
            <param name="FieldNumber">Dimension shortcut ordinal number.</param>
            <param name="ShortcutDimCode">Selected shortcut dimension code.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ShowShortcutDimCode(Code[20][]@)">
            <summary>
            Retrieves a shortcut dimension list for the current transfer line.
            </summary>
            <param name="ShortcutDimCode">Array to hold the dimension information.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.SelectMultipleItems">
            <summary>
            Runs an item list page for the user to select multiple items for transfer.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.AddItems(Text)">
            <summary>
            Adds items to the transfer line based on the specified selection filter.
            </summary>
            <param name="SelectionFilter">The filter to apply when selecting items.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.AddItem(Transfer Line@,Code[20])">
            <summary>
            Creates a new transfer line and validates item no based on provided 'ItemNo'.
            </summary>
            <param name="TransferLine">The transfer line record.</param>
            <param name="ItemNo">The item number.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.InitNewLine(Transfer Line@)">
            <summary>
            Initializes a new transfer line based on the current record.
            </summary>
            <param name="NewTransferLine">The new transfer line record.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CheckItemAvailable(Integer)">
            <summary>
            Checks if an item is available for transfer.
            </summary>
            <param name="CalledByFieldNo">The field number that triggered the check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CheckDirectTransferQtyToShip">
            <summary>
            Checks if the entire quantity on the line is shipped in case of direct Transfer.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.OpenItemTrackingLines(Enum::Microsoft#Foundation#Enums#Transfer Direction)">
            <summary>
            Opens the item tracking lines for the specified transfer direction.
            </summary>
            <param name="Direction">The transfer direction.</param>
            <remarks>Transfer direction can be either outbound or inbound.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.OpenItemTrackingLinesWithReclass(Enum::Microsoft#Foundation#Enums#Transfer Direction)">
            <summary>
            Opens the item tracking lines for the specified transfer direction.
            </summary>
            <param name="Direction">The transfer direction.</param>
            <remarks>Transfer direction can be either outbound or inbound.
            Item tracking page will be run in direct transfer mode.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.TestStatusOpen">
            <summary>
            Test whether the status of a transfer document is set to 'Open'.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.SuspendStatusCheck(Boolean)">
            <summary>
            Sets the status check suspension flag.
            </summary>
            <param name="Suspend">A boolean value indicating whether to suspend the status check.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ShowReservation">
            <summary>
            Displays the reservation for the transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.UpdateWithWarehouseShipReceive">
            <summary>
            Updates "Qty. to Ship" and "Qty. to Receive" fields of current transfer line based on location setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.RenameNo(Code[20],Code[20])">
            <summary>
            Renames the item number in the transfer line table.
            </summary>
            <param name="OldNo">The old item number.</param>
            <param name="NewNo">The new item number.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CheckWarehouse(Location,Boolean)">
            <summary>
            Checks warehouse requirements for a transfer line.
            It determines whether a dialog should be displayed to the user based on the location setup and receive flag.
            In case a dialog needs to be displayed, an appropriate message or error is presented.
            </summary>
            <param name="Location">The location record for the transfer line.</param>
            <param name="Receive">A boolean flag indicating whether the transfer line is for receiving or not.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.GetRemainingQty(Decimal@,Decimal@,Integer)">
            <summary>
            Calculates remaining quantity and remaining base quantity according to specified direction for the current transfer line.
            </summary>
            <param name="RemainingQty">The remaining quantity.</param>
            <param name="RemainingQtyBase">The remaining base quantity.</param>
            <param name="Direction">Direction of the transfer (0 for outbound, 1 for inbound).</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.GetReservationQty(Decimal@,Decimal@,Decimal@,Decimal@,Integer):Decimal">
            <summary>
            Retrieves reservation quantities for the current transfer line.
            </summary>
            <param name="QtyReserved">The quantity reserved.</param>
            <param name="QtyReservedBase">The quantity reserved in base units.</param>
            <param name="QtyToReserve">The quantity to be reserved.</param>
            <param name="QtyToReserveBase">The quantity to be reserved in base units.</param>
            <param name="Direction">Direction of the transfer (0 for outbound, 1 for inbound).</param>
            <returns>The quantity per unit of measure.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.GetSourceCaption:Text">
            <summary>
            Combines values of "Document No.", "Line No." and "Item No." fields of the current transfer line.
            </summary>
            <returns>Returns source transfer line information.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.SetReservationEntry(Reservation Entry@,Enum::Microsoft#Foundation#Enums#Transfer Direction)">
            <summary>
            Sets the reservation entry for the current transfer line based on specified direction.
            </summary>
            <param name="ReservEntry">The reservation entry record to set.</param>
            <param name="Direction">The transfer direction.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.SetReservationFilters(Reservation Entry@,Enum::Microsoft#Foundation#Enums#Transfer Direction)">
            <summary>
            Sets filters for the specified reservation entry based on the transfer direction.
            </summary>
            <param name="ReservEntry">The reservation entry record to set the filters for.</param>
            <param name="Direction">The transfer direction.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ReservEntryExist:Boolean">
            <summary>
            Checks if a reservation entry exists for the transfer line.
            </summary>
            <returns>
            Returns true in case reservation entry exists, otherwise false.
            </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.IsInbound:Boolean">
            <summary>
            Checks if the current transfer line is inbound.
            </summary>
            <returns>
            Returns true if the quantity (base) is less than 0, indicating an inbound transfer line.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.FilterLinesWithItemToPlan(Item@,Boolean,Boolean)">
            <summary>
            Filters the lines with the provided item for planning.
            </summary>
            <param name="Item">Provided item record.</param>
            <param name="IsReceipt">Specifies whether transfer line is a receipt or not.</param>
            <param name="IsSupplyForPlanning">Specifies whether it is supply for planning or not.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.FindLinesWithItemToPlan(Item@,Boolean,Boolean):Boolean">
            <summary>
            Finds the lines with the provided item to plan.
            </summary>
            <param name="Item">Provided item record.</param>
            <param name="IsReceipt">Specifies whether the transfer line is a receipt.</param>
            <param name="IsSupplyForPlanning">Specifies whether the item is supply for planning.</param>
            <returns>True in case the lines with the item to plan are found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.LinesWithItemToPlanExist(Item@,Boolean):Boolean">
            <summary>
            Checks if there are any lines with the provided item that need to be planned.
            </summary>
            <param name="Item">Provided item record.</param>
            <param name="IsReceipt">Specifies whether the transfer line is a receipt or not.</param>
            <returns>True if there are lines with the item that need to be planned, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.FilterInboundLinesForReservation(Reservation Entry,Text,Boolean)">
            <summary>
            Filters the inbound transfer lines based on provided reservation entry and availability date filter.
            </summary>
            <param name="ReservationEntry">Provided reservation entry record.</param>
            <param name="AvailabilityFilter">The availability date filter.</param>
            <param name="Positive">A boolean value indicating whether to filter for positive or negative outstanding quantities.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.FilterOutboundLinesForReservation(Reservation Entry,Text,Boolean)">
            <summary>
            Filters the outbound transfer lines based on provided reservation entry and availability date filter.
            </summary>
            <param name="ReservationEntry">Provided reservation entry record.</param>
            <param name="AvailabilityFilter">The availability date filter.</param>
            <param name="Positive">A boolean value indicating whether to filter for positive or negative outstanding quantities.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.VerifyItemLineDim">
            <summary>
            Verifies if the item line dimensions have been changed and confirms the change if necessary.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ReserveFromInventory(Transfer Line@)">
            <summary>
            Automatically creates reservations for the item quantity of provided transfer lines.
            </summary>
            <param name="TransLine">Provided transfer line records.</param>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.IsShippedDimChanged:Boolean">
            <summary>
            Determines if the dimensions of already shipped transfer line have been changed.
            </summary>
            <returns>True if the dimensions are changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ConfirmShippedDimChange:Boolean">
            <summary>
            Confirms the change of dimensions for an already shipped transfer line.
            </summary>
            <returns>Returns true if the change is confirmed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.GetTransferHeader:Transfer Header">
            <summary>
            Retrieves the transfer header record based on document number of the current transfer line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.DateConflictCheck">
            <summary>
            Checks for date conflicts in the transfer line in case global parameter 'TrackingBlocked' is set to false.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.RowID1(Enum::Microsoft#Foundation#Enums#Transfer Direction):Text[250]">
            <summary>
            Returns the Row ID for the specified transfer direction.
            </summary>
            <param name="Direction">Provided transfer direction.</param>
            <returns>The Row ID as a text value.</returns>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CreateDimFromDefaultDim">
            <summary>
            Creates a dimension based on default dimension source.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.CheckIfTransferLineMeetsReservedFromStockSetting(Decimal,Enum::Microsoft#Inventory#Tracking#Reservation From Stock):Boolean">
            <summary>
            Checks if qunatity on the current transfer line meets the reserved from stock setting.
            </summary>
            <param name="QtyToPost">The quantity to post from current transfer line.</param>
            <param name="ReservedFromStock">The reservation from stock option.</param>
            <returns>True if the transfer line meets the reserved from stock setting, otherwise false.</returns>
            <remarks>Reserve from stock options are: None, Partial, Full and Partial, Full.</remarks>
        </member>
        <member name="M:Table::Microsoft#Inventory#Transfer#Transfer Line.ShowReservationEntries(Boolean,Enum::Microsoft#Foundation#Enums#Transfer Direction)">
            <summary>
            Displays reservation entries for the current transfer line.
            </summary>
            <param name="Modal">Specifies whether the page reservation entries should be run in a modal mode or not.</param>
            <param name="Direction">Specifies the direction of the transfer.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.SetInvtMovement(Boolean)">
            <summary>
            Sets the global option for inventory movement status.
            </summary>
            <param name="InvtMovement">Indicates whether the operation involves inventory movement.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.UndefinedItemTracking(Decimal@):Boolean">
            <summary>
            Determines and updates quantity to track.
            </summary>
            <param name="QtyToTrackBase">Quantity to track in base unit.</param>
            <returns>Returns 'true' if there is quantity to track, otherwise 'false'.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.CreateTempHandlingSpec(Warehouse Activity Line,Decimal)">
            <summary>
            Creates a temporary handling specification for a warehouse activity line.
            </summary>
            <param name="WarehouseActivityLine">Warehouse activity line for which the specification is created.</param>
            <param name="TotalQtyToPickBase">Total quantity to pick in base unit.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.CreateInvtMvntWithoutSource(Internal Movement Header@)">
            <summary>
            Creates an inventory movement document for internal warehouse activities, based on provided inventory movement header.
            </summary>
            <param name="InternalMovementHeader">Provided internal movement header.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.CreateInvtMvntWithoutSource(Whse# Worksheet Line@)">
            <summary>
            Creates an inventory movement document for internal warehouse activities, based on provided warehouse worksheet line.
            </summary>
            <param name="InternalMovementHeader">Provided warehouse worksheet line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.SynchronizeWhseItemTracking(Tracking Specification@)">
            <summary>
            Synchronizes warehouse item tracking information with the tracking specification.
            </summary>
            <param name="TrackingSpecification">Provided tracking specification to synchronize.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.GetExpiredItemMessage:Text[100]">
            <summary>
            Retrieves the message text for expired items.
            </summary>
            <returns>Text message for expired items.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.PickStrictExpirationPosting(Code[20],Item Tracking Setup):Boolean">
            <summary>
            Determines whether strict expiration posting is required for an item based on the provided item tracking setup.
            </summary>
            <param name="ItemNo">Item number to check.</param>
            <param name="WhseItemTrackingSetup">Item tracking setup.</param>
            <returns>Returns 'true' if strict expiration posting is required, otherwise 'false'.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.MakeWarehouseActivityHeader">
            <summary>
            Creates a warehouse activity header if auto creation is enabled and no lines have been created yet.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.MakeWarehouseActivityLine(Warehouse Activity Line@,Code[20],Decimal,Decimal@)">
            <summary>
            Creates a warehouse activity line based on the provided parameters and updates remaining quantity.
            </summary>
            <param name="NewWarehouseActivityLine">Warehouse activity line to be created.</param>
            <param name="TakeBinCode">Provided bin code.</param>
            <param name="QtyToPickBase">Provided quantity to pick in base unit.</param>
            <param name="RemQtyToPickBase">Provided remaining quantity to pick in base unit.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.MakeLineWhenSNoReq(Warehouse Activity Line@,Code[20],Decimal,Decimal@,Decimal@)">
            <summary>
            Creates a warehouse activity line when serial number is required and updates remaining quantities.
            </summary>
            <param name="NewWarehouseActivityLine">Warehouse activity line to be created.</param>
            <param name="TakeBinCode">Provided bin code.</param>
            <param name="QtyToPickBase">Provided quantity to pick in base unit.</param>
            <param name="RemQtyToPickBase">Provided remaining quantity to pick in base unit.</param>
            <param name="RemQtyToPick">Provided remaining quantity to pick.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.GetSpecEquipmentCode(Code[20],Code[10],Code[10],Code[20]):Code[10]">
            <summary>
            Retrieves the special equipment code based on the provided parameters.
            </summary>
            <param name="ItemNo">Item number for which to retrieve the special equipment code.</param>
            <param name="VariantCode">Variant code.</param>
            <param name="LocationCode">Location code.</param>
            <param name="BinCode">Bin code.</param>
            <returns>Returns special equipment code.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.CreateATOPickLine(Warehouse Activity Line,Code[20],Decimal@)">
            <summary>
            Creates a warehouse activity line for assemble-to-order operation based on the provided parameters and updates remaining quantity to pick.
            </summary>
            <param name="NewWarehouseActivityLine">Provided warehouse activity line.</param>
            <param name="BinCode">Provided bin code.</param>
            <param name="RemQtyToPickBase">Provided remaining quantity to pick in base unit.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Create Inventory Pick/Movement.SetSuppressCommit(Boolean)">
            <summary>
            Sets the option to suppress committing transactions to the database.
            </summary>
            <param name="NewSuppressCommit">Boolean flag indicating whether to suppress commit.</param>
            <remarks>
            When 'SuppressCommit' is set to 'true', it indicates that transaction committed to the
            database should be suppressed. This can be useful in scenarios where batch processing or
            testing requires transactions to be rolled back rather than committed permanently.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.UpdateWhseSourceDocLine(Warehouse Activity Line)">
            <summary>
            Updates the source document line quantity information based on a provided warehouse activity line.
            </summary>
            <param name="WhseActivLineGrouped">Provided warehouse activity line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.UpdateWhseDocHeader(Warehouse Activity Line)">
            <summary>
            Updates the warehouse document status based on the provided warehouse activity line.
            </summary>
            <param name="WhseActivLine">Provided warehouse activity line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.UpdateWhseShipmentLine(Warehouse Activity Line,Code[20],Integer,Decimal,Decimal,Decimal)">
            <summary>
            Updates the warehouse shipment line based on the provided warehouse activity line, with the provided quantities.
            </summary>
            <param name="WhseActivityLineGrouped">Provided warehouse activity line.</param>
            <param name="WhseDocNo">Warehouse document number.</param>
            <param name="WhseDocLineNo">Warehouse document line number.</param>
            <param name="QtyToHandle">Quantity to handle.</param>
            <param name="QtyToHandleBase">Quantity to handle in base unit.</param>
            <param name="QtyPerUOM">Quantity per unit of measure.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.LocationGet(Code[10])">
            <summary>
            Retrieves the global location record based on the 'LocationCode' parameter. In case that the blank 'LocationCode' is passed record instance will be cleared.
            </summary>
            <param name="LocationCode">Specified location code.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.GetItemUnitOfMeasure(Code[20],Code[10])">
            <summary>
            Retrieves the item unit of measure record for the provided item number and unit of measure code.
            </summary>
            <param name="ItemNo">Item number.</param>
            <param name="UOMCode">Unit of measure code.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.CheckWhseItemTrkgLine(Warehouse Activity Line@)">
            <summary>
            Checks warehouse item trackings for the provided warehouse activity line.
            </summary>
            <param name="WhseActivLine">Warehouse activity line to check.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.SetPointer(Warehouse Activity Line,Whse# Item Tracking Line@)">
            <summary>
            Sets the warehouse item tracking source based on the provided warehouse activity line warehouse document type.
            </summary>
            <param name="WhseActivLine">Warehouse activity line.</param>
            <param name="WhseItemTrkgLine">Warehouse item tracking line to set the source for.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.SetPointerFilter(Warehouse Activity Line,Whse# Item Tracking Line@)">
            <summary>
            Sets filters on the warehouse item tracking line based on the provided warehouse activity line.
            </summary>
            <param name="WhseActivLine">Warehouse activity line source information.</param>
            <param name="WhseItemTrkgLine">Warehouse item tracking line to filter.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.ShowHideDialog(Boolean)">
            <summary>
            Shows or hides a dialog based on the provided value.
            </summary>
            <param name="HideDialog2">Indicates whether  the dialog should be show hidden 'true' or shown 'false'</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.CalcTotalAvailQtyToPick(Warehouse Activity Line,Item Tracking Setup):Decimal">
            <summary>
            Calculates the total available quantity to pick based on the provided warehouse activity line and item tracking setup.
            </summary>
            <param name="WhseActivLine">Warehouse activity line.</param>
            <param name="WhseItemTrackingSetup">Item tracking setup.</param>
            <returns>Returns total available quantity to pick in base units.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.GetItem(Code[20])">
            <summary>
            Retrieves the global Item record based on the 'ItemNo' parameter.
            </summary>
            <param name="ItemNo">Specified itme number.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Warehouse#Activity#Whse#-Activity-Register.SetSuppressCommit(Boolean)">
            <summary>
            Sets the option to suppress committing transactions to the database.
            </summary>
            <param name="NewSuppressCommit">Boolean flag indicating whether to suppress commit.</param>
            <remarks>
            When 'SuppressCommit' is set to true, it indicates that transaction committed to the
            database should be suppressed. This can be useful in scenarios where batch processing or
            testing requires transactions to be rolled back rather than committed permanently.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#Consolidation#Consolidation Currency.ConfigureBusinessUnitCurrencies(Business Unit@)">
            <summary>
            Launches a configuration modal for the currency exchange rates used in the next consolidation for a BusinessUnit.
            Changes in this modal will be changed in the provided BusinessUnit, but no changes will be saved to the database.
            </summary>
            <param name="BusinessUnit">Business Unit to configure</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#Consolidation#Consolidation Currency.ConfigureBusinessUnitCurrencies(Business Unit@,Consolidation Process)">
            <summary>
            Launches a configuration modal for the currency exchange rates used in the ConsolidationProcess specified for a BusinessUnit.
            Changes in this modal will be changed in the provided BusinessUnit, but no changes will be saved to the database.
            </summary>
            <param name="BusinessUnit"></param>
            <param name="ConsolidationProcess"></param>
        </member>
        <member name="M:Interface::Microsoft#Finance#Consolidation#Import Consolidation Data.ImportConsolidationDataForBusinessUnit(Consolidation Process,Business Unit,Bus# Unit Consolidation Data@)">
            <summary>
            Import the business unit consolidation data for the given consolidation process and business unit. The imported data should be stored in the BusUnitConsolidationData temporary record.
            </summary>
            <param name="ConsolidationProcess"></param>
            <param name="BusinessUnit"></param>
            <param name="BusUnitConsolidationData"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#Dimension#DimensionManagement.SetDimensionValue(Integer,Code[20],Code[20],Boolean,Boolean):Integer">
            <summary>
            Adds or updates the dimension value for the specified dimension set.
            </summary>
            <param name="DimSetID">Specifies the dimension set that is going to be updated.</param>
            <param name="DimensionCode">Specifies the code of the dimension that is going to be updated.</param>
            <param name="DimensionValueCode">Specifies the code of the dimension value that is going to set in the dimension set.</param>
            <param name="AutoCreateMissingDimension">Specifies whether the dimension will be created if it doesn't exist.</param>
            <param name="AutoCreateMissingDimensionValue">Specifies whether the dimension value will be created if it doesn't exist.</param>
            <returns>Returns the new dimension set ID.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#Dimension#DimensionManagement.SetDimensionValue(Integer,Code[20],Code[20],Text[30],Text[30]):Integer">
            <summary>
            Adds or updates the dimension value for the specified dimension set. Any dimension or dimension value that doesn't exist will be created automatically.
            </summary>
            <param name="DimSetID">Specifies the dimension set that is going to be updated.</param>
            <param name="DimensionCode">Specifies the code of the dimension that is going to be updated.</param>
            <param name="DimensionValueCode">Specifies the code of the dimension value that is going to set in the dimension set.</param>
            <param name="DimensionName">Specifies the name of the dimension, if the the dimension doesn't exist yet.</param>
            <param name="DimensionValueName">Specifies the name of the dimension value, if the dimension value doesn't exist yet.</param>
            <returns>Returns the new dimension set ID.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#Dimension#DimensionManagement.SetDimensionValue(Integer,Code[20],Text[30],Code[20],Text[30],Boolean,Boolean):Integer">
            <summary>
            Adds or updates the dimension value for the specified dimension set.
            </summary>
            <param name="DimSetID">Specifies the dimension set that is going to be updated.</param>
            <param name="DimensionCode">Specifies the code of the dimension that is going to be updated.</param>
            <param name="DimensionValueCode">Specifies the code of the dimension value that is going to set in the dimension set.</param>
            <param name="DimensionName">Specifies the name of the dimension, if the the dimension doesn't exist yet.</param>
            <param name="DimensionValueName">Specifies the name of the dimension value, if the the dimension value doesn't exist yet.</param>
            <param name="AutoCreateMissingDimension">Specifies whether the dimension will be create if it doesn't exist.</param>
            <param name="AutoCreateMissingDimensionValue">Specifies whether the dimension value will be create if doesn't exist.</param>
            <returns>Returns the new dimension set ID.</returns>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.Check(Integer)">
            <summary>
            Check if implementation codeunit designed for source document type posting
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.ClearBuffers">
            <summary>
            Clear temporary posting buffers in invoice posting codeunit
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.CheckCreditLine(Variant,Variant)">
            <summary>
            Check credit limit for document customer
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.SetHideProgressWindow(Boolean)">
            <summary>
            Set HideProgressWindow variable inside the invoice posting codeunit
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.SetParameters(Invoice Posting Parameters)">
            <summary>
            Set posting related parameters using temporary table
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.SetPreviewMode(Boolean)">
            <summary>
            Set PreviewMode variable inside the invoice posting codeunit
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.SetSuppressCommit(Boolean)">
            <summary>
            Set SupressCommit variable inside the invoice posting codeunit
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.SetTotalLines(Variant,Variant)">
            <summary>
            Set SupressCommit variable inside the invoice posting codeunit
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.PrepareLine(Variant,Variant,Variant)">
            <summary>
            Prepare invoice posting buffer line from source document line
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.PrepareJobLine(Variant,Variant,Variant)">
            <summary>
            Prepare invoice posting buffer line from source document job line
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.PostLedgerEntry(Variant,Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line@)">
            <summary>
            Process customer or vendor ledger entry.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.PostBalancingEntry(Variant,Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line@)">
            <summary>
            Process customer or vendor ledger entry.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.PostLines(Variant,Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line@,Dialog@,Decimal@)">
            <summary>
            Process invoice posting buffer and post ledger entries for each record.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.CalcDeferralAmounts(Variant,Variant,Decimal)">
            <summary>
            Calculate deferral amounts for invoice posting buffer
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Invoice Posting.CreatePostedDeferralSchedule(Variant,Integer,Code[20],Integer,Date)">
            <summary>
            Create deferral schedule for posted documents
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#ReceivablesPayables#Posting Group Change Method.ChangePostingGroup(Code[20],Code[20],Variant)">
            <summary>
            The method fills the Price Asset parameter with "Asset No." and other data from the asset defined in the implementation codeunit. 
            </summary>
            <param name="PriceAsset">the record gets filled with data</param>
        </member>
        <member name="M:Report::Microsoft#Finance#VAT#Reporting#Calc# and Post VAT Settlement.InitializeRequest(Date,Date,Date,Code[20],Code[20],Boolean,Boolean)">
            <summary>
            InitializeRequest with "VAT Date" default to "Posting Date"
            </summary>
        </member>
        <member name="M:Report::Microsoft#Finance#VAT#Reporting#Calc# and Post VAT Settlement.InitializeRequest(Date,Date,Date,Date,Code[20],Code[20],Boolean,Boolean)">
            <summary>
            InitializeRequest with specified "VAT Date"
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT">
            <summary>
            Provides an interface of the Non-Deductible VAT functionality.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.IsNonDeductibleVATEnabled:Boolean">
            <summary>
            Returns true if the Non-Deductible VAT functionality is enabled
            </summary>
            <returns>if the feature is fully enabled</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ShowNonDeductibleVATInLines:Boolean">
            <summary>
            Returns true if Non-Deductible VAT fields must be shown in document lines
            </summary>
            <returns>If Non-Deductible VAT fields are visible in documents</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATAmount(Purchase Line):Decimal">
            <summary>
            Returns the non-deductible VAT amount of the current purchase line
            </summary>
            <param name="PurchLine">The current purchase line</param>
            <returns>The non-deductible VAT amount</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATPct(Code[20],Code[20],Enum::Microsoft#Foundation#Enums#General Posting Type)">
            <summary>
            Returns the non-deductible VAT percent for the combination of a VAT Business group, VAT Product group and a certain posting type
            </summary>
            <param name="VATBusPostGroupCode">The VAT business posting group code</param>
            <param name="VATProdPostGroupCode">The VAT product posting group code</param>
            <param name="GeneralPostingType">The sales or purchase</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATPct(VAT Posting Setup):Decimal">
            <summary>
            Returns the non-deductible VAT percent of the current VAT posting setup
            </summary>
            <param name="VATPostingSetup">The current VAT posting setup</param>
            <returns>The non-deductible VAT percent</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATAmount(Gen# Journal Line):Decimal">
            <summary>
            Returns the non-deductible VAT amount of the current general journal line
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
            <returns>The non-deductible VAT amount</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATPct(Code[20],Code[20],Enum::Microsoft#Finance#Deferral#Deferral Document Type):Decimal">
            <summary>
            Returns the non-deductible VAT percent for deferrals
            </summary>
            <param name="VATBusPostGroupCode">VAT business posting group code</param>
            <param name="VATProdPostGroupCode">VAT product posting group code</param>
            <param name="DeferralDocType">Deferral document type</param>
            <returns>The non-deductible VAT percent</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATAccForDeferrals(Enum::Microsoft#Finance#Deferral#Deferral Document Type,Code[20],VAT Posting Setup):Code[20]">
            <summary>
            Returns the Non-Deductible VAT account for deferrals
            </summary>
            <param name="DeferralDocType">Deferral document type</param>
            <param name="PostingGLAccountNo">Default posting G/L account number</param>
            <param name="VATPostingSetup">VAT Posting Setup</param>
            <returns>The G/L account number</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATAmountForItemCost(Purchase Line):Decimal">
            <summary>
            Get the Non-Deductible VAT amount to add to the item cost
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <returns>The Non-Deductible VAT Amount</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleAmount(Decimal,Decimal,Decimal,Decimal@):Decimal">
            <summary>
            Get Non-Deductible VAT amount
            </summary>
            <param name="Amount">The base amount</param>
            <param name="NonDeductiblePercent">The Non-Deductible VAT percent</param>
            <param name="AmountRoundingPrecision">Amount rounding precision to apply after multiplication</param>
            <param name="Rounding">The remainining rounding difference after multiplication</param>
            <returns>The Non-Deductible VAT Amount</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDeductibleVATBaseBothCurrencies(Decimal@,Decimal@,VAT Entry)">
            <summary>
            Returns the non-deductible VAT base from the VAT entry in both LCY and ACY
            </summary>
            <param name="NonDedVATBase">The Non-Deductible VAT base</param>
            <param name="NonDedVATBaseACY">The Non-Deductible VAT base in additional currency</param>
            <param name="VATEntry">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDeductiblePct(Purchase Line@)">
            <summary>
            Sets the non-deductible VAT percent in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDedVATAmountInPurchLine(Purchase Line@,Decimal)">
            <summary>
            Set the Non-Deductible VAT amount in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="NonDeductibleVATAmount">The Non-Deductible VAT amount to set</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDedVATAmountDiffInPurchLine(Purchase Line@,VAT Amount Line@,Decimal@,VAT Amount Line,Currency,Decimal,Decimal)">
            <summary>
            Set the Non-Deductible VAT difference of the VAT amount line to the purchase line with factor multiplication
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="VATAmountLineRemainder">Remainder from rounding to add to the next line</param>
            <param name="VATDifference">The Non-Deductible VAT difference to set</param>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="Currency">The currency code of the document</param>
            <param name="Part">The numerator for the factor calculation</param>
            <param name="Total">The denominator for factor calculation</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDeductibleVATAmount(VAT Entry@,Decimal,Decimal)">
            <summary>
            Set Non-Deductible VAT base in the VAT Entry
            </summary>
            <param name="VATEntry">The current VAT Entry to be updated</param>
            <param name="NonDedVATAmount">Non-Deductible VAT amount</param>
            <param name="NonDedVATAmountACY">Non-Deductible VAT amount in additional currency</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDeductibleVATBase(VAT Entry@,Decimal,Decimal)">
            <summary>
            Set Non-Deductible VAT amount in the VAT Entry
            </summary>
            <param name="VATEntry">The current VAT Entry to be updated</param>
            <param name="NonDedVATBase">Non-Deductible VAT base</param>
            <param name="NonDedVATBaseACY">Non-Deductible VAT base in additional currency</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDeductibleVAT(Invoice Posting Buffer@,Decimal,Decimal,Decimal,Decimal,Decimal)">
            <summary>
            Set Non-Deductible VAT amounts in the invoice posting buffer
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer to be updated</param>
            <param name="TotalNonDedVATBase">Total Non-Deductible VAT base</param>
            <param name="TotalNonDedVATAmount">Total Non-Deductible VAT amount</param>
            <param name="TotalNonDedVATBaseACY">Total Non-Deductible VAT base in additional currency</param>
            <param name="TotalNonDedVATAmountACY">Total Non-Deductible VAT amount in additional currency</param>
            <param name="TotalNonDedVATDiff">Total Non-Deductible VAT difference</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDeductibleVAT(Invoice Post# Buffer@,Decimal,Decimal,Decimal,Decimal,Decimal)">
            <summary>
            Set Non-Deductible VAT amounts in the invoice post buffer
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer to be updated</param>
            <param name="TotalNonDedVATBase">Total Non-Deductible VAT base</param>
            <param name="TotalNonDedVATAmount">Total Non-Deductible VAT amount</param>
            <param name="TotalNonDedVATBaseACY">Total Non-Deductible VAT base in additional currency</param>
            <param name="TotalNonDedVATAmountACY">Total Non-Deductible VAT amount in additional currency</param>
            <param name="TotalNonDedVATDiff">Total Non-Deductible VAT difference</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.SetNonDedVATInVATEntry(VAT Entry@,Decimal,Decimal,Decimal,Decimal,Decimal,Decimal)">
            <summary>
            Set Non-Deductible VAT amounts in the VAT entry
            </summary>
            <param name="VATEntry">The current VAT Entry to be updated</param>
            <param name="NonDedBase">The Non-Deductible VAT base</param>
            <param name="NonDedVATAmount">The Non-Deductible VAT amount</param>
            <param name="SrcCurrNonDedBaseAmount">The Non-Deductible VAT base in additional currency</param>
            <param name="SrcCurrNonDedVATAmount">The Non-Deductible VAT amount in additional currency</param>
            <param name="NonDedVATDiff">The Non-Deductible VAT difference</param>
            <param name="NonDedVATDiffACY">The Non-Deductible VAT difference in additional currency</param>  
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Init(Decimal@,Decimal@,Decimal@,Decimal@,Decimal@,Purchase Line,Purchase Line)">
            <summary>
            Initialize the Non-Deductible VAT amount from purchase line
            </summary>
            <param name="NonDedVATBase">Non-Deductible VAT Base</param>
            <param name="NonDedVATAmount">Non-Deductible VAT Amount</param>
            <param name="NonDedVATBaseACY">Non-Deductible VAT Base in additional currency</param>
            <param name="NonDedVATAmountACY">Non-Deductible VAT Amount in additional currency</param>
            <param name="NonDedVATDiff">Non-Deductible VAT Difference</param>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="PurchaseLineACY">The current purchase line in additional currency</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.InitNonDeductibleVATDiff(Purchase Line@)">
            <summary>
            Clears Non-Deductible VAT difference in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Purchase Line@,VAT Amount Line@,Currency)">
            <summary>
            Updates the non-deductible VAT base and amount in the purchase line with rounding
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="TempVATAmountLineRemainder">Remainder from rounding to add to the next line</param>
            <param name="Currency">The currency code of the purchase document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Purchase Line@,Currency)">
            <summary>
            Updates the non-deductible VAT base and amount in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="Currency">The currency code of the purchase document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Purchase Line@,Decimal,Decimal,Decimal)">
            <summary>
            Update the non-deductible VAT base and amount in the purchase line with factor multiplication
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="Part">The numerator for the factor calculation</param>
            <param name="Total">The denominator for factor calculation</param>
            <param name="AmountRoundingPrecision">Amount rounding precision to apply after multiplication</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Decimal@,Decimal@,Decimal@,Decimal@,Decimal@,Invoice Posting Buffer)">
            <summary>
            Updates total Non-Deductible VAT amounts in the invoice posting buffer
            </summary>
            <param name="TotalNonDedVATBase">Total Non-Deductible VAT base</param>
            <param name="TotalNonDedVATAmount">Total Non-Deductible VAT amount</param>
            <param name="TotalNonDedVATBaseACY">Total Non-Deductible VAT base in additional currency</param>
            <param name="TotalNonDedVATAmountACY">Total Non-Deductible VAT amount in additional currency</param>
            <param name="TotalNonDedVATDiff">Total Non-Deductible VAT difference</param>
            <param name="InvoicePostingBuffer">The current invoice posting buffer to update totals</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Decimal@,Decimal@,Decimal@,Decimal@,Decimal@,Invoice Post# Buffer)">
            <summary>
            Updates total Non-Deductible VAT amounts in the invoice post buffer
            </summary>
            <param name="TotalNonDedVATBase">Total Non-Deductible VAT base</param>
            <param name="TotalNonDedVATAmount">Total Non-Deductible VAT amount</param>
            <param name="TotalNonDedVATBaseACY">Total Non-Deductible VAT base in additional currency</param>
            <param name="TotalNonDedVATAmountACY">Total Non-Deductible VAT amount in additional currency</param>
            <param name="TotalNonDedVATDiff">Total Non-Deductible VAT difference</param>
            <param name="InvoicePostBuffer">The current invoice post buffer to update totals</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(VAT Amount Line@,Currency)">
            <summary>
            Update Non-Deductible VAT amounts in the VAT amount line
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="Currency">The currency code of the document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Invoice Post# Buffer@,Invoice Post# Buffer@,Decimal)">
            <summary>
            Update Non-Deductible VAT amounts in the invoice post buffer with rounding
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
            <param name="RemainderInvoicePostBuffer">Remainder from rounding to add to the next line</param>
            <param name="AmountRoundingPrecision">Amount rounding precision to apply for rounding</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Update(Invoice Posting Buffer@,Invoice Posting Buffer@,Decimal)">
            <summary>
            Update Non-Deductible VAT amounts in the invoice posting buffer with rounding
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
            <param name="RemainderInvoicePostingBuffer">Remainder from rounding to add to the next line</param>
            <param name="AmountRoundingPrecision">Amount rounding precision to apply for rounding</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.DivideNonDeductibleVATInPurchaseLine(Purchase Line@,VAT Amount Line@,VAT Amount Line,Currency,Decimal,Decimal)">
            <summary>
            Divide Non-Deductible VAT amounts of VAT amount line for the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="VATAmountLineRemainder">Remainder from rounding to add to the next line</param>
            <param name="VATAmountLine">The current VAT amount line to divide</param>
            <param name="Currency">The currency code of the purchase document</param>
            <param name="Part">The numerator for the factor calculation</param>
            <param name="Total">The denominator for factor calculation</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ValidateVATAmountInVATAmountLine(VAT Amount Line@)">
            <summary>
            Update Non-Deductible VAT amounts on VAT amount validation in the VAT amount line
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ValidateNonDeductibleVATInVATAmountLine(VAT Amount Line@)">
            <summary>
            Update Non-Deductible VAT amounts on Non-Deductible VAT amount validation in the VAT amount line
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.UpdateNonDeductibleAmountsWithDiffInVATAmountLine(VAT Amount Line@,Currency)">
            <summary>
            Update Non-Deductible VAT amounts in the VAT amount line with VAT difference
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="Currency">The currency code of the document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.GetNonDedVATAmountFromVATAmountLine(VAT Amount Line@,VAT Amount Line,Currency,Decimal,Decimal):Decimal">
            <summary>
            Get Non-Deductible VAT Amount from VAT amount line with factor multiplication
            </summary>
            <param name="VATAmountLineRemainder">Remainder from rounding to add to the next line</param>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="Currency">The currency code of the document</param>
            <param name="Part">The numerator for the factor calculation</param>
            <param name="Total">The denominator for factor calculation</param>
            <returns>The Non-Deductible VAT Amount</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.AddNonDedAmountsOfPurchLineToVATAmountLine(VAT Amount Line@,VAT Amount Line@,Purchase Line,Currency,Decimal,Decimal)">
            <summary>
            Adds the Non-Deductible VAT amounts to the VAT amount line from the purchase line with factor multiplication
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="VATAmountLineRemainder">Remainder from rounding to add to the next line</param>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="Currency">The currency code of the document</param>
            <param name="Part">The numerator for the factor calculation</param>
            <param name="Total">The denominator for factor calculation</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CopyNonDedVATFromPurchInvLineToVATAmountLine(VAT Amount Line@,Purch# Inv# Line)">
            <summary>
            Copy Non-Deductible VAT amounts from the purchase invoice line to VAT amount line
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="PurchInvLine">The current purchase invoice line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CopyNonDedVATFromPurchCrMemoLineToVATAmountLine(VAT Amount Line@,Purch# Cr# Memo Line)">
            <summary>
            Copy Non-Deductible VAT amounts from the purchase credit memo line to VAT amount line
            </summary>
            <param name="VATAmountLine">The current VAT amount line</param>
            <param name="PurchCrMemoLine">The current purchase credit memo line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CopyNonDedVATAmountFromGenJnlLineToGLEntry(G/L Entry@,Gen# Journal Line)">
            <summary>
            Copy Non-Deductible VAT amount from general journal line to G/L entry
            </summary>
            <param name="GLEntry">The current G/L entry</param>
            <param name="GenJournalLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CopyNonDedVATFromGenJnlLineToFALedgEntry(FA Ledger Entry@,Gen# Journal Line)">
            <summary>
            Copy Non-Deductible VAT from general journal line to FA ledger Entry
            </summary>
            <param name="FALedgEntry">The current FA ledger entry</param>
            <param name="GenJnlLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckPrepmtWithNonDeductubleVATInPurchaseLine(Purchase Line)">
            <summary>
            Throws an error if purchase line contains prepayment and Non-Deductible VAT
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckPrepmtVATPostingSetup(VAT Posting Setup)">
            <summary>
            Throws the error about prepayment not compatible with Non-Deductible VAT if VAT Posting Setup contains Non-Deductible VAT
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckUnrealizedVATWithNonDeductibleVATInVATPostingSetup(VAT Posting Setup)">
            <summary>
            Throws an error if current VAT posting setup contains unrealized VAT and Non-Deductible VAT
            </summary>
            <param name="VATPostingSetup">The current VAT posting setup</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckVATPostingSetupChangeIsAllowed(VAT Posting Setup)">
            <summary>
            Check that a certain change of the VAT Posting Setup is allowed
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckNonDeductibleVATPctIsAllowed(Purchase Line)">
            <summary>
            Check that a Non-Deductible VAT % is allowed in the purchase line
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CheckNonDeductibleVATAmountDiff(VAT Amount Line@,VAT Amount Line,Boolean,Currency)">
            <summary>
            Throws an error if the total Non-Deductible VAT difference is not allowed
            </summary>
            <param name="TempVATAmountLine"></param>
            <param name="xTempVATAmountLine"></param>
            <param name="AllowVATDifference"></param>
            <param name="Currency"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.DeductNonDedValuesFromVATAmountLine(VAT Amount Line@,VAT Amount Line)">
            <summary>
            Deduct the Non-Deductible VAT amounts from the VAT amount line
            </summary>
            <param name="TotalVATAmountLine">The VAT amount line to be deducted</param>
            <param name="VATAmountLine">The current VAT amount line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Reverse(Purchase Line@)">
            <summary>
            Reverse the Non-Deductible VAT base and amount in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Reverse(Invoice Posting Buffer@)">
            <summary>
            Reverse the Non-Deductible VAT base and amount in the invoice posting buffer
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Reverse(Invoice Post# Buffer@)">
            <summary>
            Reverse the Non-Deductible VAT base and amount in the invoice post buffer
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Reverse(G/L Entry@,G/L Entry)">
            <summary>
            Reverse Non-Deductible amount in G/L Entry
            </summary>
            <param name="GLEntry">The G/L Entry to set the reversed amount</param>
            <param name="GLEntryToReverse">The G/L Entry to take the value from</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Reverse(VAT Entry@)">
            <summary>
            Reverse Non-Deductible amount in the VAT Entry
            </summary>
            <param name="VATEntry">The VAT Entry to set the reversed amount</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Increment(VAT Amount Line@,VAT Amount Line)">
            <summary>
            Increment the Non-Deductible VAT amounts in the VAT amount line
            </summary>
            <param name="TotalVATAmountLine">The VAT amount line to be incremented</param>
            <param name="VATAmountLine">The current VAT amount line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Increment(Purchase Line@,Purchase Line)">
            <summary>
            Increment Non-Deductible VAT amounts in the purchase line
            </summary>
            <param name="TotalPurchaseLine">The purchase line to be incremented</param>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Increment(Invoice Posting Buffer@,Invoice Posting Buffer)">
            <summary>
            Increment Non-Deductible VAT amounts in the invoice posting buffer
            </summary>
            <param name="TotalInvoicePostingBuffer">The invoice posting buffer to be incremented</param>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Increment(Invoice Post# Buffer@,Invoice Post# Buffer)">
            <summary>
            Increment Non-Deductible VAT amounts in the invoice post buffer
            </summary>
            <param name="TotalInvoicePostBuffer">The invoice post buffer to be incremented</param>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.IsNonDedFALedgEntryInFirstAcquisition(FA Ledger Entry):Boolean">
            <summary>
            Identifies if the current FA ledger entry is a Non-Deductible VAT entry in the first acquisition
            </summary>
            <param name="FALedgEntry"></param>
            <returns>Returns true if the current FA ledger entry is a Non-Deductible VAT entry in the first acquisition</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.RoundNonDeductibleVAT(Purchase Header,Purchase Line@,Purchase Line,Purchase Line)">
            <summary>
            Round Non-Deductible VAT amounts after exchanging to the local currency
            </summary>
            <param name="PurchaseHeader">The current purchase header</param>
            <param name="PurchaseLine">The current purchase line</param>
            <param name="TotalPurchaseLine">The total purchase line with remainders</param>
            <param name="TotalPurchaseLineLCY">The total purchase line in additional curency with remainders</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ClearNonDeductibleVAT(Purchase Line@)">
            <summary>
            Clear Non-Deductible VAT in the purchase line
            </summary>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ClearNonDeductibleVAT(Invoice Posting Buffer@)">
            <summary>
            Clear Non-Deductible VAT in the invoice posting buffer
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ClearNonDeductibleVAT(Invoice Post# Buffer@)">
            <summary>
            Clear Non-Deductible VAT in the invoice post buffer
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ClearNonDedVATACYInVATEntry(VAT Entry@)">
            <summary>
            Clear Non-Deductible VAT amounts in additional currency in VAT entry
            </summary>
            <param name="VATEntry">The current VAT entry</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ValidateNonDedVATPctInGenJnlLine(Gen# Journal Line@)">
            <summary>
            Validate the Non-Deductible VAT percent in the general journal line
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ValidateBalNonDedVATPctInGenJnlLine(Gen# Journal Line@)">
            <summary>
            Validate the Non-Deductible VAT percent in the general journal line for the balance account
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Calculate(Gen# Journal Line@,Currency)">
            <summary>
            Calculate Non-Deductible VAT amounts in the general journal line
            </summary>
            <param name="GenJournalLine">The current journal line</param>
            <param name="Currency">The currency code of the document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.CalculateBalAcc(Gen# Journal Line@,Currency)">
            <summary>
            Calculate Non-Deductible VAT amounts in the general journal line for the balance account
            </summary>
            <param name="GenJournalLine">The current journal line</param>
            <param name="Currency">The currency code of the document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Calculate(Invoice Posting Buffer@)">
            <summary>
            Calculate Non-Deductible VAT amounts in the invoice posting buffer
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Calculate(Invoice Post# Buffer@)">
            <summary>
            Calculate Non-Deductible VAT amounts in the invoice post buffer
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Calculate(Decimal@,Decimal@,Decimal@,Decimal@,Decimal@,Decimal@,Purchase Header,Purchase Line)">
            <summary>
            Calculate Non-Deductible VAT per unit
            </summary>
            <param name="NonDeductibleBaseAmount">The calculated total Non-Deductible base</param>
            <param name="NonDeductibleVATAmount">The calculated total Non-Deductible amount</param>
            <param name="NonDeductibleVATAmtPerUnit">The calculated Non-Deductible VAT amount per unit</param>
            <param name="NonDeductibleVATAmtPerUnitLCY">The calculated Non-Deductible VAT amount per unit in local currency</param>
            <param name="NDVATAmountRounding">The remaining rounding difference of Non-Deductible VAT amount</param>
            <param name="NDVATBaseRounding">The remaining rounding difference of Non-Deductible VAT base</param>
            <param name="PurchHeader">The current purchase header</param>
            <param name="PurchaseLine">The current purchase line with LCY amounts</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Copy(Invoice Posting Buffer@,Purchase Line)">
            <summary>
            Copy Non-Deductible VAT from the purchase line to the invoice posting buffer
            </summary>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Copy(Invoice Post# Buffer@,Purchase Line)">
            <summary>
            Copy Non-Deductible VAT from the purchase line to the invoice post buffer
            </summary>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
            <param name="PurchaseLine">The current purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Copy(VAT Entry@,Gen# Journal Line)">
            <summary>
            Copy Non-Deductible VAT from the general journal line to the VAT Entry
            </summary>
            <param name="VATEntry">The current VAT Entry</param>
            <param name="GenJournalLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Copy(Gen# Journal Line@,Invoice Posting Buffer)">
            <summary>
            Copy Non-Deductible VAT from the invoice posting buffer to the general journal line
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
            <param name="InvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.Copy(Gen# Journal Line@,Invoice Post# Buffer)">
            <summary>
            Copy Non-Deductible VAT from the invoice post buffer to the general journal line
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
            <param name="InvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ExchangeAccGLJournalLine(Gen# Journal Line@,Gen# Journal Line)">
            <summary>
            Exchange Non-Deductible VAT fields with the balance side in general journaal line
            </summary>
            <param name="GenJournalLine">The current general journal line</param>
            <param name="GenJournalLine">The copied general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.AdjustVATAmountsFromGenJnlLine(Decimal@,Decimal@,Decimal@,Decimal@,Gen# Journal Line@)">
            <summary>
            Adjust VAT amounts with Non-Deductible VAT from general journal line
            </summary>
            <param name="VATAmount">The VAT amount to be adjusted</param>
            <param name="BaseAmount">The VAT base to be adjusted</param>
            <param name="VATAmountACY">The VAT amount in additional currency to be adjusted</param>
            <param name="BaseAmountACY">The VAT base in additional currency to be adjusted</param>
            <param name="GenJournalLine">The current general journal line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.AdjustRoundingForInvoicePostingBufferUpdate(Invoice Posting Buffer@,Invoice Posting Buffer@)">
            <summary>
            Adjust rounding for invoice posting buffer
            </summary>
            <param name="RoundingInvoicePostingBuffer">The invoice posting buffer for rounding</param>
            <param name="CurrInvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.UseNonDeductibleVATAmountForFixedAssetCost:Boolean">
            <summary>
            Returns true if the Non-Deductible VAT amount must be added to the fixed asset cost
            </summary>
            <returns>If the Non-Deductible amount must be added to the fixed asset cost</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.UseNonDeductibleVATAmountForJobCost:Boolean">
            <summary>
            Returns true if the Non-Deductible VAT amount must be added to the job cost
            </summary>
            <returns>If the Non-Deductible amount must be added to the job cost</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.AdjustRoundingForInvoicePostBufferUpdate(Invoice Post# Buffer@,Invoice Post# Buffer@)">
            <summary>
            Adjust romunding for invoice post buffer
            </summary>
            <param name="RoundingInvoicePostBuffer">The invoice post buffer for rounding</param>
            <param name="CurrInvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ApplyRoundingForFinalPostingFromInvoicePostingBuffer(Invoice Posting Buffer@,Invoice Posting Buffer@)">
            <summary>
            Apply rounding for the final posting from the invoice posting buffer
            </summary>
            <param name="RoundingInvoicePostingBuffer">The invoice posting buffer for rounding</param>
            <param name="CurrInvoicePostingBuffer">The current invoice posting buffer</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Deductible VAT.ApplyRoundingForFinalPostingFromInvoicePostBuffer(Invoice Post# Buffer@,Invoice Post# Buffer@)">
            <summary>
            Apply rounding for the final posting from the invoice post buffer 
            </summary>
            <param name="RoundingInvoicePostBuffer">The invoice post buffer for rounding</param>
            <param name="CurrInvoicePostBuffer">The current invoice post buffer</param>
        </member>
        <member name="O:Codeunit::Microsoft#Finance#VAT#Calculation#Non-Ded# VAT Impl#">
            <summary>
            Defines the implementation of Non-Deductible VAT
            </summary>
        </member>
        <member name="O:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Consist#">
            <summary>
            The interface provides methods to check the consistency of the alternative customer VAT registration and dependant entities.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Consist#.CheckAltCustVATRegConsistent(Alt# Cust# VAT Reg#)">
            <summary>
            Checks that the current state of the alternative customer VAT registration is correct
            </summary>
            <param name="AltCustVATReg">The current alternative customer VAT registration record</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Consist#.CheckCustomerConsistency(Customer)">
            <summary>
            Checks that the current state of the customer is consistent with the alternative customer VAT registration
            </summary>
            <param name="Customer"></param>
        </member>
        <member name="O:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#">
            <summary>
            The interfaces provides methods to handle the alternative customer VAT registration in the document.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#.Init(Sales Header@,Sales Header)">
            <summary>
            Initializes the VAT registration data taken from the alternative customer registration in the sales header.
            </summary>
            <param name="SalesHeader">The current sales header record</param>
            <param name="xSalesHeader">The previous version of the record</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#.CopyFromCustomer(Sales Header@,Sales Header)">
            <summary>
            Copies the VAT registration data from the customer to the sales header.
            </summary>
            <param name="SalesHeader">The current sales header record</param>
            <param name="xSalesHeader">The previous version of the record</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#.UpdateSetupOnShipToCountryChangeInSalesHeader(Sales Header@,Sales Header)">
            <summary>
            Updates the VAT registration data when the Ship-to Country/Region Code is changed in the sales header.
            </summary>
            <param name="SalesHeader">The current sales header record</param>
            <param name="xSalesHeader">The previous version of the record</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#.UpdateSetupOnVATCountryChangeInSalesHeader(Sales Header@,Sales Header)">
            <summary>
            Updates the VAT registration data when the VAT Country/Region Code is changed in the sales header.
            </summary>
            <param name="SalesHeader">The current sales header record</param>
            <param name="xSalesHeader">The previous version of the record</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Alt# Cust# VAT Reg# Doc#.UpdateSetupOnBillToCustomerChangeInSalesHeader(Sales Header@,Sales Header,Customer)">
            <summary>
            Updates the VAT registration data when the Bill-to Customer is changed in the sales header.
            </summary>
            <param name="SalesHeader">The current sales header record</param>
            <param name="BillToCustomer">The bill-to customer of the sales header</param>
            <param name="xSalesHeader">The previous version of the record</param>
        </member>
        <member name="O:Interface::Microsoft#Finance#VAT#Registration#Ship-To Alt# Cust# VAT Reg#">
            <summary>
            The interface provides methods to handle the alternative customer VAT registration in the ship-to address.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Finance#VAT#Registration#Ship-To Alt# Cust# VAT Reg#.HandleCountryChangeInShipToAddress(Ship-to Address)">
            <summary>
            Handles the relation to the alternative customer VAT registration when the country/region code is changed in the ship-to address.
            </summary>
            <param name="ShipToAddress">The current ship-to address record</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.EmptyLine:Boolean">
            <summary>
            Determines if the general journal line is empty. It is considered empty if
            account number, amount, and balance account number (if not system created entry) are blank.
            </summary>
            <returns>True if empty, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.GetSkipTaxCalculation:Boolean">
            <summary>
            Returns the value of the global flag SkipTaxCalculation.
            </summary>
            <remarks>
            Currently SkipTaxCalculation in general journal line is used only in variable set and get procedures.
            </remarks>
            <returns>The value of the global flag SkipTaxCalculation.</returns>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SetSkipTaxCalulation(Boolean)">
            <summary>
            Sets the value of the global variable SkipTaxCalculation.
            </summary>
            <remarks>
            Currently SkipTaxCalculation in general journal line is used only in variable set and get procedures.
            </remarks>
            <param name="Skip">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateLineBalance">
            <summary>
            Updates the debit amout, credit amount, balnce and amount fields of a general journal line.
            </summary>
            <remarks>
            Also, updates the allocations for the line and validates the deferral code field if necessary.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SetUpNewLine(Gen# Journal Line,Decimal,Boolean)">
            <summary>
            Initializes a new general journal line with values from the previous general journal line.
            </summary>
            <param name="LastGenJnlLine">Previous general journal line.</param>
            <param name="Balance">Genaral journal line balance.</param>
            <param name="BottomLine">Indicates whether the current line is the last line in a batch of general journal lines.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.InitNewLine(Date,Date,Date,Text[100],Code[20],Code[20],Integer,Code[10])">
            <summary>
            Initializes a new general journal line.
            </summary>
            <param name="PostingDate">Posting date to set.</param>
            <param name="DocumentDate">Document date to set.</param>
            <param name="VATDate">VAT date to set.</param>
            <param name="PostingDescription">Posting description to set.</param>
            <param name="ShortcutDim1Code">Shortcut dimension 1 code to set.</param>
            <param name="ShortcutDim2Code">Shortcut dimension 2 code to set.</param>
            <param name="DimSetID">Dimension set ID to set.</param>
            <param name="ReasonCode">Reason code to set.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.CheckDocNoOnLines">
            <summary>
            Checks the document numbers on general journal lines to ensure correct sequence
            by the number series in the general journal batch.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.RenumberDocumentNo">
            <summary>
            Updates the document numbers on general journal lines to ensure correct sequence
            by the number series in the general journal batch.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.RenumberAppliesToID(Gen# Journal Line,Code[50],Code[50])">
            <summary>
            Updates the applies to ID in general journal line and related ledger entries.
            </summary>
            <param name="GenJnlLine2">General journal line where applies to ID has to be replaced.</param>
            <param name="OriginalAppliesToID">Applies to ID which needs to be replaced.</param>
            <param name="NewAppliesToID">New applies to ID.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.RenumberAppliesToDocNo(Gen# Journal Line,Code[20],Code[20])">
            <summary>
            Updates the applies to document number in general journal lines.
            </summary>
            <param name="GenJnlLine2">
            General journal line is used to find lines that need to be modified.
            </param>
            <param name="OriginalAppliesToID">Applies to document number which needs to be replaced.</param>
            <param name="NewAppliesToID">New applies-to document number.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SetCurrencyCode(Enum::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Account Type,Code[20]):Boolean">
            <summary>
            Sets the currency code from related bank account.
            </summary>
            <param name="AccType2">
            Current general journal account type.
            This parameter is used to determine if the account type is bank account. 
            If it is not bank account the currency code will not be updated.
            </param>
            <param name="AccNo2">Current general journal account number. Used to retrieve bank account.</param>
            <returns>True if the currency code is set, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SetCurrencyFactor(Code[10],Decimal)">
            <summary>
            Sets the currency code and currency factor.
            </summary>
            <remarks>
            If provided currency code is blank then the currency factor is set to 1.
            </remarks>
            <param name="CurrencyCode">Currency code to set.</param>
            <param name="CurrencyFactor">Currency factor to set.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.GetCurrency">
            <summary>
            Sets the global Currency and CurrencyCode variables based on currency information in general journal line.
            </summary>
            <remarks>
            If additional currency posting is set to 'additional-currency amount only' the CurrencyCode is set from general ledger setup.
            An error will be raised if retrieved currency does not have amount rounding precision set.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateSource">
            <summary>
            Updates general journal line source type and source number from account
            or balancing account.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SetAccountNoFromFilter">
            <summary>
            Sets the account number of the current general journal line based on the existing account number filter.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.GetNewLineNo(Code[10],Code[10]):Integer">
            <summary>
            Returns the next unused journal line number for a template and batch.
            </summary>
            <param name="TemplateName">Template name to filter general journal line with.</param>
            <param name="BatchName">Batch name to filter general journal line with.</param>
            <returns>Next unused line number.</returns>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.VoidPaymentFile">
            <summary>
            Runs a report that voids electronic payments associated with a general journal line. 
            </summary>
            <remarks>
            The report voids or transmits electronic payments, ensuring accurate and efficient payment processing.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.TransmitPaymentFile">
            <summary>
            Runs the report which transmits electronic payments associated with the general journal line.
            </summary>
            <remarks>
            The report voids or transmits electronic payments, ensuring accurate and efficient payment processing.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.ValidateSalesPersonPurchaserCode(Gen# Journal Line)">
            <summary>
            Tests if the salesperson/purchaser privacy is not blocked of the provided general journal line. 
            If privacy is blocked, an error is raised.
            </summary>
            <param name="GenJournalLine2">General journal line to check.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.CheckIfPrivacyBlocked">
            <summary>
            Checks if the privacy is blocked for the accounts associated with the general journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateAccountID">
            <summary>
            Updates the account ID with the system ID of the related G/L account.
            </summary>
            <remarks>
            If account number is empty, account Id is cleared.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateBankAccountID">
            <summary>
            Updates the account ID with the system ID of the related bank account.
            </summary>
            <remarks>
            If account number is empty, account Id is cleared.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateCustomerID">
            <summary>
            Updates the customer ID with the system ID of the related customer.
            </summary>
            <remarks>
            If account number is empty, customer ID is cleared.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateVendorID">
            <summary>
            Updates the vendor ID with the system ID of the related vendor.
            </summary>
            <remarks>
            If account number is empty, vendor ID is cleared.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateAppliesToInvoiceID">
            <summary>
            Updates the applies-to invoice ID with the system ID of the related sales or purchase invoice header.
            </summary>
            <remarks>
            If applies-to document number is empty, applies-to invoice ID is cleared.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdateJournalBatchID">
            <summary>
            Updates the journal batch ID with the system ID of the related general journal batch.
            </summary>
            <remarks>
            If the journal template name and journal batch name do not correspond to a general journal batch record, 
            the procedure is not executed.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.UpdatePaymentMethodId">
            <summary>
            Updates the payment method ID with the system ID of the related payment method.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.ShowDeferralSchedule">
            <summary>
            Opens a page with deferral schedule for the general journal line.
            </summary>
            <remarks>
            Deferral schedule cannot be specified for a fixed asset account type.
            If the deferral schedule doesn't exist yet, a new one is created and commited before the page is opened.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.ShowRecurringDimFilter">
            <summary>
            Opens the general journal dimension filters page for the current general journal line.
            </summary>
            <remarks>
            Used to filter and analyze data based on specific properties or dimensions.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.CheckShortcutDimCodeRecurringMethod(Code[20])">
            <summary>
            Checks if the shortcut dimension code is valid for the recurring method on general journal line.
            </summary>
            <param name="ShortcutDimCode">Shortcut dimension code to check.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.SendToPosting(Integer)">
            <summary>
            Sends a general journal line to a specified posting codeunit for processing,
            </summary>
            <param name="PostingCodeunitID">Posting codeunit ID to use.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the general journal line.
            </summary>
            <param name="FromFieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Line.IsAcquisitionCost:Boolean">
            <summary>
            Determines whether the fixed asset posting type of the current general journal line is set to the acquisition cost.
            </summary>
            <returns>True if fixed asset posting type is set to the acquisition cost, otherwise false.</returns>
        </member>
        <member name="F:Table::Microsoft#Finance#GeneralLedger#Ledger#G/L Register.Creation Date">
            <summary>
            The Creation Date field has been replaced with the SystemCreateAt field but needs to be kept for historical audit purposes.
            </summary>
        </member>
        <member name="F:Table::Microsoft#Finance#GeneralLedger#Ledger#G/L Register.Creation Time">
            <summary>
            The Creation Time field has been replaced with the SystemCreateAt field but needs to be kept for historical audit purposes.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetGLReg(G/L Register@)">
            <summary>
            Returns the G/L Register that has been created during the posting process.
            </summary>
            <param name="NewGLReg">Retun value: G/L Register that has been created during the posting process.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.RunWithCheck(Gen# Journal Line@):Integer">
            <summary>
            Wrapper for the main procedure which checks and posts the journal line.
            As a result G/L Entries and Register are created along with other related ledger entries.
            </summary>
            <param name="GenJnlLine2">Return value: General Journal Line that is being be posted.</param>
            <returns>No. of the last General Ledger Entry that has been created.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.RunWithoutCheck(Gen# Journal Line@):Integer">
            <summary>
            Wrapper for the main procedure posts the journal line without checking it.
            As a result G/L Entries and Register are created along with other related ledger entries.
            </summary>
            <param name="GenJnlLine2">Return value: General Journal Line that is being be posted.</param>
            <returns>No. of the last General Ledger Entry that has been created.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.IsGLEntryInconsistent:Boolean">
            <summary>
            Specifies if the General Ledger Entries that have been created during the posting process are inconsistent.
            </summary>
            <returns>True if the G/L Entry is inconsistent, false otherwise.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ShowInconsistentEntries">
            <summary>
            Shows a list of all inconsistent G/L Entries that has been produced during the posting.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InitLastDocDate(Gen# Journal Line)">
            <summary>
            Assignes information (Document Type, Document No., Posting Date) fron Gen. Journal Line to the global variables.
            </summary>
            <param name="GenJnlLine">General Journal Line from which information is taken.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InitVAT(Gen# Journal Line@,G/L Entry@,VAT Posting Setup@)">
            <summary>
            Initializes the G/L Entry for posting VAT depending on the VAT Posting of the Gen. Journal Line.
            </summary>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
            <param name="GLEntry">Return value: G/L Entry initialized with information for VAT.</param>
            <param name="VATPostingSetup">Return value: VAT Posting Setup applicable to Gen. Journal Line that is being posted. Record is retrieved in this procedure and returned.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostVAT(Gen# Journal Line,G/L Entry@,VAT Posting Setup)">
            <summary>
            Creates and inserts VAT Entries for the Gen. Journal Line that is being posted.
            If Gen. Journal Line requires Sales Tax, VAT Entries are created and inserted for each Tax Line that is needed.
            </summary>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
            <param name="GLEntry">G/L Entry for which VAT Entry should be created.</param>
            <param name="VATPostingSetup">VAT Posting Setup applicable to Gen. Journal Line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InsertVAT(Gen# Journal Line,VAT Posting Setup,Decimal,Decimal,Decimal,Code[10],Decimal,Decimal,Decimal)">
            <summary>
            Creates and inserts VAT Entry for the Gen. Journal Line that is being posted. 
            If Calculation Type is Sales Tax, VAT Entries are filled with Tax related information.
            VAT Posting Parameter is created to be used for the VAT Entry.
            </summary>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
            <param name="VATPostingSetup">VAT Posting Setup applicable to Gen. Journal Line that is being posted.</param>
            <param name="GLEntryAmount">Amount that is used for the new VAT Entry Amount if Gen. Posting Type is Settlement.</param>
            <param name="GLEntryVATAmount">Amount that is used for the new VAT Entry Amount if Gen. Posting Type is not Settlement.</param>
            <param name="GLEntryBaseAmount">Amount that is used for the new VAT Entry Base.</param>
            <param name="SrcCurrCode">Currency Code that has been used for the posting transaction (empty if local currency).</param>
            <param name="SrcCurrGLEntryAmt">Determines new VAT Entry amount after exhange to foreign currency.</param>
            <param name="SrcCurrGLEntryVATAmt">The VAT Amount to be used for additional currency.</param>
            <param name="SrcCurrGLEntryBaseAmt">The VAT base to be used for additional currency.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SummarizeVAT(Boolean,G/L Entry)">
            <summary>
            Creates G/L Entries for VAT. If summarization is needed, before creating new entry existing ones in TempGLEntryVAT.
            buffer are checked. If entry in the buffer for the same G/L Account and Bal. Account already exists, just the amount is increased.
            </summary>
            <param name="SummarizeGLEntries">Flag if entries should be summarized.</param>
            <param name="GLEntry">G/L Entry for which VAT G/L Entry should be created or adjusted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InsertSummarizedVAT(Gen# Journal Line)">
            <summary>
            Inserts summarized VAT G/L Entries for the Gen. Journal Line that is being posted.
            Summarized entries are taken from TempGLEntryVAT buffer.
            </summary>
            <remarks>
            Global G/L Entry buffer for VAT is cleared at the end of procedure.
            </remarks>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.RunPostFixedAsset(Gen# Journal Line)">
            <summary>
            Wrapper procedure for external call of PostFixedAssetPostFixedAsset, which is used for posting a Gen. Journal Line with Account Type Fixed Asset.
            G/L Entries, VAT Entries and FA Ledger Entries are created.
            </summary>
            <remarks>
            In the procedure there is no check if Account Type is Fixed Asset.
            </remarks>
            <param name="GenJnlLine">General Journal Line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostJob(Gen# Journal Line,G/L Entry)">
            <summary>
            Wrapper procedure for external call of PostJob, which is used for posting a gen. journal line with account type job.
            G/l entries, job entries, usage related ledger entries (resourse or item and value), possibly warehouse entries are created.
            </summary>
            <remarks>
            Procedure should not be called externally.
            Global variable determining if the gen. journal line is related to the job is set in the procedure.
            </remarks>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="GLEntry">G/l entry created for the gen. journal line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.StartPosting(Gen# Journal Line)">
            <summary>
            Initialize global variables and G/L Register for new posting batch, locks needed tables.
            </summary>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ContinuePosting(Gen# Journal Line)">
            <summary>
            If new transaction needs to be started, Unrealized VAT is check and posted, global values initialized for the new transaction. 
            Currency is updated for the new Gen. Journal Line that is being posted, current Balance of the posting is updated.
            </summary>
            <param name="GenJnlLine">Gen. Journal Line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.FinishPosting(Gen# Journal Line):Boolean">
            <summary>
            Checks if transaction is balanced for both local and additional currencies, inserts all G/L Entries that were created for the Gen. Journal Line. 
            If posting is performed for application purpose, original Customer and Vendor Ledger Entries are updated to reflect that.
            Cost journal line is posted if cost accounting setup is setup for this purpose.
            </summary>
            <param name="GenJournalLine">Gen. Journal Line that is being posted.</param>
            <returns>True if balance of the transaction is balanced for both local and additional currencies.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InitGLEntry(Gen# Journal Line,G/L Entry@,Code[20],Decimal,Decimal,Boolean,Boolean)">
            <summary>
            Initializes g/l entry from gen. journal line.
            </summary>
            <remarks>
            If g/l account used for posting has restricted dimensions, error is raised.
            If g/l account selected for the gen. journal line is blocked or have different posting type.
            </remarks>
            <param name="GenJnlLine">general journal line that is being posted.</param>
            <param name="GLEntry">Return value: g/l entry that is being created.</param>
            <param name="GLAccNo">G/l account that will be used to create e/l entry.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="UseAmountAddCurr">Determines if amount in the field "Additional-Currency Amount" should be used for the new g/l entry or should it be caculated.</param>
            <param name="SystemCreatedEntry">Determines if g/l entry is created by the system.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InitGLEntryVAT(Gen# Journal Line,Code[20],Code[20],Decimal,Decimal,Boolean)">
            <summary>
            Initializes g/l entry from gen. journal line and summarizes VAT g/l entries.
            </summary>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="AccNo">G/l account that will be used for new g/l entry.</param>
            <param name="BalAccNo">Account that will be used for new g/l entry as the balancing account.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="UseAmtAddCurr">Determines if amount in the field "Additional-Currency Amount" should be used for the new g/l entry or should it be caculated.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.InsertGLEntry(Gen# Journal Line,G/L Entry,Boolean)">
            <summary>
            Updates the amounts of the g/l entry and adds it to the TempGLEntryBuffer to be inserted.
            </summary>
            <remarks>
            If g/l entry amount is not properly rounded, error is raised.
            </remarks>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="GLEntry">G/l entry that needs to be inserted.</param>
            <param name="CalcAddCurrResiduals">Determined if residual rounding amount should be posted as a separate g/l entry.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CreateGLEntry(Gen# Journal Line,Code[20],Decimal,Decimal,Boolean)">
            <summary>
            Initializes the g/l entry from the general journal line and adds it to the TempGLEntryBuffer to be inserted.
            </summary>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="AccNo">G/l account that will be used for new g/l entry.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="UseAmtAddCurr">Determines if amount in the field "Additional-Currency Amount" should be used for the new g/l entry or should it be caculated.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CreateGLEntryBalAcc(Gen# Journal Line,Code[20],Decimal,Decimal,Enum::Microsoft#Finance#GeneralLedger#Journal#Gen# Journal Account Type,Code[20])">
            <summary>
            Initializes the g/l entry from the general journal line. Fills balance account information and adds it to the TempGLEntryBuffer to be inserted.
            </summary>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="AccNo">G/l account that will be used for new g/l entry.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="BalAccType">Balance account type to be used for the g/l entry.</param>
            <param name="BalAccNo">Balance account no. to be used for the g/l entry.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CreateGLEntryVAT(Gen# Journal Line,Code[20],Decimal,Decimal,Decimal,Detailed CV Ledg# Entry Buffer)">
            <summary>
            Initializes the g/l entry from the general journal line and detailed cv. ledger entry buffer, adds the g/l entry to the TempGLEntryBuffer to be inserted.
            Inserts vat entries.
            </summary>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="AccNo">G/l account that will be used for new g/l entry.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="VATAmount">Vat amount that will be used for g/l entry.</param>
            <param name="DtldCVLedgEntryBuf">DtldCVLedgerEntry Buffer that holds the information about posting groups and tax information that will be used for g/l entry creation.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CreateGLEntryVATCollectAdj(Gen# Journal Line,Code[20],Decimal,Decimal,Decimal,Detailed CV Ledg# Entry Buffer,Decimal[]@)">
            <summary>
            Initializes the g/l entry from the general journal line and detailed cv. ledger entry buffer, adds the g/l entry to the TempGLEntryBuffer to be inserted.
            Collects needed adjustments, inserts vat entries.
            </summary>
            <param name="GenJnlLine">General journal line that is being posted.</param>
            <param name="AccNo">G/l account that will be used for new g/l entry.</param>
            <param name="Amount">Amount that will be used for g/l entry (in local currency).</param>
            <param name="AmountAddCurr">Amount that will be used for g/l entry (in additional currency).</param>
            <param name="VATAmount">Vat amount that will be used for g/l entry.</param>
            <param name="DtldCVLedgEntryBuf">DtldCVLedgerEntry Buffer that holds the information about posting groups and tax information that will be used for g/l entry creation.</param>
            <param name="AdjAmount">Return value: the adjustment amount for the g/l entry.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CalcCurrencyUnrealizedGainLoss(CV Ledger Entry Buffer@,Detailed CV Ledg# Entry Buffer@,Gen# Journal Line,Decimal,Decimal)">
            <summary>
            Calculates unrealized gains and losses, if there are any then detailed CV ledger entries are created.
            </summary>
            <param name="CVLedgEntryBuf">Return value: CV ledger entry buffer that detailed entries are created for. In the procedure amounts are modified to reflect the application.</param>
            <param name="TempDtldCVLedgEntryBuf">Return value: Buffer where created CV ledger entries should be inserted to.</param>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="AppliedAmount">Amount that is being applied.</param>
            <param name="RemainingAmountBeforeAppln">Remaining amount on the ledger entry that the application is performed to.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CalcAmtLCYAdjustment(CV Ledger Entry Buffer@,Detailed CV Ledg# Entry Buffer@,Gen# Journal Line)">
            <summary>
            Calculates the difference in local currency between the actual remaining amount of the c/v ledger entry and the remaining amount based on the adjusted currency factor. 
            If there is a difference then detailed CV ledger entries are created and posted to equate the difference.
            </summary>
            <param name="CVLedgEntryBuf">Cv ledger entry that the adjustment should be calculated for.</param>
            <param name="DtldCVLedgEntryBuf">Buffer table for detailed vendor ledger entries to be posted.</param>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ApplyCustLedgEntry(CV Ledger Entry Buffer@,Detailed CV Ledg# Entry Buffer@,Gen# Journal Line,Customer)">
            <summary>
            Prepares and posts customer ledger entries needed for the application. Detailed customer ledger entries are created and posted for both
            the old and the new customer ledger entry.
            </summary>
            <remarks>
            If the gen. journal line does not allow application or customer/gen. journal line is not setup for application, application is not performed.
            </remarks>
            <param name="NewCVLedgEntryBuf">Return value: Buffer to collect customer ledger entries that has been created for the application.</param>
            <param name="DtldCVLedgEntryBuf">Return value: Buffer to collect detailed customer ledger entries that has been created for the application.</param>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="Cust">Customer that the customer ledger entries are created for.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CustPostApplyCustLedgEntry(Gen# Journal Line@,Cust# Ledger Entry@)">
            <summary>
            Stand-alone procedure to post (from check to finish) application gen. journal line for the customer ledger entries.
            G/l entries, vat entries, customer ledger entries and detailed customer ledger entries are created and posted.
            </summary>
            <param name="GenJnlLinePostApply">Gen. journal line that should be posted for application purpose.</param>
            <param name="CustLedgEntryPostApply">Customer ledger entry that the new application should be applied to.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostDtldCustLedgEntries(Gen# Journal Line,Detailed CV Ledg# Entry Buffer@,Customer Posting Group,Boolean):Boolean">
            <summary>
            Posts all detailed customer ledger entries that are stored in DtldCVLedgEntryBuf. Creates g/l entry for the total amounts.
            </summary>
            <remarks>
            DtldCVLedgEntryBuf is cleared after the procedure is finished.
            </remarks>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="DtldCVLedgEntryBuf">Detailed customer ledger entries to be inserted and posted.</param>
            <param name="CustPostingGr">Customer posting group to be used for detailed cust. ledger entries.</param>
            <param name="LedgEntryInserted">Flag if customer ledger entries have already been created in the same transaction.</param>
            <returns>True if any detailed customer ledger entries has been created.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ApplyVendLedgEntry(CV Ledger Entry Buffer@,Detailed CV Ledg# Entry Buffer@,Gen# Journal Line,Vendor)">
            <summary>
            Prepares and posts vendor ledger entries needed for the application. Detailed vendor ledger entries are created and posted for both
            the old and the new vendor ledger entry.
            </summary>
            <param name="NewCVLedgEntryBuf">Return value: Buffer to collect vendor ledger entries that has been created for the application.</param>
            <param name="DtldCVLedgEntryBuf">Return value: Buffer to collect detailed vendor ledger entries that has been created for the application.</param>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="Vend">Vendor that the vendor ledger entries are created for.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ApplyEmplLedgEntry(CV Ledger Entry Buffer@,Detailed CV Ledg# Entry Buffer@,Gen# Journal Line,Employee)">
            <summary>
            Prepares and posts employee ledger entries needed for the application. Detailed employee ledger entries are created and posted for both
            the old and the new employee ledger entry.
            </summary>
            <param name="NewCVLedgEntryBuf">Return value: Buffer to collect employee ledger entries that has been created for the application.</param>
            <param name="DtldCVLedgEntryBuf">Return value: Buffer to collect detailed employee ledger entries that has been created for the application.</param>
            <param name="GenJnlLine">Gen. journal line that is being posted.</param>
            <param name="Employee">Employee that the employee ledger entries are created for.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.VendPostApplyVendLedgEntry(Gen# Journal Line@,Vendor Ledger Entry@)">
            <summary>
            Stand-alone procedure to post (from check to finish) application gen. journal line for the vendor ledger entries.
            G/l entries, vat entries, vendor ledger entries and detailed vendor ledger entries are created and posted.
            </summary>
            <param name="GenJnlLinePostApply">Gen. journal line that should be posted for application purpose.</param>
            <param name="VendLedgEntryPostApply">Vendor ledger entry that the new application should be applied to.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.EmplPostApplyEmplLedgEntry(Gen# Journal Line@,Employee Ledger Entry@)">
            <summary>
            Stand-alone procedure to post (from check to finish) application gen. journal line for the employee ledger entries.
            G/l entries, vat entries, employee ledger entries and detailed employee ledger entries are created and posted.
            </summary>
            <param name="GenJnlLinePostApply">Gen. journal line that should be posted for application purpose.</param>
            <param name="EmplLedgEntryPostApply">Employee ledger entry that the new application should be applied to.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostDtldVendLedgEntries(Gen# Journal Line,Detailed CV Ledg# Entry Buffer@,Vendor Posting Group,Boolean):Boolean">
            <summary>
            Posts all detailed vendor ledger entries that are stored in DtldCVLedgEntryBuf. Creates g/l entry for the total amounts.
            </summary>
            <remarks>
            DtldCVLedgEntryBuf is cleared after the procedure is finished.
            </remarks>
            <param name="GenJournalLine">Gen. journal line that is being posted.</param>
            <param name="DetailedCVLedgEntryBuffer">Detailed vendor ledger entries to be inserted and posted.</param>
            <param name="VendPostingGr">Vendor posting group to be used for detailed vendor ledger entries.</param>
            <param name="LedgEntryInserted">Flag if vendor ledger entries have already been created in the same transaction.</param>
            <returns>True if any detailed vendor ledger entries has been created.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostDtldEmplLedgEntries(Gen# Journal Line,Detailed CV Ledg# Entry Buffer@,Employee Posting Group,Boolean):Boolean">
            <summary>
            Posts all detailed employee ledger entries that are stored in DtldCVLedgEntryBuf. Creates g/l entry for the total amounts.
            </summary>
            <remarks>
            DtldCVLedgEntryBuf is cleared after the procedure is finished.
            </remarks>
            <param name="GenJournalLine">Gen. journal line that is being posted.</param>
            <param name="DetailedCVLedgEntryBuffer">Detailed employee ledger entries to be inserted and posted.</param>
            <param name="EmplPostingGr">Employee posting group to be used for detailed employee ledger entries.</param>
            <param name="LedgEntryInserted">Flag if employee ledger entries have already been created in the same transaction.</param>
            <returns>True if any detailed employee ledger entries has been created.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.PostDtldCVLedgEntry(Gen# Journal Line,Detailed CV Ledg# Entry Buffer,Code[20],Decimal[]@,Boolean)">
            <summary>
            Depending on the detailed customer/vendor ledger entry type, creates g/l entry and other entries for the detailed customer/vendor ledger entry.
            If general journal line is created not for the unapplication purpose, adjustments can be collected.
            </summary>
            <param name="GenJournalLine">Gen. journal line that is being posted.</param>
            <param name="DetailedCVLedgEntryBuffer">Detailed customer/vendor ledger entry to post.</param>
            <param name="AccNo">G/l account to be used for g/l entry.</param>
            <param name="AdjAmount">Return value: array for adjustments.</param>
            <param name="Unapply">Flag if the posting is for unapplication.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.UnapplyCustLedgEntry(Gen# Journal Line,Detailed Cust# Ledg# Entry)">
            <summary>
            Creates and posts un-applying entry for currently applied detailed customer ledger entry.
            G/l entry with unapplied amount is created as part of the process
            Related customer ledger entry is being updated as part of the process
            Unrealized vat is posted
            </summary>
            <remarks>
            Customer, detailed customer ledger and vat entries are being locked
            </remarks>
            <param name="GenJournalLine">Gen. journal line being posted.</param>
            <param name="DetailedCustLedgEntry">Detailed ledger entry that is currently applied</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.UnapplyVendLedgEntry(Gen# Journal Line,Detailed Vendor Ledg# Entry)">
            <summary>
            Creates and posts un-applying entry for currently applied detailed vendor ledger entry.
            G/l entry with unapplied amount is created as part of the process
            Related vendor ledger entry is being updated as part of the process
            Unrealized vat is posted
            </summary>
            <remarks>
            Vendor, detailed vendor ledger and vat entries are being locked
            </remarks>
            <param name="GenJournalLine">Gen. journal line being posted.</param>
            <param name="DetailedVendorLedgEntry">Detailed ledger entry that is currently applied</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.UnapplyEmplLedgEntry(Gen# Journal Line,Detailed Employee Ledger Entry)">
            <summary>
            Creates and posts un-applying entry for currently applied detailed employee ledger entry.
            G/l entry with unapplied amount is created as part of the process
            Related employee ledger entry is being updated as part of the process
            </summary>
            <remarks>
            Employee and detailed employee ledger entries are being locked
            </remarks>
            <param name="GenJournalLine">Gen. journal line being posted.</param>
            <param name="DetailedEmployeeLedgerEntry">Detailed Employee Ledger Entry that is currently applied</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CalcLCYToAddCurr(Decimal):Decimal">
            <summary>
            Converts amount to additional reporting currency
            </summary>
            <remarks>
            If additional reporting currency is not set, conversion is not performed.
            </remarks>
            <param name="AmountLCY">Amount in local currency</param>
            <returns>Amount in additional reporting currency</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ExchangeAmtLCYToFCY2(Decimal):Decimal">
            <summary>
            Converts amount from local to foreign currency.
            </summary>
            <param name="Amount">Amount to be converted</param>
            <returns>Amount in foreign currency</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CheckNonAddCurrCodeOccurred(Code[10]):Boolean">
            <summary>
            Checks and returns if the currency code is different than additional reporting currency
            </summary>
            <param name="CurrencyCode">Currency Code to be checked</param>
            <returns>True if Currency Code passed as a parameter is different than additional reporting currency</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetGLRegReverse(G/L Register@)">
            <summary>
            Sets parameter ReverseGLReg to the same value as global variable GLReg with reversed set to true.
            </summary>
            <remarks>
            Global variable GLReg stores information of the g/l register that being created
            </remarks>
            <param name="ReverseGLReg">Return Value: General ledger register to be reversed</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.ABSMin(Decimal,Decimal):Decimal">
            <summary>
            Returns smaller value of the two parameters passed to the procedure.
            </summary>
            <param name="Decimal1">Value to compare</param>
            <param name="Decimal2">Value to compare</param>
            <returns>Smaller of the two passed parameters</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetGLSetup">
            <summary>
            Retrieves general ledger setup if it wasn't retrieved before.
            Global variable to store additional reporting currency is set from general ledger setup.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CheckDimValueForDisposal(Gen# Journal Line,Code[20])">
            <summary>
            Check dimension restrictions on gen. journal line that relates to g/l account.
            </summary>
            <remarks>
            Only gen. journal lines that have amount are checked
            FA Posting Type must be equal to disposal on gen. journal line
            </remarks>
            <param name="GenJnlLine">gen. journal line being posted</param>
            <param name="GLAccNo">g/l account no. to be checked</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetOverDimErr">
            <summary>
            Sets the global variable OverrideDimErr for the current instance of the codeunit.
            If OverrideDimErr is not set dimension check is performed before posting gen. journal line 
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetPreviewMode(Boolean)">
            <summary>
            Sets the Preview Mode for the current instance of the codeunit.
            Preview Mode ensures no transactions are committed to the database.
            </summary>
            <param name="NewPreviewMode">The new value for the Preview Mode.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CheckGLAccDimError(Gen# Journal Line,Code[20])">
            <summary>
            Check dimension restrictions on gen. journal line that relates to g/l account.
            </summary>
            <remarks>
            Only gen. journal lines that have amount and currency are checked
            g/l account must be same as specified on currency realized/unrealized gain/loss
            </remarks>
            <param name="GenJnlLine">gen. journal line being posted</param>
            <param name="GLAccNo">g/l account no. to be checked</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetCurrency(Currency@,Code[10])">
            <summary>
            Retrieves currency record based on the currency code.
            </summary>
            <param name="Currency">Return Value: Currency record</param>
            <param name="CurrencyCode">Currency code for record to be retrieved</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CollectAdjustment(Decimal[]@,Decimal,Decimal)">
            <summary>
            Populates the array AdjAmount with gen. journal lines value amount and additional currency amount.
            </summary>
            <remarks>
            If amount and additional currency amount values are positive array elements 1 (one) and 2 (two) are populated.
            For negative values array elements 3 (three) and 4 (four) are populated
            </remarks>
            <param name="AdjAmount">Return Value: array of adjustment amounts</param>
            <param name="Amount">Gen. journal line amount</param>
            <param name="AmountAddCurr">Gen. journal line amount in additional currency</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetAdjAmountOffset(Decimal,Decimal):Integer">
            <summary>
            Returns offset of adjustment amount.
            If amount positive and amount in additional currency is greater than 0 (zero) return value will be 1. If not - return value will be 3.
            </summary>
            <param name="Amount">gen. journal line amount</param>
            <param name="AmountACY">gen. journal amount (in additional currency)</param>
            <returns>Adjustment amount offset</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetNextEntryNo:Integer">
            <summary>
            Returns next entry no. that should be used when creating ledger (i.e. general, customer, vendor, etc.) entries.
            </summary>
            <returns>Returns next entry no. to be used for posting</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetNextTransactionNo:Integer">
            <summary>
            Returns next transaction no. that should be used when creating ledger (i.e. general, customer, vendor, etc.) entries.
            </summary>
            <returns>Returns next transaction no. to be used for posting</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.GetNextVATEntryNo:Integer">
            <summary>
            Return next vat entry no. that should be used when creating next vat entry.
            </summary>
            <returns>Next vat entry no. to be used for posting</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.IncrNextVATEntryNo">
            <summary>
            Increases global variable NextVATEntryNo by 1 (one).
            </summary>
            <remarks>
            Variable NextVATEntryNo is used as entry no. when creating vat entries
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.IncrNextEntryNo">
            <summary>
            Increases global variable NextEntryNo by 1 (one).
            </summary>
            <remarks>
            Variable NextEntryNo is used as entry no. when creating ledger entries
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.IsTempGLEntryBufEmpty:Boolean">
            <summary>
            Procedure to check if global temporary/buffer table TempGLEntryBuf is empty.
            </summary>
            <returns>True if global temporary/buffer table TempGLEntryBuf is empty</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.UpdateGLEntryNo(Integer@,Integer@)">
            <summary>
            Parameter GLEntryNo is updated with value of parameter SavedEntryNo.
            Global variable NextEntryNo is decreased by 1 (one).
            </summary>
            <remarks>
            Variable NextEntryNo is used as entry no. when creating ledger entries
            </remarks>
            <param name="GLEntryNo">Existing value for g/l entry no.</param>
            <param name="SavedEntryNo">New value for g/l entry no.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.UpdateTotalAmounts(Dimension Posting Buffer@,Integer,Detailed CV Ledg# Entry Buffer)">
            <summary>
            Creates/updates temporary/buffer table TempDimPostingBuffer with amount and amount in additional currency based on dimension set id.
            The procedure should be used to aggregate amounts by dimensions.
            </summary>
            <param name="TempDimPostingBuffer">Return Value: temporary buffer table to store amounts based on dimension set id.</param>
            <param name="DimSetID">Dimension set id of the transaction</param>
            <param name="DtldCVLedgEntryBuf">Buffer table for detailed customer/vendor ledger entries to be posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetAddCurrForUnapplication(Detailed CV Ledg# Entry Buffer@)">
            <summary>
            Updates additional-currency amount on buffer table DtldCVLedgEntryBuf when un-application of customer/vendor ledger entries is posted.
            </summary>
            <remarks>
            Amount is only updated for buffer table entry with type other than application, unrealized/realized gain/loss or correction of remaining amount
            </remarks>
            <param name="DtldCVLedgEntryBuf">Buffer table for detailed customer/vendor ledger entries to be posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CheckCustMultiplePostingGroups(Detailed CV Ledg# Entry Buffer@):Boolean">
            <summary>
            Checks if multiple customer posting groups exists on customer ledger entries that relate to detailed entries being created.
            </summary>
            <remarks>
            The check is only performed when customer ledger entries are being applied.
            </remarks>
            <param name="DetailedCVLedgEntryBuffer">Buffer table for detailed customer ledger entries to be posted.</param>
            <returns>Returns true if multiple customer posting groups exists for customer ledger entries being applied</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.CheckVendMultiplePostingGroups(Detailed CV Ledg# Entry Buffer@):Boolean">
            <summary>
            Checks if multiple vendor posting groups exists on vendor ledger entries that relate to detailed entries being created.
            </summary>
            <remarks>
            The check is only performed when vendor ledger entries are being applied.
            </remarks>
            <param name="DetailedCVLedgEntryBuffer">Buffer table for detailed vendor ledger entries to be posted.</param>
            <returns>Returns true if multiple vendor posting groups exists for vendor ledger entries being applied</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.RemoveDeferralSchedule(Gen# Journal Line)">
            <summary>
            Removes deferral header and line associated with gen. journal line.
            </summary>
            <remarks>
            Deferrals are only removed if line no. on gen. journal line is specified (not 0).
            </remarks>
            <param name="GenJournalLine">General journal line that is being be posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetFADimAlreadyChecked(Boolean)">
            <summary>
            Sets the new value for global variable FADimAlreadyChecked.
            </summary>
            <remarks>
            If this value is not set (false) the dimensions are checked for restrictions when initializing new g/l entry
            </remarks>
            <param name="NewFADimAlreadyChecked">New value for global variable FADimAlreadyChecked</param>
        </member>
        <member name="M:Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line.SetTempGLEntryBufEntryNo(Integer)">
            <summary>
            Sets entry no. of the global temporary/buffer table TempGLEntryBuf.
            </summary>
            <remarks>
            TempGLEntryBuf is a global temporary/buffer table used to accumulate all the g/l entries that will be posted
            </remarks>
            <param name="NewTempGLEntryBufEntryNo">New entry no.</param>
        </member>
        <member name="M:Interface::Microsoft#Finance#GeneralLedger#Setup#Documents - Retention Period.GetDeletionBlockedAfterDate:Date">
            
             The following methods are to verify whether posted document can be deleted from country law perspective.
            
            <summary>
            Returns the date - Documents with a Posting Date after this date cannot be deleted.
            </summary>
            <returns>Law enforced date after which is not possible to delete posted documents.</returns>
        </member>
        <member name="M:Interface::Microsoft#Finance#GeneralLedger#Setup#Documents - Retention Period.GetDeletionBlockedBeforeDate:Date">
            <summary>
            Returns the date - Documents with a Posting Date before this date cannot be deleted.
            </summary>
            <returns>Law enforced date which prevents deletion of documents posted prior to that date.</returns>
        </member>
        <member name="M:Interface::Microsoft#Finance#GeneralLedger#Setup#Documents - Retention Period.IsDocumentDeletionAllowedByLaw(Date):Boolean">
            <summary>
            Returns whether document deletion is allowed by law condiering the Posting Date.
            </summary>
            <param name="PostingDate">Posting Date of the document</param>
            <returns>True if Posting Date is out of date range defined by law.</returns>
        </member>
        <member name="M:Interface::Microsoft#Finance#GeneralLedger#Setup#Documents - Retention Period.CheckDocumentDeletionAllowedByLaw(Date)">
            <summary>
            Use it to run check on posted documents and block deletion if needed.
            </summary>
            <param name="PostingDate">Posting Date of the document</param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.AssistEdit(Service Header):Boolean">
            <summary>
            Lists all related number series for service header when creating new record.
            </summary>
            <param name="OldServHeader">Service header record that is created. </param>
            <returns>Returns true if number series is assigned successfully, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CreateDim(List of [Dictionary])">
            <summary>
            Generates new dimension set id from provided default dimensions for the current service header.
            </summary>
            <param name="DefaultDimSource">Provided list of default dimensions. </param>
            <remarks>If selected service header is assigned to a contract, it's dimension will be added.
            Additional dimensions will be propagated to service item lines or service lines if they exist. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Triggers validation of shortcut dimension values.
            </summary>
            <param name="FieldNumber">Indicates the number of a field which invoked the method. </param>
            <param name="ShortcutDimCode">Specified value of the shortcut dimension. </param>
            <remarks>Additional changes will be propagated to service item lines or service lines if they exist. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.UpdateCurrencyFactor">
            <summary>
            Updates value of the field 'Currency Factor' for the current service header.
            </summary>
            <remarks>If no exchange rate for selected currency code exists, the system will offer to a user option to manually add missing exchange rate. 
            Changes will be propagated to all existing service lines related to current service header. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.RecreateServLines(Text[100])">
            <summary>
            Recalculates existing service lines related to current service header based on new values from hader. 
            </summary>
            <param name="ChangedFieldName">Indicates the name of a field which invoked the method. </param>
            <remarks>Changing 'Location Code' value won't be possible if reservation entry, item tracking code or order tracking exist. 
            Additional service lines must not be shipped or invoiced. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.UpdateServLinesByFieldNo(Integer,Boolean)">
            <summary>
            Propagates changes for specific fields provided by 'ChangedFieldNo' to service lines related to current service header. 
            </summary>
            <param name="ChangedFieldNo">Indicates the number of fields which invoked the validation. </param>
            <param name="AskQuestion">Indicates if confirmation dialog should appear. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.TestMandatoryFields(Service Line@)">
             <summary>
             Verify if all necessary fields are populated for provided service lines based on service management setup.
             </summary>
             <param name="PassedServLine">Provided service lines. </param>
            <remarks>If 'PassedServLine' is empty, service lines will be filter to the current service header. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.UpdateResponseDateTime">
            <summary>
            Updates values of 'Response Date' and 'Response Time' based on related service item line. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.ServItemLineExists:Boolean">
            <summary>
            Checks if service item line exists for current service header record. 
            </summary>
            <returns>Returns 'true' if service item line exists, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.ServLineExists:Boolean">
            <summary>
            Checks if service line exists for current service header record. 
            </summary>
            <returns>Returns 'true' if service line exists, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.SetHideValidationDialog(Boolean)">
            <summary>
            Sets value to the global 'HideValidationDialog' which indicates if messages or confirmation dialogs should be shown.
            </summary>
            <param name="NewHideValidationDialog">New boolean value for 'HideValidationDialog'. </param>
            <remarks>If set to 'true' no message or confirmation dialog will be shown. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.SetValidatingFromLines(Boolean)">
             <summary>
             Indicates if of values 'Sarting Date', 'Starting Time', 'Finishing Date' and 'Finishing Time' will be taken from related service item line for current service header. 
             Also it controls if field 'Fault Reason Code' should be populated on related service item lines. 
             </summary>
             <param name="NewValidatingFromLines">New value for 'ValidatingFromLines'. </param>
            <remarks>If 'true' transfer won't be done. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.TestNoSeries">
            <summary>
            Test if a setup for services number series is defined in the service management setup record, also if a corresponding general journal template setup exist. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.GetNoSeriesCode:Code[20]">
            <summary>
            Gets a number series code for the current service header record based on 'Document Type'.
            </summary>
            <returns>Returns found number series code. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.UpdateServiceOrderChangeLog(Service Header@)">
            <summary>
            Updates service order change log based on changes done to the current service header record.
            </summary>
            <param name="OldServHeader">Source service header record. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.InitInsert">
            <summary>
            Initialize values for the new service header record.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.InitRecord">
            <summary>
            Initialize values for the new service header record.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.SetShipToAddress(Text[100],Text[50],Text[100],Text[50],Text[30],Code[20],Text[30],Code[10])">
            <summary>
            Sets shipment information from provided parameters for the current service header record. 
            </summary>
            <param name="ShipToName">Provided name information. </param>
            <param name="ShipToName2">Provided name 2 information. </param>
            <param name="ShipToAddress">Provided address information. </param>
            <param name="ShipToAddress2">Provided address 2 information. </param>
            <param name="ShipToCity">Provided city information. </param>
            <param name="ShipToPostCode">Provided post code information. </param>
            <param name="ShipToCounty">Provided county information. </param>
            <param name="ShipToCountryRegionCode">Provided country/region code information. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.ConfirmDeletion:Boolean">
            <summary>
            Runs confirmation dialog to confirm deletion of related service document record. 
            </summary>
            <returns>Returns 'true' if delete is confirmed, otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.ShowDocDim">
            <summary>
            Depicts document dimensions for overview. If changes are made, they will be saved to the current record.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.OpenStatistics">
            <summary>
            Runs page service statistic for current service header record.
            </summary>
            <remarks>Commit will be triggered. </remarks>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.SetShipToCustomerAddressFieldsFromShipToAddr(Ship-to Address)">
            <summary>
            Sets 'Ship-to' address information from 'ShipToAddr'.
            </summary>
            <param name="ShipToAddr">Source ship-to address record. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CopyCustomerFields(Customer)">
            <summary>
            Transfers relevant field values from provided customer to the current service header record.
            </summary>
            <param name="Cust">Source customer record. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.GetFullDocTypeTxt:Text">
            <summary>
            Gets document type for current service header record.
            </summary>
            <returns>Returns one of full names of document types 'Service Quote', 'Service Order', 'Service Invoice', 'Service Credit Memo'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.GetServiceMgtSetup">
            <summary>
            Gets the value for the global variable 'ServiceMgtSetup'.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.IsCreditDocType:Boolean">
            <summary>
            Checks if the current service header field 'Type' value is 'Credit Memo'.
            </summary>
            <returns>Returns 'true' if value of field 'Type' from current service header is 'Credit Memo', otherwise 'false'. </returns>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CopyToGenJournalLine(Gen# Journal Line@)">
            <summary>
            Transfers relevant field values from current service header to the provided general journal line. 
            </summary>
            <param name="GenJournalLine">Destination general journal line. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CopyToGenJournalLineApplyTo(Gen# Journal Line@)">
            <summary>
            Transfers apply-to document information from current service header to the provided general journal line. 
            </summary>
            <param name="GenJournalLine">Destination general journal line. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CopyToGenJournalLinePayment(Gen# Journal Line@)">
            <summary>
            Transfers payment information from current service header to the provided general journal line. 
            </summary>
            <param name="GenJournalLine">Destination general journal line. </param>
        </member>
        <member name="M:Table::Microsoft#Service#Document#Service Header.CopyToItemJnlLine(Item Journal Line@)">
            <summary>
            Transfers relevant field values from current service header to the provided item journal line. 
            </summary>
            <param name="ItemJournalLine">Destination general journal line. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.RunWithCheck(Purchase Header@)">
            <summary>
            Verifies and posts the purchase document.
            As a result, posted documents will be created, dependent on the type of the document, as well as any relevant posting to inventory and finance.
            A Quote cannot be posted - it has to be turned into an order or invoice first, which then can be posted.
            An Order can be received and/or invoiced.
            A Return order can be shipped and/or invoiced.
            An Invoice and a Credit memo can be invoiced.
            Any document, except quote, can be partly shipped/received/invoiced.
            </summary>
            <param name="PurchaseHeader2">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetZeroPurchLineRecID(Purchase Header,RecordId@)">
            <summary>
            Generates a record id for an 'empty' line
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLineRecID">Return value: The record ID of the 'empty' line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CopyToTempLines(Purchase Header,Purchase Line@)">
            <summary>
            Copies all the purchase lines to a temporary table to speed up later processing
            </summary>
            <remarks>
            If the Item Charge exists for an Item in Purchase Line, then Gen. Prod. posting Group of Item Charge is copied to the Purchase Line.
            </remarks>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="TempPurchLine">Return value: The temp table that holds a copy of all purchase lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CommitAndUpdateAnalysisVeiw">
            <summary>
            When doing actual posting (not preview) commits the transaction while updating Analysis and Item Analysis views
            </summary>
            <remarks>
            Data is not committed and analysis views not updated if either posting was called from warehouse document, posting is done as a preview or SuppressCommit was set.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.FillTempLines(Purchase Header,Purchase Line@)">
            <summary>
            Copies all the purchase lines to a temporary table, if they haven't been copied yet, to speed up later processing 
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="TempPurchLine">Return value: The temp table that holds a copy of all purchase lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.ModifyTempLine(Purchase Line@)">
            <summary>
            Updates actual purchase line with information from temporary purchase line
            </summary>
            <param name="TempPurchLineLocal">Return value: The temp table that holds a copy of all purchase lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.RefreshTempLines(Purchase Header,Purchase Line@)">
            <summary>
            Recreates all temporary purchase lines
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="TempPurchLine">Return value: The temp table that holds a copy of all purchase lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.ResetTempLines(Purchase Line@)">
            <summary>
            Removes all filters from temporary purchase lines and copies them from the global temp table
            </summary>
            <param name="TempPurchLineLocal">Return value: The temp table that holds a copy of all purchase lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CalcInvoice(Purchase Header@):Boolean">
            <summary>
            Checks if a new posted invoice should be created for the document
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <returns>True if a new invoice should be created, false otherwise.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CalcInvDiscount(Purchase Header@)">
            <summary>
            Calculates the invoice discount for the document and updates the document and lines accordingly
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.RestorePurchaseHeader(Purchase Header@,Purchase Header)">
            <summary>
            Restores postings flags and posting numbers of the document header to their original values
            </summary>
            <param name="PurchaseHeader">Return value: The purchase header of the document with the restored values.</param>
            <param name="PurchaseHeaderCopy">The purchase header of the document with the original values.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckAndUpdate(Purchase Header@)">
            <summary>
            Checks if document header and lines are valid for posting, updates the document and lines and creates posted documents.
            Prepayment lines are created for documents that are invoiced.
            Unposted document is archived   
            Check for over-receipt is performed
            </summary>
            <remarks>
            Transaction is committed after updating the document header if posting is not in PreviewMode
            Several related tables are locked for update after this procedure.
            DocumentIsReadyToBeChecked is set to true, so that PrepareCheckDocument() is not called again in CheckPurchDocument(). Preparation already happened in RunWithCheck() (parent function).
            </remarks>    
            <param name="PurchHeader">Return Value: The purchase header of the document that is being posted, returned with updated values.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.HandleArchiveUnpostedOrder(Purchase Header@)">
            <summary>
            Wrapper function for archiving purchase document
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckPurchDocument(Purchase Header@)">
            <summary>
            Main function for checking if document header and lines are valid for posting.
            Checks for mandatory fields, posting dates, VAT dates, linked documents, posting restrictions, etc.
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckPurchLines(Purchase Header@)">
            <summary>
            Wrapper function for checking all purchase lines of the document if they are valid for posting.
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckExtDocNo(Purchase Header)">
            <summary>
            Check if external document no. is populated
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PrepareCheckDocument(Purchase Header@)">
            <summary>
            Prepares document for checking
            Retrieves relevant setup records and fills the purchase line temporary table for checking
            </summary>
            <remarks>
            Sets the LogErrorMode and DocumentIsReadyToBeChecked to true
            </remarks>
            <param name="PurchaseHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetLogErrorModePostingFlags(Purchase Header@)">
            <summary>
            Sets posting flags (Receive, Ship, Invoice) based on the document type
            </summary>
            <param name="PurchaseHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PostItemJnlLine(Purchase Header,Purchase Line,Decimal,Decimal,Decimal,Decimal,Integer,Code[20],Tracking Specification):Integer">
            <summary>
            Creates and posts item journal line based on the purchase document information
            If purchase line is associated with the production order item journal line is update with order information
            When advanced warehousing is enabled for the location warehouse journal line is created and posted
            If purchase line is associated with a job, job consumption journal entry is posted
            When invoicing item purchase line, item charge assignments are posted
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="QtyToBeReceived">Purchase Line Quantity to be received</param>
            <param name="QtyToBeReceivedBase">Purchase Line Quantity to be received in base unit of measure</param>
            <param name="QtyToBeInvoiced">Purchase Line Quantity to be invoiced</param>
            <param name="QtyToBeInvoicedBase">Purchase Line Quantity to be invoiced in base unit of measure</param>
            <param name="ItemLedgShptEntryNo">Item Shipment Entry No. to be assigned to the Item Journal Line.</param>
            <param name="ItemChargeNo">Item Charge No. to be assigned to the Item Journal Line.</param>
            <param name="TrackingSpecification">Tracking Specification for the purchase line. This parameter is exposed through events, but isn't directly used in the procedure</param>
            <returns>The Item Shipment Entry No. assigned to the Item Journal Line.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PostDistributeItemCharge(Purchase Header,Purchase Line,Item Ledger Entry@,Decimal,Decimal,Decimal,Decimal,Decimal)">
            <summary>
            Calculates and posts distribution of item charges
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="TempItemLedgEntry">Temporary item ledger entries against which distribution of item charges is being calculated and posted</param>
            <param name="NonDistrQuantity">Quantity to be distributed</param>
            <param name="NonDistrQtyToAssign">Quantity to be distributed and assigned</param>
            <param name="NonDistrAmountToAssign">Amount to be distributed and assigned</param>
            <param name="Sign">Number to multiply the Amount with. Should either be 1 or -1 to change the sign of the operation (positive/negative)</param>
            <param name="IndirectCostPct">Indirect Cost percentage that will be assigned to purchase line field "Indirect Cost %" </param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.TestPurchLine(Purchase Header,Purchase Line)">
            <summary>
            Checks for non-zero quantities (Quantity to Ship/Receive/Invoice) on the purchase line based on the document type
            Check is carried out to ensure General Posting and VAT Postings setups that are used, are not blocked
            </summary>
            <remarks>
            For line related to item tracking specifications are checked
            For line related to charges check is performed to ensure line does not relate to a job
            For line related to fixed assets fixed asset information is checked
            For any other line type check is performed to ensure information related to FA is blank
            If the line relates to a job, job task must be specified
            </remarks>
            <param name="PurchaseHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchaseLine">The purchase line of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckBlockedPostingGroups(Purchase Line)">
            <summary>
            Check is carried out to ensure General Posting and VAT Postings setups that are used on the line, are not blocked
            </summary>
            <remarks>
            The check is only performed for non-empty type lines (i.e. G/L Account, Item, etc.)
            </remarks>
            <param name="PurchaseLine">The purchase line of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdateAssocOrder(Drop Shpt# Post# Buffer@)">
            <summary>
            Wrapper procedure to update associated Drop Shipment Sales Orders
            Shipping information is updated on the associated Sales Order
            Reservation entries of associated Sales Order are updated
            Quantities that relate to shipping are update on associated Sales Order Lines
            </summary>
            <param name="TempDropShptPostBuffer">Temporary record that store associated drop shipments.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckAndUpdateAssocOrderPostingDate(Sales Header@,Date)">
            <summary>
            Update Posting Date on an associated drop shipment Sales Order
            </summary>
            <remarks>
            Document Date is being retained after updating Posting Date 
            </remarks>
            <param name="SalesHeader">Drop Shipment Sales Order related to current purchase document</param>
            <param name="PostingDate">New posting Date</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetCurrency(Code[10])">
            <summary>
            Gets currency rounding precision.
            If currency is not set rounding precision from General Ledger Setup is used.
            </summary>
            <param name="CurrencyCode">Currency Code of the purchase document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.DivideAmount(Purchase Header,Purchase Line@,Option,Decimal,VAT Amount Line@,VAT Amount Line@)">
            <summary>
            Procedure calculates and divides Amounts, VAT amounts and discounts associated with purchase line
            The procedure is intended to make sure amounts, discounts and VAT are correct before posting and calculating sum of all purchase line for the document
            When calculating, prepayments is taken into consideration
            Non-deductible VAT is being calculated
            If Deferral Code is specified on the purchase line deferrals are being calculated
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="QtyType">The QtyType to determine "Inv. Discount Amount". When QtyType = Invoicing "Inv. Disc. Amount to Invoice" is used, for other options the amount is calculated.</param>
            <param name="PurchLineQty">Quantity on the purchase line</param>
            <param name="TempVATAmountLine">Temporary record storing VAT information related to purchase line</param>
            <param name="TempVATAmountLineRemainder">Temporary record storing not yet divided VAT information related to purchase line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.ReverseAmount(Purchase Line@)">
            <summary>
            Reverses all quantities and amounts of the purchase line
            If non-deductible VAT is enabled, related fields are also reversed
            </summary>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.IncrAmount(Purchase Header,Purchase Line,Purchase Line@)">
            <summary>
            Increases all amount fields on the sum purchase line record with current line values
            If non-deductible VAT is enabled, related fields are also increased
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="TotalPurchLine">Return Value: Record to store the sum of all purchase lines related to document being posted</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetPurchLines(Purchase Header@,Purchase Line@,Option)">
            <summary>
            Collects the purchase lines for the specified Purchase Header and stores them in the PurchLine record set.
            Collected lines will have the amounts divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.    
            </summary>
            <remarks>
            Temporary/buffer table TempPurchLineGlobal is populated as part of the process
            </remarks>
            <param name="PurchHeader">The Purchase Header of the document.</param>
            <param name="PurchLine">Return Variable: The PurchLine record set to store the collected sales lines in. This should be a temporary variable as new records will be inserted.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Return Qty. to Ship or Qty. to Receive.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SumPurchLines(Purchase Header@,Option,Purchase Line@,Purchase Line@,Decimal@,Text[30]@)">
            <summary>
            Sums the purchase lines for the specified Purchase Header and stores the results in the NewTotalPurchLine and NewTotalPurchLineLCY record variables.
            The amounts will be divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>    
            it always takes the lines for the specified Purchase Header (doesn't support a parameter for filtered or temp purchase lines).
            </remarks>
            <param name="NewPurchHeader">The Purchase Header of the document.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Return Qty. to Ship or Qty. to Receive.</param>
            <param name="NewTotalPurchLine">Return Variable: The NewTotalPurchLine record to store the summed amounts in.</param>
            <param name="NewTotalPurchLineLCY">Return Variable: The NewTotalPurchLineLCY record to store the summed amounts in LCY in.</param>
            <param name="VATAmount">Return Variable: The total VAT amount.</param>
            <param name="VATAmountText">Return Variable: The text to display for the VAT amount. This will include the VAT rate if the VAT rate is the same for all lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SumPurchLinesTemp(Purchase Header@,Purchase Line@,Option,Purchase Line@,Purchase Line@,Decimal@,Text[30]@)">
            <summary>
            Sums the purchase lines for the specified Purchase Header (within the filters that are already set on OldPurchLine) and stores the results in the NewTotalPurchLine and NewTotalPurchLineLCY record variables.
            The amounts will be divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>
            OldPurchLine can be a temporary variable
            </remarks>
            <param name="PurchHeader">The Purchase Header of the document.</param>
            <param name="OldPurchLine">The Purchase Lines to sum.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Return Qty. to Ship or Qty. to Receive.</param>
            <param name="NewTotalPurchLine">Return Variable: The NewTotalPurchLine record to store the summed amounts in.</param>
            <param name="NewTotalPurchLineLCY">Return Variable: The NewTotalPurchLineLCY record to store the summed amounts in LCY in.</param>
            <param name="VATAmount">Return Variable: The total VAT amount.</param>
            <param name="VATAmountText">Return Variable: The text to display for the VAT amount. This will include the VAT rate if the VAT rate is the same for all lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SumPurchLines2(Purchase Header,Purchase Line@,Purchase Line@,Option,Boolean)">
            <summary>
            Collects the purchase lines for the specified Purchase Header and stores them in the PurchLine record set.
            Collected lines will have the amounts divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.    
            If Invoice Rounding functionality is enabled, rounding line is created
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="NewPurchLine">Record used to store new purchase lines with total quantities</param>
            <param name="OldPurchLine">Record used to calculate VAT Amounts and process already existing lines by looping through records with filters for the document type and number applied. Information is then transferred to NewPurchLine</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Return Qty. to Ship or Qty. to Receive.</param>
            <param name="InsertPurchLine">Determines if the new line should be inserted</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdateBlanketOrderLine(Purchase Line,Boolean,Boolean,Boolean)">
            <summary>
            Updates the associated blanket purchase order line if it still exists.
            </summary>
            <remarks>
            Blanket Purchase document must be for the same vendor as document being posted. In case of vendor mismatch an error is raised
            Quantities on Blanket Purchase Document cannot exceed already received quantity after update. If the quantity is exceeded an error is raised
            </remarks>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="Receive">When set to TRUE "Qty. to Receive" is used for blanket document update</param>
            <param name="Ship">When set to TRUE "Return Qty. to Ship" is used for blanket document update</param>
            <param name="Invoice">When set to TRUE "Qty. to Invoice" is used for blanket document update</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdatePurchOrderChargeAssgnt(Purchase Line,Purchase Line)">
            <summary>
            Updates entries in table "Item Charge Assignment (Purch)" for document applied to purchase line being posted.
            If purchase line is not applied, new Item Charge Assignment (Purch) entry will be created
            </summary>
            <remarks>
            If document line is applied either Purchase Receipt or Return Shipment must exist
            </remarks>
            <param name="PurchOrderInvLine">The purchase line of the document that is being posted.</param>
            <param name="PurchOrderLine">The purchase order (or purchase return order) line associated with the document line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CopyAndCheckItemCharge(Purchase Header)">
            <summary>
            Populates global temporary table TempItemChargeAssgntPurch and checks if charge quantity does not exceed quantity to invoice
            If document is being invoiced in full (no remaining quantity) and not all charges have been assigned, an error is raised
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.WhseHandlingRequiredExternal(Purchase Line):Boolean">
            <summary>
            Checks if the line requires warehouse handling
            </summary>
            <remarks>
            Check is only performed if line has type Item of type Inventory and document is not drop shipment
            If location is not set on the purchase line warehouse setup is used
            </remarks>
            <param name="PurchaseLine">The purchase line of the document that is being posted.</param>
            <returns>Returns boolean if location on the line requires Pick/Receive</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetTrackingQuantities(Purchase Line):Decimal">
            <summary>
            Calculates Quantity to handle in base unit of measure from the reservation entries associated with purchase line
            </summary>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <returns>Quantity to handle in base unit of measure</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PostItemCharge(Purchase Header,Purchase Line@,Integer,Decimal,Decimal,Decimal,Decimal)">
            <summary>
            Creates and posts item journal line. Information from table "Item Charge Assignment (Purch)" is used as a base when creating journal line.
            </summary>
            <remarks>
            If document being processes is either return order or credit memo, reverse amount is posted (reverse of the amount passed as parameter AmountToAssign)
            Journal line will be posted with same dimensions purchase line of the document that is being posted.
            Non-Deductible VAT will be updated
            </remarks>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="ItemEntryNo">Entry No. (from the document or ledger) to which charges should be applied after posting</param>
            <param name="QuantityBase">Quantity (in base unit of measure). This value is used in calculating "Unit Cost"</param>
            <param name="AmountToAssign">Amount to be assigned. This value is used as "Amount" when posting</param>
            <param name="QtyToAssign">Quantity to to be assigned. This will is used in calculating line amount ant discounts.</param>
            <param name="IndirectCostPct">Indirect Cost percentage that will be assigned to purchase line field "Indirect Cost %" </param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetWhseRcptHeader(Warehouse Receipt Header@)">
            <summary>
            Sets global variables WhseRcptHeader and TempWhseRcptHeader
            </summary>
            <remarks>
            Document referenced by variable WhseRcptHeader will be updated during posting
            Document referenced by variable TempWhseRcptHeader will be used as a basis for creating posted receipt
            </remarks>
            <param name="WhseRcptHeader2">Warehouse Receipt Header to be updated when posting</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetWhseShptHeader(Warehouse Shipment Header@)">
            <summary>
            Sets global variables WhseShptHeader and TempWhseShptHeader
            </summary>
            <remarks>
            Document referenced by variable WhseShptHeader will be updated during posting
            Document referenced by variable TempWhseShptHeader will be used as a basis for creating posted shipment
            </remarks>
            <param name="WhseShptHeader2">Warehouse Shipment Header to be updated when posting</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.DecrementPrepmtAmtInvLCY(Purchase Header,Purchase Line,Decimal@,Decimal@)">
            <summary>
             Decrements the prepayment amount invoiced in LCY and the prepayment VAT amount invoiced in LCY for a given purchase line.
            </summary>
            <param name="PurchaseHeader">The Purchase Header of the document being posted.</param>
            <param name="PurchaseLine">The Purchase Line of the document for which the prepayment amount is being calculated.</param>
            <param name="PrepmtAmountInvLCY">The invoiced prepayment amount of a purchase line. The amount passed in gets reduced by the amount to be deducted.</param>
            <param name="PrepmtVATAmountInvLCY">The invoiced prepayment VAT amount of a purchase line. The amount passed in gets reduced by the amount to be deducted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetPrepmtDiffToLineAmount(Purchase Line):Decimal">
            <summary>
            Calculate outstanding line amount deducted by prepaid amount and invoice discounts
            </summary>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <remarks>
            This calculation only applies to purchase lines that have amount prepaid in full
            </remarks>
            <returns>Returns the difference between line amount and amount already prepaid (including discount)</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.ArchiveUnpostedOrder(Purchase Header)">
            <summary>
            Archives unposted purchase document
            </summary>
            <remarks>
            Only Purchase Orders and Purchase Return Orders can be archived
            Archiving must be enabled in Purchase Setup
            When archiving purchase line associated with deferrals, deferral amounts are rounded 
            </remarks>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CreateJobPurchLine(Purchase Line@,Purchase Line,Boolean)">
            <summary>
            Recalculates and updates Direct Unit Cost of the purchase line related to a job
            </summary>
            <remarks>
            PurchLine2 should have a job no. specified
            When purchase document has prices with VAT and VAT Posting Setup on the purchase line is not "Full VAT", field "Direct Unit Cost" is re-calculated. Otherwise it's 0 (zero)
            </remarks>
            <param name="JobPurchLine2">Return Value: Record to store information of purchase line related to a job</param>
            <param name="PurchLine2">The purchase line of the document that is being posted.</param>
            <param name="PricesIncludingVAT">Specifies if the purchase document that is being posted has prices with VAT</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.InitProgressWindow(Purchase Header)">
            <summary>
            Opens progress dialog window and updates it with purhcase document information (document type and number)
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetPreviewMode(Boolean)">
            <summary>
            Sets global variable PreviewMode
            </summary>
            <param name="NewPreviewMode">New value for preview mode</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetCalledBy(Integer)">
            <summary>
            Sets global variable CalledBy
            </summary>
            <remarks>
            CalledBy is used to determine if posting was invoked by another object
            </remarks>
            <param name="NewCalledBy">New value for Called by</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckSalesCertificateOfSupplyStatus(Sales Shipment Header,Sales Shipment Line)">
            <summary>
            When posting drop shipment, purchase document sets Certificate of Supply as required
            </summary>
            <remarks>
            This procedure is only execute when there is quantity on a sales shipment line
            "Certificate of Supply Required" must be set on VAT Posting Setup
            If Certificate of Supply does not exists one is created
            </remarks>
            <param name="SalesShptHeader">Drop shipment sales header related to purchase document</param>
            <param name="SalesShptLine">Drop shipment sales line related to purchase document</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.InsertReceiptLine(Purch# Rcpt# Header,Purchase Line,Decimal)">
            <summary>
            Creates purchase receipt line from purchase line
            </summary>
            <remarks>
            Lines are only created for purchase lines with type Item of type Inventory and there is quantity to receive
            Posted warehouse receipt line is created from warehouse receipt line (if warehouse receipt exists)
            </remarks>
            <param name="PurchRcptHeader">Purchase receipt header related to purchase document being posted.</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
            <param name="CostBaseAmount">Purchase line amount (in base unit of measure) to be used as base for "Item Charge Base Amount" calculation.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PostUpdateInvoiceLine(Purchase Header@)">
            <summary>
            Update the purchase lines that have a non-blank type and receipt created against them
            </summary>
            <remarks>
            Purchase receipt line must exist for purchase document
            Purchase order line must exist for purchase document
            For purchase line of type "Charge (Item)" entries Item Charge Assignment (Purch) are created/updated
            If purchase line is associated with sales order line check if perfomed that invoiced quantity on sales does not exeed invoiced quantity on purhcase. If it's exeeded, an error is raised
            If purchase order line has prepayments, prepayment amounts and VAT is updated
            Outstanding quantities on the purchase order line are updated
            </remarks>
            <param name="PurchaseHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.PostUpdateCreditMemoLine(Purchase Header@)">
            <summary>
            Update the purchase lines that have a non-blank type and return shipment created against them
            </summary>
            <remarks>
            Return shipment line must exist for purchase document
            Purchase return order line must exist for purchase document
            For purchase line of type "Charge (Item)" entries Item Charge Assignment (Purch) are created/updated
            When trying to invoice more than has been returned an error is raised
            Outstanding quantities on the purchase order line are updated
            </remarks>
            <param name="PurchaseHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetPostingFlags(Purchase Header@)">
            <summary>
            Sets global posting flags (Ship/Receive/Invoice) based on the purchase document type
            </summary>
            <remarks>
            If none of the global posting flags (Ship/Receive/Invoice) is set an error is raised.
            </remarks>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.ArchiveSalesOrders(Drop Shpt# Post# Buffer@)">
            <summary>
            Archives drop shipment sales orders that are associated whith the purchase document being posted
            </summary>
            <remarks>
            Sales Orders are retrieved and processed based on the information stored in the variable TempDropShptPostBuffer
            </remarks>
            <param name="TempDropShptPostBuffer">Temporary record that holds associated drop shipment line information.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.SetSuppressCommit(Boolean)">
            <summary>
            Set global variable SuppressCommit
            </summary>
            <remarks>
            When SuppressCommit is set to true the data is not committed when posting
            </remarks>
            <param name="NewSuppressCommit">New value to suppress commit</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.GetGeneralPostingSetup(General Posting Setup@,Purchase Line)">
            <summary>
            Retrieves general posting setup based on the posting groups specified on the line and checks if posting setup is not blocked
            </summary>
            <param name="GenPostingSetup">Return Value: General Posting Setup</param>
            <param name="PurchLine">The purchase line of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.RunCopyAndCheckItemCharge(Purchase Header)">
            <summary>
            Wrapper procedure to populates global temporary table TempItemChargeAssgntPurch and checks if charge quantity does not exceed quantity to invoice
            If document is being invoiced in full (no remaining quantity) and not all charges have been assigned, an error is raised
            </summary>
            <param name="PurchHeader">The purchase header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.CheckAssociatedSalesOrderLine(Purchase Line)">
            <summary>
            Checks if Sales Order line associated with the purchase line does not exeed quantity on the purhcase line. Error is raised if the quantity is exeeded
            </summary>
            <remarks>
            Sales Order line must exist otherwise an error is raised
            </remarks>
            <param name="PurchaseLine">The purchase line of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdateChargeItemPurchaseRcptLineGenProdPostingGroup(Purch# Rcpt# Line@)">
            <summary>
            Checks and updates General Product Posting Group on purchase receipt line from Item Charge
            </summary>
            <remarks>
            General Product Posting Group is only updated for lines that relate to Charge (Item) and General Product Posting Group is empty
            If either Item Charge doesn't exist or General Product Posting Group is empty on Item Charge, an error is raised
            </remarks>
            <param name="PurchRcptLine">Rurchase receipt line to be updated, that relates to purchase document is being posted</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdateChargeItemReturnShptLineGenProdPostingGroup(Return Shipment Line@)">
            <summary>
            Checks and updates General Product Posting Group on return shipment line from Item Charge
            </summary>
            <remarks>
            General Product Posting Group is only updated for lines that relate to Charge (Item) and General Product Posting Group is empty
            If either Item Charge doesn't exist or General Product Posting Group is empty on Item Charge, an error is raised
            </remarks>
            <param name="ReturnShipmentLine">Return shipment line to be updated, that relates to purchase document is being posted</param>
        </member>
        <member name="M:Codeunit::Microsoft#Purchases#Posting#Purch#-Post.UpdateChargeItemPurchaseLineGenProdPostingGroup(Purchase Line@)">
            <summary>
            Checks and updates General Product Posting Group on purchase line from Item Charge
            </summary>
            <remarks>
            General Product Posting Group is only updated for lines that relate to Charge (Item) and General Product Posting Group is empty
            If either Item Charge doesn't exist or General Product Posting Group is empty on Item Charge, an error is raised
            </remarks>
            <param name="PurchaseLine">Purchase line to be updated before posting.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.InitInsert">
            <summary>
            Initializes a new purchase header with a new document number from the number series.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.InitRecord">
            <summary>
            Initializes a new purchase header with default values. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.InitPostingDescription">
            <summary>
            Initializes the posting description with formatted document type and number text for the purchase header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetStandardCodesMgt(Codeunit::Microsoft#Utilities#Standard Codes Mgt#@)">
            <summary>
            Sets global StandardCodesMgtGlobal codeunit to a new instance.
            </summary>
            <param name="StandardCodesMgtNew">The new codeunit instance to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.AssistEdit(Purchase Header):Boolean">
            <summary>
            Opens a page to select related number series for the purchase header and updates the document number with the selected number series.
            </summary>
            <param name="OldPurchHeader">
            Purchase header record before the change. The no series code from this record will be highlighted by default on the open page.
            </param>
            <returns>True if the document number has changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestNoSeries">
            <summary>
            Checks if the number series for different types of purchase documents are filled in the purchase setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetNoSeriesCode:Code[20]">
            <summary>
            Returns the number series code from the purchase setup based on the document type of the purchase header.
            </summary>
            <returns>Number series code.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestNoSeriesDate(Code[20],Code[20],Text[1024],Text[1024])">
            <summary>
            Checks if the number series has to be assigned chronologically after various documents are already posted.
            </summary>
            <param name="No">Posted document number.</param>
            <param name="NoSeriesCode">Number series code to check.</param>
            <param name="NoCapt">Posted document number field caption.</param>
            <param name="NoSeriesCapt">Number series field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ConfirmDeletion:Boolean">
            <summary>
            Opens a confirmation dialog to confirm the deletion of the purchase header.
            This check is to confirm with the user that gaps will happen in the posted documents if the document is deleted.
            </summary>
            <returns>True if purchase header should be deleted, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetVend(Code[20])">
            <summary>
            Updates the global Vend record if it doesn't already match the provided vendor no.
            </summary>
            <param name="VendNo">Vendor number to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetStatusStyleText:Text">
            <summary>
            Returns document status field style expression based on the status of the purchase header. 
            </summary>
            <returns>Status style expression.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.PurchLinesExist:Boolean">
            <summary>
            Checks if the purchase lines exists for purchase header.
            </summary>
            <returns>True if purchase lines exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.RecreatePurchLines(Text[100])">
            <summary>
            Recreates purchase lines for a purchase document when the provided field in the purchase header is changed.
            </summary>
            <remarks>
            Opens confirmation dialog to confirm the deletion of existing purchase lines 
            and then recreates the purchase lines based on the new information in the purchase header.
            It also handles item charge assignments and extended text lines.
            </remarks>
            <param name="ChangedFieldName">Field that is changed.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.StorePurchCommentLineToTemp(Purch# Comment Line@)">
            <summary>
            Inserts existing purchase comment lines into a temporary record.
            </summary>
            <param name="TempPurchCommentLine">Return value: Inserted purchase comment lines.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.RestorePurchCommentLine(Purch# Comment Line@,Integer,Integer)">
            <summary>
            Inserts purchase comment lines for the purchase line of the document from the provided temporary purchase comment line record set.
            </summary>
            <param name="TempPurchCommentLine">Temporary purchase comment line record set to insert.</param>
            <param name="OldDocumentLineNo">Previous purchase line number.</param>
            <param name="NewDocumentLineNo">New purchase line number.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TransferSavedFieldsDropShipment(Purchase Line@,Purchase Line@)">
            <summary>
            Updates certain fields from a source purchase line to a destination purchase line for a drop shipment scenario. 
            It also updates the corresponding sales order line.
            </summary>
            <param name="DestinationPurchaseLine">Purchase line that will be updated.</param>
            <param name="SourcePurchaseLine">Temporary purchase line before the changes.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.MessageIfPurchLinesExist(Text[100])">
            <summary>
            Displays a message if purchase lines exist for the purchase header and the changed field was not updated on the lines.
            </summary>
            <remarks>
            Message states that the user must update the existing purchase lines manually.
            </remarks>
            <param name="ChangedFieldName">Changed purchase header field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.PriceMessageIfPurchLinesExist(Text[100])">
            <summary>
            Displays a message to the user if there are existing purchase lines and a provided field in the purchase header has been changed,
            which might affect the prices and discounts on the purchase lines.
            </summary>
            <remarks>
            The message informs the user that the lines have not been updated and must be updated manually. 
            If the changed field is the order date, it offers to update the order dates of the purchase lines automatically.
            </remarks>
            <param name="ChangedFieldName">Changed purchase header field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateCurrencyFactor">
            <summary>
            Updates currency factor on the purchase header and recreates purchase lines if the currency code has changed.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ConfirmCurrencyFactorUpdate:Boolean">
            <summary>
            Updates currency factor on the purchase header if confirmed by the user.
            </summary>
            <returns>True if the currency factor has been updated, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetHideValidationDialog:Boolean">
            <summary>
            Returns the value of the global flag HideValidationDialog.
            </summary>
            <returns>The value of the global flag HideValidationDialog.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetHideValidationDialog(Boolean)">
            <summary>
            Sets the value of the global flag HideValidationDialog.
            </summary>
            <remarks>
            Global flag HideValidationDialog is used to hide various confirmation/message/other dialogs.
            </remarks>
            <param name="NewHideValidationDialog">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateLocationCode(Code[10])">
            <summary>
            Updates the location code with the specified location code. If it's empty, it takes location code from user setup management.
            Otherwise, validates the location code with the provided value.
            </summary>
            <param name="LocationCode">New location code value.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdatePurchLines(Text[100],Boolean)">
            <summary>
            Updates purchase lines if the provided field in the purchase header is changed and the confirmation is accepted.
            </summary>
            <param name="ChangedFieldName">Changed purchase header field caption.</param>
            <param name="AskQuestion">
            If true, confirmation message is show to update the lines, otherwise confirmation is not shown.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdatePurchLinesByFieldNo(Integer,Boolean)">
            <summary>
            Updates purchase lines if the provided field in the purchase header is changed.
            </summary>
            <param name="ChangedFieldNo">Changed purchase header field number.</param>
            <param name="AskQuestion">
            If true, confirmation message is show to update the lines, otherwise confirmation is not shown.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ConfirmReservationDateConflict">
            <summary>
            Checks if reservation entry exists for the purchase header and opens a confirmation dialog if the user wants to continue.
            These reservations will be canceled if a date conflict is caused by the changed field.
            This is an overload that sets ChangedFieldNo to 0.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ConfirmReservationDateConflict(Integer)">
            <summary>
            Checks if reservation entry exists for the purchase header and opens a confirmation dialog if the user wants to continue.
            These reservations will be canceled if a date conflict is caused by the changed field.
            </summary>
            <param name="ChangedFieldNo">Changed purchase header field number.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CreateDim(List of [Dictionary])">
            <summary>
            Creates dimensions for the purchase header based on the provided default dimension sources.
            </summary>
            <remarks>
            If purchase lines exist and the dimension set has changed the dimensions are updated on the lines.
            </remarks>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CouldDimensionsBeKept:Boolean">
            <summary>
            Determines if the dimensions of a purchase header could be kept the same when certain fields are changed.
            </summary>
            <returns>True if the dimensions could be kept, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Verifies whether the provided shortcut dimension code and value are valid.
            </summary>
            <remarks>
            If purchase lines exist, the dimensions are updated on the lines.
            </remarks>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ReceivedPurchLinesExist:Boolean">
            <summary>
            Determines if purchase lines that are already received exist.
            </summary>
            <returns>True if received purchase lines exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ReturnShipmentExist:Boolean">
            <summary>
            Determines if purchase lines that are already returned exist.
            </summary>
            <returns>True if return shipment exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateShipToAddress">
            <summary>
            Updates the shipping address details of a purchase header based on the location or the company information.
            </summary>
            <remarks>
            If the purchase header is a credit document, the procedure is not executed.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateBuyFromCont(Code[20])">
            <summary>
            Updates the buy-from contact details of a purchase header based on the provided vendor number.
            </summary>
            <remarks>
            If the contact linked to a specific business relation is found, buy-from contact information is updated from the contact.
            </remarks>
            <param name="VendorNo">Vendor number from which details are taken.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CreateInvtPutAwayPick">
            <summary>
            Creates inventory put-away, pick, or movement documents for a released purchase document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ShowDocDim">
            <summary>
            Opens a page for editing dimensions for the purchase header. 
            If dimensions are changed, they're updated on the purchase lines as well.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateAllLineDim(Integer,Integer)">
            <summary>
            Updates the dimensions of purchase lines in a purchase document when the dimensions of the purchase header are changed.
            </summary>
            <param name="NewParentDimSetID">New dimension set ID.</param>
            <param name="OldParentDimSetID">Previous dimension set ID.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetAmountToApply(Code[20],Code[20])">
            <summary>
            Updates amount to apply value of the vendor ledger entry based on the applies-to document number and the vendor number.
            </summary>
            <remarks>
            Procedure is executed after applies-to document number field is validated
            by selecting a vendor entry from apply vendor entries page.
            </remarks>
            <param name="AppliesToDocNo">Applies-to document no. used in filtering the ledger entry.</param>
            <param name="VendorNo">Vendor no. to filter the ledger entry for.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetShipToForSpecOrder">
            <summary>
            Updates the ship-to information of a purchase header based on the associated location.
            If location code is not specified in the purchase header, the information is updated from company information.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetPstdDocLinesToReverse">
            <summary>
            Opens a page with posted document lines that can be reversed. After the user selects the lines, 
            they're copied to the current document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetSecurityFilterOnRespCenter">
            <summary>
            Filters the purchase header for responsibility center set in the user setup or company information. 
            The filter is set in filter group 2 and is hidden from the user.
            </summary>
            <remarks>
            Responsibility filter is set from user setup purchase responsibility control filter field if this field is filled, 
            otherwise it is set from the company information responsibility center field.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CalcInvDiscForHeader">
            <summary>
            Calculates invoice discount for a purchase header if calculate invoice discount is enabled in the purchase setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.AddShipToAddress(Sales Header,Boolean)">
            <summary>
            Updates ship-to information of a purchase header based on the provided sales header. 
            If purchase lines exist, it compares the shipping information between the purchase and sales header
            and throws an error in case of a mismatch.
            </summary>
            <param name="SalesHeader">Sales header from which information is updated.</param>
            <param name="ShowError">If true the procedure is executed and errors are shown.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.DropShptOrderExists(Sales Header):Boolean">
            <summary>
            Determines if the drop shipment order exists.
            </summary>
            <param name="SalesHeader">Sales header record to check.</param>
            <returns>True if drop shipment order exist, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SpecialOrderExists(Sales Header):Boolean">
            <summary>
            Determines if the special order exist.
            </summary>
            <param name="SalesHeader">Sales header record to check.</param>
            <returns>True if special order exist, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.QtyToReceiveIsZero:Boolean">
            <summary>
            Determines if there's anything left to receive for the document.
            </summary>
            <returns>True if all lines in a purchase document have quantity to receive 0, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.IsApprovedForPosting:Boolean">
            <summary>
            Determines if a purchase document is approved for posting. 
            For orders, it additionally checks if the payment and prepayment conditions are met.
            </summary>
            <returns>True if a purchase document is approved for posting, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.IsApprovedForPostingBatch:Boolean">
            <summary>
            Determines if a purchase document is approved for posting. 
            It checks if the prepayment and payment conditions are met.
            </summary>
            <returns>True if a purchase document is approved for posting, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.IsTotalValid:Boolean">
            <summary>
            Determines if the total amount including VAT of an incoming document matches the total amount including VAT
            of the purchase document.
            </summary>
            <remarks>
            Used to check if the invoice can be posted.
            </remarks>
            <returns>True if the total matches, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SendToPosting(Integer):Boolean">
            <summary>
            Posts a purchase document by running the provided codeunit if the document is approved for posting.
            </summary>
            <remarks>
            The transaction is committed before the posting codeunit is run.
            After the posting codeunit is executed any errors that occur during the posting operation are shown.
            </remarks>
            <param name="PostingCodeunitID">Posting codeunit id that needs to be executed.</param>
            <returns>True if the document was successfully posted, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CancelBackgroundPosting">
            <summary>
            Cancels a background posting job for a purchase document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.AddSpecialOrderToAddress(Sales Header@,Boolean)">
            <summary>
            Adds the shipping information from a special order. If lines exist, it compares the current shipping information 
            with the information on the special order and throws an error if there's a mismatch.
            </summary>
            <param name="SalesHeader">Sales header to which ship-to information is compared.</param>
            <param name="ShowError">If true the procedure is executed and errors are shown.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.InvoicedLineExists:Boolean">
            <summary>
            Returns true or false whether any line has "Quantity Invoiced" not 0.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CreateDimSetForPrepmtAccDefaultDim">
            <summary>
            Creates a dimension set for the purchase lines that have a prepayment amount. 
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TransferItemChargeAssgntPurchToTemp(Item Charge Assignment (Purch)@,Item Charge Assignment (Purch)@)">
            <summary>
            Transfers item charge assignments to the temporary record set and deletes them from the original record.
            </summary>
            <param name="ItemChargeAssgntPurch">Item charge assignment record set to transfer.</param>
            <param name="TempItemChargeAssgntPurch">Return value: Temporary item charge assignment record set to transfer to.</param> 
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.OpenPurchaseOrderStatistics">
            <summary>
            Open statistics page for purchase orders.
            </summary>
            <remarks>
            Commit is executed before opening the statistics page.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.OpenDocumentStatistics">
            <summary>
            Open statistics page for purchase documents.
            </summary>
            <remarks>
            Commit is executed before opening the statistics page.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.PrepareOpeningDocumentStatistics">
            <summary>
            Prepares the opening document statistics for a purchase document. It checks the user's permissions, 
            calculates the invoice discount, creates a dimension set for order documents, and commits any changes made.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ShowDocumentStatisticsPage">
            <summary>
            Opens a purchase document statistics page based on the document type. 
            After the page is closed, the recalculate invoice discount field is set to false on all purchase document lines.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CheckPurchasePostRestrictions">
            <summary>
            Triggers the OnCheckPurchasePostRestrictions event to check any additional restrictions before releasing a purchase document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CheckPurchaseReleaseRestrictions">
            <summary>
            Checks any restrictions before releasing a purchase document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetStatus(Option)">
            <summary>
            Sets the status of a purchase document.
            </summary>
            <param name="NewStatus">New status to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TriggerOnAfterPostPurchaseDoc(Codeunit::Microsoft#Finance#GeneralLedger#Posting#Gen# Jnl#-Post Line@,Code[20],Code[20],Code[20],Code[20])">
            <summary>
            Triggers an event after a purchase document is posted.
            </summary>
            <param name="GenJnlPostLine">Gen journal post line codeunit that was used to post the document.</param>
            <param name="PurchRcpHdrNo">Posted purchase receipt document no.</param>
            <param name="RetShptHdrNo">Posted return shipment document no.</param>
            <param name="PurchInvHdrNo">Posted purchase invoice document no.</param>
            <param name="PurchCrMemoHdrNo">Posted purchase credit memo document no.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.DeferralHeadersExist:Boolean">
            <summary>
            Determines if deferral header exists for a purchase document.
            </summary>
            <returns>True if deferral header exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetUpdatedFieldCaption(Integer):Text">
            <summary>
            Returns field caption for the provided field number.
            </summary>
            <param name="UpdatingFieldNo">Field number that was updated.</param>
            <returns>Field caption for the provided UpdatingFieldNo field number.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.IsCreditDocType:Boolean">
            <summary>
            Determines if the document type is a credit document.
            </summary>
            <returns>True if the document type is return order or credit memo, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetBuyFromVendorFromFilter">
            <summary>
            Updates the buy-from vendor no. of a purchase header based on a single-value filter applied to the buy-from vendor no. field.
            </summary>
            <remarks>
            Single-value filter is retrieved from the current filter group or filter group 2. 
            If it exists, it's used to update the buy-from vendor no.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CopyBuyFromVendorFilter">
            <summary>
            Moves the filter on buy-from vendor no. from the current filter group to filter group 2.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.HasBuyFromAddress:Boolean">
            <summary>
            Determines if purchase header has buy-from information.
            </summary>
            <returns>True if purchase header has buy-from information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.HasShipToAddress:Boolean">
            <summary>
            Determines if purchase header has ship-to information.
            </summary>
            <returns>True if purchase header has ship-to information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.HasPayToAddress:Boolean">
            <summary>
            Determines if purchase header has pay-to information.
            </summary>
            <returns>True if purchase header has pay-to information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.HasItemChargeAssignment:Boolean">
            <summary>
            Determines if the purchase header has any item charge assignments.
            </summary>
            <returns>True if item charge assignments exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetShipToAddress(Text[100],Text[50],Text[100],Text[50],Text[30],Code[20],Text[30],Code[10])">
            <summary>
            Sets the ship-to information for a purchase document from the provided parameters.
            </summary>
            <param name="ShipToName">Ship-to name to set.</param>
            <param name="ShipToName2">Ship-to name 2 to set.</param>
            <param name="ShipToAddress">Ship-to address to set.</param>
            <param name="ShipToAddress2">Ship-to address 2 to set.</param>
            <param name="ShipToCity">Ship-to city to set.</param>
            <param name="ShipToPostCode">Ship-to post code to set.</param>
            <param name="ShipToCounty">Ship-to county to set.</param>
            <param name="ShipToCountryRegionCode">Ship-to country/region code to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ShouldSearchForVendorByName(Code[20]):Boolean">
            <summary>
            Determines whether a search for a vendor should be performed by name for the provided vendor no.
            </summary>
            <param name="VendorNo">Vendor number to check.</param>
            <returns>True if vendor should be searched by name, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CopyBuyFromAddressToPayToAddress">
            <summary>
            Copies the buy-from information to pay-to information for a purchase document if the pay-to vendor no. 
            is the same as the buy-from vendor no.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ConfirmCloseUnposted:Boolean">
            <summary>
            Raises a dialog to confirm closing a page if unposted lines exist.
            </summary>
            <returns>True if page should be closed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.InitFromPurchHeader(Purchase Header)">
            <summary>
            Initializes a purchase header from the provided purchase header.
            </summary>
            <param name="SourcePurchHeader">Purchase header to copy information from.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.BuyfromContactLookup:Boolean">
            <summary>
            Opens a contact lookup page and validates the buy-from contact no. field with the selected contact.
            </summary>
            <returns>True if the contact was validated, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SendRecords">
            <summary>
            Sends selected purchase document reports to the vendors. Before this procedure is called, 
            purchase documents are selected on the page and then selection filter is used to filter the selected documents.
            </summary>
            <remarks>
            Checks if the document has mixed drop shipment, selects a report from report selection based on the document type,
            shows profile selection window and then send the selected reports to the vendors.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.PrintRecords(Boolean)">
            <summary>
            Prints selected purchase document reports. Before this procedure is called, 
            purchase documents are selected on the page and then selection filter is used to filter the selected documents.
            </summary>
            <param name="ShowRequestForm">
            Request window for the report will be displayed if true, otherwise the default settings are used.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SendProfile(Document Sending Profile@)">
            <summary>
            Sends a purchase order document report with a specified document sending profile.
            </summary>
            <remarks>
            If the document has mixed drop shipments, error message is raised.
            </remarks>
            <param name="DocumentSendingProfile">
            Document sending profile that will be used to send the selected report to the vendor.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetUserSetupPurchaserCode:Code[20]">
            <summary>
            Retrieves the salesperson/purchaser code of the current user from the user setup.
            </summary>
            <returns>Salesperson/purchaser code of the current user from the user setup.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.OnAfterValidateBuyFromVendorNo(Purchase Header@,Purchase Header@)">
            <summary>
            Removes the filter from buy-from vendor no. if the number has changed.
            Updates remittance address for the record if the default remit address for the vendor exists.
            </summary>
            <param name="PurchaseHeader">Purchase header record after validation.</param>
            <param name="xPurchaseHeader">Purchase header record before validation.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SelectDefaultRemitAddress(Purchase Header@)">
            <summary>
            Sets the default remittance address on the provided purchase header.
            </summary>
            <param name="PurchaseHeader">Return value: Purchase header to update.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.BatchConfirmUpdateDeferralDate(Option@,Boolean,Date,Boolean,Date)">
            <summary>
            Raises a confirmation to update the deferral schedules on the lines to reflect the changed dates.
            If user confirms the update, the purchase lines are updated.
            </summary>
            <param name="BatchConfirm"></param>
            <param name="ReplacePostingDate">If true, the purchase header's posting date will be replaced with the specified PostingDateReq.</param>
            <param name="PostingDateReq">Posting date to replace.</param>
            <param name="ReplaceVATDate"></param>
            <param name="VATDateReq">Vat reporting date to replace.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetAllowSelectNoSeries">
            <summary>
            Sets the global flag SelectNoSeriesAllowed to true.
            </summary>
            <remarks>
            The global flag is used to determine if the lookup for the number series can been shown.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.RecallModifyAddressNotification(Guid)">
            <summary>
            Recalls a sent notification for the provided notification GUID.
            </summary>
            <remarks>
            If it is a credit document or if notification isn't enabled, it won't recall the notification.
            </remarks>
            <param name="NotificationID">GUID of the notification to recall.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetModifyVendorAddressNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns the user if the buy-from address on purchase documents is different 
            from the vendor's existing address.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetModifyPayToVendorAddressNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if the pay-to address on purchase documents is different 
            from the vendor's existing address.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetShowExternalDocAlreadyExistNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if purchase document with same external document number already exists.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetLineInvoiceDiscountResetNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if the invoice discount amount for the purchase line record has been reset.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetWarnWhenZeroQuantityPurchaseLinePosting:Guid">
            <summary>
            Returns a GUID for a notification that warns before posting lines on purchase documents where quantity is 0.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetModifyVendorAddressNotificationDefaultState">
            <summary>
            Inserts the default notification to warn if the buy-from address on purchase documents is different 
            from the vendor's existing address.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetModifyPayToVendorAddressNotificationDefaultState">
            <summary>
            Inserts the default notification to warn if pay-to address on purchase documents is different 
            from the vendor's existing address.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetShowExternalDocAlreadyExistNotificationDefaultState(Boolean)">
            <summary>
            Inserts the default notification to warn if purchase document with same external document number already exists.
            </summary>
            <param name="DefaultState">If true, the notification is enabled.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.DontNotifyCurrentUserAgain(Guid)">
            <summary>
            Disables a specified notification for the current user.
            </summary>
            <param name="NotificationID">GUID of the notification that needs to be disabled.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetWarnZeroQuantityPurchasePosting">
            <summary>
            Inserts the default notification to warn before posting lines on purchase documents where quantity is 0.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.FindPostedDocumentWithSameExternalDocNo(Vendor Ledger Entry@,Code[35]):Boolean">
            <summary>
            Finds a posted purchase document for the provided external document no.
            </summary>
            <param name="VendorLedgerEntry">Return value: Retrieved vendor ledger entry record.</param>
            <param name="ExternalDocumentNo">Document no. to find the posted document for.</param>
            <returns>True if a document exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.FilterPartialReceived">
            <summary>
            Applies the filter for the headers that have received lines.
            </summary>
            <remarks>
            The purchase order is marked if it has any lines with a quantity received not equal to zero.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.FilterPartialInvoiced">
            <summary>
            Applies the filter for the headers that have partially invoiced lines.
            </summary>
            <remarks>
            The purchase order is marked if it has any lines with a quantity invoiced not equal to zero.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.IsDocAlreadyExistNotificationEnabled:Boolean">
            <summary>
            Determines if the notification which warns if purchase document with same external document number 
            already exists is enabled.
            </summary>
            <returns>True if the notification is enabled, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ShipToAddressEqualsCompanyShipToAddress:Boolean">
            <summary>
            Determines if the ship-to information in the purchase header record matches the ship-to information 
            in the company information.
            </summary>
            <returns>True if ship-to information is equal, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.BuyFromAddressEqualsShipToAddress:Boolean">
            <summary>
            Determines if ship-to information is equal to the buy-from information in the purchase header record.
            </summary>
            <returns>True if the information is equal, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.BuyFromAddressEqualsPayToAddress:Boolean">
            <summary>
            Determines if buy-from information is equal to the pay-to information in the purchase header record.
            </summary>
            <returns>True if the information is equal, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ValidatePurchaserOnPurchHeader(Purchase Header,Boolean,Boolean)">
            <summary>
            Checks if the document can be created/posted depending on the privacy blocked of the purchaser.
            </summary>
            <param name="PurchaseHeader2">Purchase header on which purchaser code has been changed.</param>
            <param name="IsTransaction">Determines if the check is completed during a write transaction.</param>
            <param name="IsPostAction">Determines if the check is completed during the posting.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CanCalculateTax:Boolean">
            <summary>
            Returns the value of the global variable SkipTaxCalculation.
            </summary>
            <returns>The value of the global variable SkipTaxCalculation.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetSkipTaxCalulation(Boolean)">
            <summary>
            Sets the value of the global variable SkipTaxCalculation.
            </summary>
            <param name="Skip">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.ValidateEmptySellToCustomerAndLocation">
            <summary>
            Resets the sell-to customer to an empty value and updates the location.
            from the global Vend record on the purchase header.
            </summary>
            <remarks>
            Updates the global Vend with buy-from vendor no. of the purchase header. 
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CheckForBlockedLines">
            <summary>
            Checks if there are any blocked items or resources in the purchase lines of the purchase header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestStatusIsNotPendingApproval:Boolean">
            <summary>
            Determines if purchase document status is not pending approval.
            </summary>
            <returns>True if status is not pending approval, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestStatusIsNotPendingPrepayment:Boolean">
            <summary>
            Determines if purchase document status is not pending prepayment.
            </summary>
            <returns>True if status is not pending prepayment, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestStatusIsNotReleased:Boolean">
            <summary>
            Determines if purchase document status is not released.
            </summary>
            <returns>True if status is not released, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestStatusOpen">
            <summary>
            Checks if purchase document status is open. If it is not, an error is raised.
            </summary>
            <remakrs>
            If global flag StatusCheckSuspended is set to true, the procedure is not executed.
            </remakrs>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SuspendStatusCheck(Boolean)">
            <summary>
            Sets the value of the global flag StatusCheckSuspended.
            </summary>
            <remarks>
            The global flag is used to suspend the check if the document status is open.
            </remarks>
            <param name="Suspend">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.UpdateInboundWhseHandlingTime">
            <summary>
            Updates the inbound warehouse handling time of the purchase header.
            </summary>
            <remarks>
            If the purchase header's location code is empty, 
            the inbound warehouse handling time is updated using the handling time from inventory setup.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetFullDocTypeTxt:Text">
            <summary>
            Returns the document type caption.
            </summary>
            <returns>Full text description of the document type field.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CopyDocument">
            <summary>
            Runs the copy purchase document report for the purchase header.
            </summary>
            <remarks>
            The report creates new purchase documents based on the existing one.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.LookupBuyFromVendorName(Text@):Boolean">
            <summary>
            Opens vendor lookup page to select a vendor. Buy-from vendor name field is updated with the selected vendor name.
            </summary>
            <param name="VendorName">Return value: Selected vendor name.</param>
            <returns>True if vendor is selected, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.LookupPayToVendorName(Text@):Boolean">
            <summary>
            Opens vendor lookup page to select a vendor. Pay-to name field is updated with the selected vendor name.
            </summary> 
            <param name="VendorName">Return value: Selected vendor name.</param>
            <returns>True if vendor is selected, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.RecreateTempPurchLines(Purchase Line@)">
            <summary>
            Collects all purchase lines of the document into a temporary record set.
            </summary>
            <remarks>
            If the purchase line's nonstock flag is true, it's set to false upon recreation on the actual line.
            </remarks>
            <param name="TempPurchLine">Return value: Created temporary purchase line record set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.DeletePurchCommentLines">
            <summary>
            Deletes all purchase comment lines.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.DeletePurchLines(Purchase Line@)">
            <summary>
            Delets all lines in the provided record set.
            </summary>
            <remarks>
            This procedure uses DeleteAll, if the record set is not filtered correctly, all purchase lines will be deleted.
            </remarks>
            <param name="PurchLine">Filtered purchase line record set to delete the lines from.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetCalledFromWhseDoc:Boolean">
            <summary>
            Returns the value of the global flag CalledFromWhseDoc.
            </summary>
            <returns>The value of the global flag CalledFromWhseDoc.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetCalledFromWhseDoc(Boolean)">
            <summary>
            Sets the value of the global flag CalledFromWhseDoc.
            </summary>
            <param name="Suspend">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.SetReplaceDocumentDate">
            <summary>
            Sets the value of the global flag ReplaceDocumentDate to true.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.GetUseDate:Date">
            <summary>
            Returns the posting date from purchase header if it's available, otherwise it returns the current work date.
            </summary>
            <returns>Document's posting date or work date.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the document from default dimensions for the related entry specified in the field.
            </summary>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.PurchaseLinesEditable:Boolean">
            <summary>
            Determines if the purchase lines of the purchase header are editable 
            based on whether a buy-from vendor no. has been specified.
            </summary>
            <returns>True if purchase lines are editable, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Header.TestPurchasePrepayment">
            <summary>
            Checks if there are unpaid prepayment invoices for the purchase document and raise an error if there are.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitOutstanding">
            <summary>
            Initializes outstanding quantities and amounts of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitOutstandingAmount">
            <summary>
            Initializes the outstanding amounts of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitQtyToReceive">
            <summary>
            Initializes the quantity to receive and quantity to invoice of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitQtyToShip">
            <summary>
            Initializes the return quantity to ship and quantity to invoice of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitQtyToInvoice">
            <summary>
            Initializes the quantity to invoice and vat of the purchase line.
            Calculates invoice disc. amount to invoice.
            </summary>
            <remarks>
            If document type is not an invoice, prepayment amount to deduct is calculated.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.MaxQtyToInvoice:Decimal">
            <summary>
            Calculates maximum quantity that can be invoiced for the purchase line.
            </summary>
            <returns>Maximum quantity that can be invoiced.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.MaxQtyToInvoiceBase:Decimal">
            <summary>
            Calculates maximum quantity (base) that can be invoiced for the purchase line.
            </summary>
            <returns>Maximum quantity (base) that can be invoiced.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.MaxQtyToReceiveBase(Decimal):Decimal">
            <summary>
            Returns the maximum quantity (base) that can be received for a given quantity.
            </summary>
            <param name="QtyToReceiveBase">Quantity (base).</param>
            <returns>The maximum quantity (base) thant can be received.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CalcInvDiscToInvoice">
            <summary>
            Calculates and sets the invoices discount amount to invoice and updates vat.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CalcLineAmount:Decimal">
            <summary>
            Calculates the line amount minus inv. discount amount for the purchase line.
            </summary>
            <returns>Line amount minus inv. discount amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetPurchHeader(Purchase Header)">
            <summary>
            Assigns given purchase header to the global variable and initializes the currency variable.
            </summary>
            <param name="NewPurchHeader">Purchase header to be set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetPurchHeader:Purchase Header">
            <summary>
            Retrieves the global purchase header for the current purchase line.
            </summary>
            <returns>Purchase header of the current purchase line.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetPurchHeader(Purchase Header@,Currency@)">
            <summary>
            Gets the purchase header and currency for the current purchase line.
            </summary>
            <param name="OutPurchHeader">Return value: Purchase header of the purchase line.</param>
            <param name="OutCurrency">Return value: Currency of the purchase line.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetItem:Item">
            <summary>
            Returns the item record.
            </summary>
            <returns>The item record.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetRemainingQty(Decimal@,Decimal@)">
            <summary>
            Returns remaining unreserved quantity and quantity (base) of the purchase line.
            </summary>
            <param name="RemainingQty">Return value: Remaining unreserved quantity.</param>
            <param name="RemainingQtyBase">Return value: Remaining unreserved quantity (base).</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetReservationQty(Decimal@,Decimal@,Decimal@,Decimal@):Decimal">
            <summary>
            Returns reservation quantities.
            </summary>
            <param name="QtyReserved">Return value: Reserved quantity.</param>
            <param name="QtyReservedBase">Return value: Reserved quantity (base).</param>
            <param name="QtyToReserve">Return value: Quantity to reserve.</param>
            <param name="QtyToReserveBase">Return value: Quantity to reserve (base).</param>
            <returns>Qty per unit of measure.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetSourceCaption:Text">
            <summary>
            Returns a text that consists of the document type, document no. and line number separated by a space.
            </summary>
            <returns>Formated text.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetReservationEntry(Reservation Entry@)">
            <summary>
            Initializes the reservation entries from the purchase line.
            </summary>
            <param name="ReservEntry">Return value: Initialized reservation entry.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetReservationFilters(Reservation Entry@)">
            <summary>
            Filters reservation entry from the purchase line.
            </summary>
            <param name="ReservEntry">Return value: Filtered reservation entry.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ReservEntryExist:Boolean">
            <summary>
            Checks if reservation entry exists for the purchase line.
            </summary>
            <returns>True if reservation entry exists, otherwise false</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetLineAmountExclVAT:Decimal">
            <summary>
            Returns line amount excluding VAT for the purchase line.
            </summary>
            <remarks>
            If the prices includes VAT in its prices, it calculates the line amount excluding VAT.
            </remarks>
            <returns>Line amount excluding VAT.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetLineAmountInclVAT:Decimal">
            <summary>
            Returns line amount including VAT for the purchase line.
            </summary>
            <remarks>
            If the prices does not include VAT in its prices, it calculates the line amount including VAT.
            </remarks>
            <returns>Line amount including VAT.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetHasBeenShown">
            <summary>
            Sets the global flag HasBeenShown to true.
            </summary>
            <remarks>
            The global flag is used to determine if the message which states that the order date is earlier than the work date has been shown.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsPriceCalcCalledByField(Integer):Boolean">
            <summary>
            Checks if the procedure has been called from the field that was previously planned.
            </summary>
            <param name="CurrPriceFieldNo">Field that called the price calculation.</param>
            <returns>True if the if the calculation is triggered by the planned field, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.PlanPriceCalcByField(Integer)">
            <summary>
            Sets the field that initiates the price calculation if it is not already set.
            </summary>
            <param name="CurrPriceFieldNo">Field number that cause price calculation.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ClearFieldCausedPriceCalculation">
            <summary>
            Clears the field number that is planned to initiate the price calculation.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateDirectUnitCost(Integer)">
            <summary>
            Updates the direct unit cost of the purchase line.
            </summary>
            <param name="CalledByFieldNo">Field number that called direct unit cost calculation.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetPriceCalculationHandler(Purchase Header,Interface::Microsoft#Pricing#Calculation#Price Calculation@)">
            <summary>
            Gets price calculation interface implementation for the purchase line.
            </summary>
            <param name="PurchaseHeader">Purchase header that is used to get price calculation implementation.</param>
            <param name="PriceCalculation">Return value: Price calculation interface inplementation.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetLineWithPrice(Interface::Microsoft#Pricing#PriceList#Line With Price@)">
            <summary>
            Gets the default or overridden line with price interface implementation.
            </summary>
            <param name="LineWithPrice">Return value: line with price implementation.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CountDiscount(Boolean):Integer">
            <summary>
            Wrapper for price calculation method CountDiscount.
            Returns the count of price list lines containing discounts suitable for the purchase line.
            </summary>
            <param name="ShowAll">If true, it expands the filter criteria applied to the price list line.</param>
            <returns>The number of price list lines with discounts.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CountPrice(Boolean):Integer">
            <summary>
            Wrapper for price calculation method CountPrice.
            Returns the count of price list lines containing prices suitable for the purchase line.
            </summary>
            <param name="ShowAll">If true, it expands the filter criteria applied to the price list line.</param>
            <returns>The number of price list lines with prices.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.DiscountExists(Boolean):Boolean">
            <summary>
            Wrapper for price calculation method IsDiscountExists.
            Returns true if there are any price list lines containing discounts that are applicable to the purchase line.
            </summary>
            <param name="ShowAll">If true, it expands the filter criteria applied to the price list line.</param>
            <returns>Returns true if at least one price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.PriceExists(Boolean):Boolean">
            <summary>
            Wrapper for price calculation method IsPriceExists.
            Returns true if there are any price list lines containing prices that are applicable to the purchase line.
            </summary>
            <param name="ShowAll">If true, it expands the filter criteria applied to the price list line.</param>
            <returns>Returns true if at least one price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.PickDiscount">
            <summary>
            Wrapper for price calculation method PickDiscount.
            Opens a price list selection to choose discounts suitable for the purchase line.
            The discounts are assigned to the purchase line after selection.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.PickPrice">
            <summary>
            Wrapper for price calculation method PickPrice.
            Opens a price list selection to choose prices suitable for the purchase line.
            The prices are assigned to the purchase line after selection.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateReferencePriceAndDiscount">
            <summary>
            Updates the purchase line's price and discount based on the item reference number.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateUnitCost">
            <summary>
            Updates the unit cost of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateAmounts">
            <summary>
            Updates line, vat, prepayment and deferral amounts of the purchase line.
            Initializes outstanding amounts.
            </summary>
            <remarks>
            If purchase line type is charge (item), it updates item charge assignment.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateVATAmounts">
            <summary>
            Updates amounts, vat amounts and vat procentage of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdatePrepmtSetupFields">
            <summary>
            Checks prepayment setups and assigns prepayment fields to the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateSalesCost">
            <summary>
            Updates unit costs of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateUOMQtyPerStockQty">
            <summary>
            Updates unit cost, unit price and direct unit cost for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SelectMultipleItems">
            <summary>
            Opens a selection of items page. After that, selected items are added to purchase lines.
            </summary>
            <remarks>
            If document type is not return order or credit memo, selection shows only items that have purchasing blocked field set to false. 
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.AddItems(Text)">
            <summary>
            Adds items to the purchase lines based on a selection filter.
            </summary>
            <param name="SelectionFilter">Filter text of the selected items.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.AddItem(Purchase Line@,Code[20])">
            <summary>
            Inserts an item to the purchase line.
            </summary>
            <remarks>
            If purchase line has automatic ext. texts enabled, it inserts extended texts to purchase line.
            </remarks>
            <param name="PurchLine">Return value: Inserted purchase line.</param>
            <param name="ItemNo">Item number to be inserted.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitNewLine(Purchase Line@)">
            <summary>
            Initializes a new purchase line based on the current purchase line.
            </summary>
            <param name="NewPurchLine">Return value: Initialized purchase line.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowReservation">
            <summary>
            Opens the reservation page for an item in a purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowReservationEntries(Boolean)">
            <summary>
            Opens a reservation entries page for the current purchase line.
            </summary>
            <param name="Modal">If true, execution is halted until the page is closed.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetDate:Date">
            <summary>
            Returns the posting date from the related purchase header if it's available, otherwise it returns the current work date.
            </summary>
            <returns>Document's posting date or work date.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.Signed(Decimal):Decimal">
            <summary>
            Returns a signed decimal value based on the document type of the purchase line.
            </summary>
            <param name="Value">The value to sign.</param>
            <returns>Signed value.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.BlanketOrderLookup">
            <summary>
            Opens a page to select blanket order line for the current purchase line.
            Selected blanket order line information is assigned to the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.BlockDynamicTracking(Boolean)">
            <summary>
            Sets TrackingBlocked flag to the given value. Also sets global Blocked flag of purchase line reserve codeunit.
            </summary>
            <remarks>
            This flag is used to disallow changes to existing reservation entries for the purchase line.
            </remarks>
            <param name="SetBlock">Flag value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowDimensions:Boolean">
            <summary>
            Opens a page for editing dimensions for the purchase line. 
            Upon closing the page, it updates the dimensions on the purcahse line.
            </summary>
            <returns>True if the dimensions were changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.OpenItemTrackingLines">
            <summary>
            Opens a page for editing item tracking lines for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CreateDim(List of [Dictionary])">
            <summary>
            Creates dimensions for the purchase line based on the provided default dimension sources.
            </summary>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Verifies whether the provided shortcut dimension code and value are valid.
            </summary>
            <remarks>
            If the dimensions of a received or shipped item have changed in a purchase line, the confirmation is shown.
            </remarks>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.LookupShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Opens a page for selecting a dimension code, then assigns the selected value to the presented number of the shortcut dimension. 
            </summary>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Return value: Value of the selected shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowShortcutDimCode(Code[20][]@)">
            <summary>
            Gets an array of shortcut dimension values from the dimensions of the purchase line.
            </summary>
            <param name="ShortcutDimCode">Return value: The array of shortcut dimension values.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowItemChargeAssgnt">
            <summary>
            Opens item charge assignment page, where receipt lines can be selected and additional cost is passed to the selected items.
            </summary>
            <remarks>
            If the purchase line type is not an item (charge), a message is displayed, and the procedure is ended.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateItemChargeAssgnt">
            <summary>
            Updates item chage assignment amounts and unit cost for the pruchase line.
            </summary>
            <remarks>
            If the document type is a blanket order, the procedure is ended.
            If the quantity invoiced is greater than the sum of the quantity assigned and the quantity to assign, an error message is displayed.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.DeleteItemChargeAssignment(Enum::Microsoft#Purchases#Document#Purchase Document Type,Code[20],Integer)">
            <summary>
            Deletes item charge assignments that are applied to purchase document line.
            The provided parameters filter out item charge assignments to delete.
            </summary>
            <param name="DocType">Purchase document type.</param>
            <param name="DocNo">Purchase document no.</param>
            <param name="DocLineNo">Purchase document line no.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.DeleteChargeChargeAssgnt(Enum::Microsoft#Purchases#Document#Purchase Document Type,Code[20],Integer)">
             <summary>
             Deletes item charge assignments for a purchase document line.
             The provided parameters filter out item charge assignments to delete.
             </summary>
             <remarks>
             If document type is not a blanket order and quantity invoiced is not 0, 
             the procedure tests if qty. assigned and quantity invoiced are not zero.
            </remarks>
             <param name="DocType">Purchase document type.</param>
             <param name="DocNo">Purchase document no.</param>
             <param name="DocLineNo">Purchase document line no.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CheckItemChargeAssgnt">
            <summary>
            Checks if there are any item charge assignments assigned for the purchase line.
            If so, it checks if item charge assignment is allowed and if the quantity to assign is zero.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetSkipTaxCalculation:Boolean">
            <summary>
            Returns the value of global SkipTaxCalculation flag.
            </summary>
            <returns>The value of global SkipTaxCalculation flag.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetSkipTaxCalulation(Boolean)">
            <summary>
            Sets the global flag SkipTaxCalculation value.
            </summary>
            <param name="Skip">The value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetCaptionClass(Integer):Text[80]">
            <summary>
            Gets a caption class for a field.
            </summary>
            <param name="FieldNumber">The number of the field to get the caption class for.</param>
            <returns>The caption class of a field.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.TestStatusOpen">
            <summary>
            Checks whether the purchase header of the line is open.
            </summary>
            <remarks>
            The check is performed exclusively for non-system generated lines, type changes, and lines with non-blank type.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetSuspendedStatusCheck:Boolean">
            <summary>
            Returns the value of the global variable StatusCheckSuspended.
            </summary>
            <returns>The value of the global variable StatusCheckSuspended.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SuspendStatusCheck(Boolean)">
            <summary>
            Sets the value of the global variable StatusCheckSuspended.
            </summary>
            <param name="Suspend">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateLeadTimeFields">
            <summary>
            Updates Lead Time fields based on the item, location, variant, and vendor for the purchase line.
            </summary>
            <remarks>
            If the purchase line type is not item, the procedure is ended.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetUpdateBasicDates">
            <summary>
            Updates the expected receipt date or order date of a purchase line with the corresponding date in the purchase header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateDates">
            <summary>
            Updates purchase line dates based on the promised receipt date or requested receipt date.
            If both dates are empty, the procedure updates the expected receipt date or oreder date of a purchase line
            with the corresponding date in the purchase header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InternalLeadTimeDays(Date):Text[30]">
            <summary>
            Returns the total lead time in days for a purchase line, taking into account the safety lead time and inbound whse. handling time.
            Used to calculate expected receipt date for the purchase line.
            </summary>
            <param name="PurchDate">Planned receipt date of the purchase line.</param>
            <returns>Total lead time in days.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateVATOnLines(Option,Purchase Header@,Purchase Line@,VAT Amount Line@):Boolean">
            <summary>
            Updates VAT and related amounts on all lines of the document.
            </summary>
            <remarks>
            If parameter QtyType is Shipping procedure is ended without updating the lines.
            </remarks>
            <param name="QtyType">The type of quantity to consider for the update (Qty, QtyToInvoice, QtyToReceive).</param>
            <param name="PurchHeader">The purchase header of the document. The purchase lines are filtered based on this document.</param>
            <param name="PurchLine">Purhcase line record that will be iterated through. Any existing filters on this record will narrow down the lines to consider.</param>
            <param name="VATAmountLine">Calculated VAT amount set. For each purchase line, the corresponding VAT amount line will be extracted from this collection.</param>
            <returns>True if any line was modified, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CalcVATAmountLines(Option,Purchase Header@,Purchase Line@,VAT Amount Line@)">
            <summary>
            Calculates the VAT amounts for purchase lines based on the quantity type, and updates the VAT amount lines accordingly.
            </summary>
            <remarks>
            VATAmountLine parameter must be temporary, because DeleteAll is called for it.
            </remarks>
            <param name="QtyType">The type of quantity to consider for the update (Qty, QtyToInvoice, QtyToReceive).</param>
            <param name="PurchHeader">The purchase header of the document. The purchase lines are filtered based on this document.</param>
            <param name="PurchLine">Purhcase line record that will be iterated through. Any existing filters on this record will narrow down the lines to consider.</param>
            <param name="VATAmountLine">Return value: Calculated and inserted VAT amount lines.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetVATAmountLineOfMaxAmt(VAT Amount Line@,Purchase Line):Boolean">
            <summary>
            Retrieves the VAT amount line corresponding to the purchase line with the highest absolute amount from the set of VAT amount lines.
            </summary>
            <param name="VATAmountLine">Return value: The VAT amount line with the maximum absolute amount.</param>
            <param name="PurchaseLine">The purchase line record to filter the VAT amount line set.</param>
            <returns>True if a VAT amount line was found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateWithWarehouseReceive">
            <summary>
            Updates the quantities to receive or return for a purchase line based on the document type, quantity, and the location.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CheckWarehouse(Boolean)">
            <summary>
            Checks warehouse requirements for a purchase line.
            </summary>
            <remarks>
            The check is only conducted under the condition that the purchase line is inbound, the item in the purchase line has an inventory type, and the location has a mandatory bin.
            </remarks>
            <param name="ShowDialogMessage">If true, then error or message is shown to inform the user about the requirements or issues.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetOverheadRateFCY:Decimal">
            <summary>
            Calculates the overhead rate in foreign currency for the purchase line.
            </summary>
            <returns>Overhead rate in foreign currency.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetItemTranslation">
            <summary>
            Gets the translation of an item's description based on the language code of the purchase header 
            and updates the description fields of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.AdjustDateFormula(DateFormula):Text[30]">
            <summary>
            Formats a date formula parameter and returns it as a text.
            </summary>
            <param name="DateFormulatoAdjust">Date formula to adjust.</param>
            <returns>Formated date formula as text.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.RowID1:Text[250]">
            <summary>
            Generates a unique identifier text for a purchase line record which is used for item tracking or drop shipment creation.
            </summary>
            <returns>Generated text</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsInbound:Boolean">
            <summary>
            Determines if a purchase line is inbound based on the document type and quantity.
            </summary>
            <returns>True if purchase line is inbound, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ItemExists(Code[20]):Boolean">
            <summary>
            Checks if an item with a given item number exists in the Item table, but only if the type of the purchase line is item.
            </summary>
            <param name="ItemNo">Item number to check.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.FindOrCreateRecordByNo(Code[20]):Code[20]">
            <summary>
            Finds or creates a record by a given number and returns the number of the found or created record.
            </summary>
            <param name="SourceNo">A record number to find or create.</param>
            <returns>Number of the found or newly created record.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetAbsMin(Decimal,Decimal):Decimal">
            <summary>
            Returns smaller absolute value between QtyToHandle and QtyHandled to ensure that the quantity being handled 
            does not exceed the quantity that is available to handle.
            </summary>
            <param name="QtyToHandle">Quantity to handle value.</param>
            <param name="QtyHandled">Quantity handled value.</param>
            <returns>Smaller absolute value.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CalcPrepaymentToDeduct">
            <summary>
            Updates prepayment amount to deduct of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsFinalInvoice:Boolean">
            <summary>
            Determines if the current purchase line is the final invoice based on the quantity and quantity to invoice.
            </summary>
            <returns>True if it is a final invoice, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetLineAmountToHandle(Decimal):Decimal">
            <summary>
            Calculates the line amount to handle for a purchase line based on the quantity to handle.
            </summary>
            <remarks>
            Calculated line amount includes the line discount amount.
            </remarks>
            <param name="QtyToHandle">Quantity to handle.</param>
            <returns>Calculated line amount to handle.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetLineAmountToHandleInclPrepmt(Decimal):Decimal">
            <summary>
            Returns the line amount to handle for a purchase line, including prepayment.
            </summary>
            <remarks>
            Prepayment amounts are included in the calculations only if purchase line has to be fully prepaid.
            </remarks>
            <param name="QtyToHandle">Quantity to handle.</param>
            <returns>Calculated line amount to handle.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.JobTaskIsSet:Boolean">
            <summary>
            Determines if the purchase line has a job task set.
            </summary>
            <remarks>
            If job task is set, then journal lines can be created.
            </remarks>
            <returns>True if the job task is set, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CreateTempJobJnlLine(Boolean)">
            <summary>
            Creates a temporary global job journal line based on the purchase line.
            </summary>
            <param name="GetPrices">
            If true, it recalculates amounts from unit cost of the purchase line, 
            otherwise it sets the amounts directly from the purchase line.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateJobPrices">
            <summary>
            Updates the job prices in the purchase line record based on the purchase receipt line,
            or the global job journal line if receipt line doesn't exist.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.JobSetCurrencyFactor">
            <summary>
            Updates the job currency factor from the temporary global job journal line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetUpdateFromVAT(Boolean)">
            <summary>
            Sets the value of the global variable UpdateFromVAT.
            </summary>
            <param name="UpdateFromVAT2">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitQtyToReceive2">
            <summary>
            Initializes the quantity to receive and invoice.
            Additionally, claculates the invoice discount and prepayment amounts.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SwitchLinesWithErrorsFilter(Boolean@)">
            <summary>
            Toggles the filter for lines with errors between displaying all lines and only lines with errors.
            </summary>
            <param name="ShowAllLinesEnabled">
            Return value: A toggle for showing all lines or just lines with errors. After switching the filter, 
            the toggle is returned with the opposite value.
            </param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ClearQtyIfBlank">
            <summary>
            Resets qty. to receive values to zero if the document type is an order and the purchase setup has default qty. to receive blank.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowLineComments">
            <summary>
            Opens a page to show comments for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetDefaultQuantity">
            <summary>
            Resets quantities to receive/return and invoice to zero based on the purchase setup setting for default qty. to receive.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdatePrePaymentAmounts">
            <summary>
            Recalculates prepayment amounts to reflect changes in quantity.
            </summary>
            <remarks>
            If the document type in not an invoice or the prepayment percentage is 0, the prepayment amounts are not updated.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SetVendorItemNo">
            <summary>
            Sets the vendor item number for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ZeroAmountLine(Option):Boolean">
            <summary>
            Determines if the line has a zero amount. It always returns true for a line with a blank type.
            </summary>
            <param name="QtyType">   
            The type of quantity to check. 
            Only Invoicing option makes a difference by checking if quantity to invoice is zero, other options are ignored.
            </param>
            <returns>True if the line has a zero amount, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.FilterLinesWithItemToPlan(Item@,Enum::Microsoft#Purchases#Document#Purchase Document Type)">
            <summary>
            Sets filters on the purchase line for item lines, a specified document type, and various flow filters set in the provided item record.
            </summary>
            <param name="Item">Item record to filter the purchase lines with.</param>
            <param name="DocumentType">The document type to filter the purchase lines with.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.FindLinesWithItemToPlan(Item@,Enum::Microsoft#Purchases#Document#Purchase Document Type):Boolean">
            <summary>
            Retrieves a record set of item purchase lines that match the provided document type and various filters set on the item.
            </summary>
            <param name="Item">Item record to filter the purchase lines with.</param>
            <param name="DocumentType">The document type to filter the purchase lines with.</param>
            <returns>True if any purchase line was found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.LinesWithItemToPlanExist(Item@,Enum::Microsoft#Purchases#Document#Purchase Document Type):Boolean">
            <summary>
            Determines if any purchase lines exist that match the provided document type and various flow filters set on the item.
            </summary>
            <param name="Item">Item record to filter the purchase lines with.</param>
            <param name="DocumentType">The document type to filter the purchase lines with.</param>
            <returns>True if any purchase lines exist, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.FilterLinesForReservation(Reservation Entry,Enum::Microsoft#Purchases#Document#Purchase Document Type,Text,Boolean)">
            <summary>
            Sets filters on the purchase line for item lines that match the provided reservation entry.
            </summary>
            <param name="ReservationEntry">Reservation entry to filter the purchase lines with.</param>
            <param name="DocumentType">The document type to filter the purchase lines with.</param>
            <param name="AvailabilityFilter">Date filter to apply to the expected receipt date field.</param>
            <param name="Positive">A flag to determine if the quantity (base) filter should be positive or negative.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetVPGInvRoundAcc(Purchase Header@):Code[20]">
            <summary>
            Retrieves the invoice rounding account number from the vendor posting group associated with the purchase header.
            </summary>
            <param name="PurchHeader">Purchase header to filter from.</param>
            <returns>Invoice rounding account number from the vendor posting group.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsReceivedShippedItemDimChanged:Boolean">
            <summary>
            Determines if the dimensions have changed on an already received or shipped item line.
            </summary>
            <returns>True if the dimensions have changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsServiceCharge:Boolean">
            <summary>
            Checks if the purchase line is a service charge.
            </summary>
            <returns>True if the line is a service charge line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ConfirmReceivedShippedItemDimChange:Boolean">
            <summary>
            Raises a confirmation dialog to confirm the change of dimensions on an already received or shipped item line. 
            </summary>
            <returns>True if the user confirms the change, otherwise an error is thrown.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitType">
            <summary>
            Initializes the type of the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetDefaultLineType:Enum::Microsoft#Purchases#Document#Purchase Line Type">
            <summary>
            Returns the default document line type from the purchase setup if it is not blank.
            </summary>
            <returns>The document default line type from the purchase setup, otherwise blank.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CheckLocationOnWMS">
            <summary>
            Checks if the line has receipt/shipment when it's mandatory by the location, but only performs this check
            if the item in the line is inventoriable.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsNonInventoriableItem:Boolean">
            <summary>
            Determines if the line is a non-inventoriable item line.
            </summary>
            <returns>True if the line is a non-inventoriable item line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsInventoriableItem:Boolean">
            <summary>
            Determines if the line is an inventoriable item line.
            </summary>
            <returns>True if the line is an inventoriable item line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsExtendedText:Boolean">
            <summary>
            Determines if the line is an extended text line.
            </summary>
            <returns>True if the line is an extended text line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetJnlTemplateName:Code[10]">
            <summary>
            Retrieves the journal template name if g/l setup has a journal template name mandatory field set to true.
            </summary>
            <returns>Journal template name if g/l setup has a journal template name mandatory field set to true.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ValidateLineDiscountPercent(Boolean)">
            <summary>
            Updates the line discount percentage for the purchase line. 
            Additionally, updates line, vat, prepayment and deferral amounts, initializes outstanding amounts and updates the unit cost.
            </summary>
            <param name="DropInvoiceDiscountAmount">If true, invoice discount amounts will be set to 0.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateICPartner">
            <summary>
            Updates the intercompany partner information on the purchase line if the purchase header has outgoing intercompany direction.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.HasTypeToFillMandatoryFields:Boolean">
            <summary>
            Checks if the current purchase line record has a type that requires mandatory fields to be filled.
            </summary>
            <remarks>
            By default, only the blank type will return false, but this behavior can be altered by an event subscriber.
            </remarks>
            <returns>True if purchase line has a type that requires mandatory fields to be filled, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetDeferralAmount:Decimal">
            <summary>
            Gets the defferal amount for the purchase line to be used in deferral schedules.
            </summary>
            <returns>The deferral amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateDeferralAmounts">
            <summary>
            Removes or updates the deferral schedule for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowDeferrals(Date,Code[10]):Boolean">
            <summary>
            Opens a page with deferral schedule for the purchase line.
            </summary>
            <remarks>
            If the deferral schedule doesn't exist yet, a new one is created and commited before the page is opened.
            </remarks>
            <param name="PostingDate">Posting date which is used as a start date on the deferral schedule if it needs to be created.</param>
            <param name="CurrencyCode">Currency code to use for a new deferral schedule.</param>
            <returns>True if deferral schedule was changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.InitDeferralCode">
            <summary>
            Initializes the deferral code for the purchase line based on its type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.DefaultDeferralCode">
            <summary>
            Initializes the deferral code for the purchase if the type is g/l account, item or resource.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsCreditDocType:Boolean">
            <summary>
            Determines if the document type is a credit document.
            </summary>
            <returns>True if the document type is return order or credit memo, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsInvoiceDocType:Boolean">
            <summary>
            Determines if the document type of the line is order or invoice.
            </summary>
            <returns>True if the document type is order or invoice, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.IsReceivedFromOcr:Boolean">
            <summary>
            Determines if incoming document came from OCR.
            </summary>
            <remarks>
            If there's no incoming document associated with the purchase document, the procedure returns false.
            </remarks>
            <returns>True, if incoming document has ocr status success, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CanEditUnitOfMeasureCode:Boolean">
            <summary>
            Checks if item unit of measure code can be edited.
            </summary>
            <remarks>
            If this is not an item line or if item is not selected the procedure always returns true.
            </remarks>
            <returns>True if item unit of measure code can be edited, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.TestItemFields(Code[20],Code[10],Code[10])">
            <summary>
            Verifies that the pruchase line is an item line and the fields match the provided values.
            If the values do not match, an error is thrown.
            </summary>
            <param name="ItemNo">The item number to match.</param>
            <param name="VariantCode">The variant code to match.</param>
            <param name="LocationCode">The location code to match.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ClearPurchaseHeader">
            <summary>
            Clears global PurchHeader variable.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SendLineInvoiceDiscountResetNotification">
            <summary>
            Sends a notification when the invoice discount amount for the purchase line record has been reset.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.FormatType:Text[20]">
            <summary>
            Gets the formated text of the line type for the purchase line. 
            </summary>
            <remarks>
            If line type is blank, comment label is returned.
            </remarks>
            <returns>Formated text of the line type.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.RenameNo(Enum::Microsoft#Purchases#Document#Purchase Document Type,Code[20],Code[20])">
            <summary>
            Renames the number of all purchase lines corresponding to the specified line type and number. 
            </summary>
            <remarks>
            Used when related entities are renamed.
            </remarks>
            <param name="LineType">Filter lines based on this line type.</param>
            <param name="OldNo">The old number to rename from.</param>
            <param name="NewNo">The new number to rename to.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdateBaseAmounts(Decimal,Decimal,Decimal)">
            <summary>
            Updates the base amounts for the purchase line.
            </summary>
            <param name="NewAmount">Value to which amount will be updated.</param>
            <param name="NewAmountIncludingVAT">Value to which amount including VAT will be uptaded.</param>
            <param name="NewVATBaseAmount">Value to which VAT base amount will be uptaded.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.UpdatePrepmtAmounts">
            <summary>
            Updates the prepayment amounts for the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetResource:Resource">
            <summary>
            Returns resource record from the resource number on the purchase line.
            </summary>
            <returns>Resource record.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowBlanketOrderPurchaseLines(Enum::Microsoft#Purchases#Document#Purchase Document Type)">
            <summary>
            Open a page with the purchase lines related to the blanket order line.
            </summary>
            <param name="DocumentType">The document type of the purchase lines to show.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowBlanketOrderPostedReceiptLines">
            <summary>
            Open a page with the posted purchase receipt lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowBlanketOrderPostedInvoiceLines">
            <summary>
            Open a page with the posted purchase invoice lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowBlanketOrderPostedReturnReceiptLines">
            <summary>
            Open a page with the posted return shipment lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowBlanketOrderPostedCreditMemoLines">
            <summary>
            Open a page with the posted purchase credit memo lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the purchase line if default dimensions are defined for the related entry.
            </summary>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetTableValuePair(Integer):Dictionary of [Integer,Code]">
            <summary>
            Returns a dictionary mapping table IDs to field values for the purchase line for a specified field no.
            </summary>
            <param name="FieldNo">Field number to map.</param>
            <returns>Dictionary which has mapped provided field value with its corresponding table id.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.SaveLookupSelection(RecordRef)">
            <summary>
            Saves the selected record from the lookup to the lookup state manager.
            </summary>
            <param name="SelectedRecordRef">The reference to the selected record from the lookup.</param>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.RestoreLookupSelection">
            <summary>
            Restores the selected record from the lookup state manager to the purchase line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetDateForCalculations:Date">
            <summary>
            Gets the date required for purchase line calculations.
            </summary>
            <returns>The date for calculations.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.GetDateForCalculations(Purchase Header):Date">
            <summary>
            Gets the date required for purchase line calculations.
            </summary>
            <param name="FromPurchaseHeader">The purchase header to get the date from.</param>
            <returns>The date for calculations.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.CheckIfPurchaseLineMeetsReservedFromStockSetting(Decimal,Enum::Microsoft#Inventory#Tracking#Reservation From Stock):Boolean">
            <summary>
            Checks if the quantity to post for the purchase line meets the specified quantity in the reservation entries.
            </summary>
            <param name="QtyToPost">Quantity that will be posted.</param>
            <param name="ReservedFromStock">Reservation from stock type.</param>
            <returns>True if the reserved quantity meets the quantity in the reservation entries, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.AssignedItemCharge:Boolean">
            <summary>
            Determines if the line is a charge item line that has been at least partially assigned.
            </summary>
            <returns>True if the line is a charge item line that has been at least partially assigned, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Purchases#Document#Purchase Line.ShowDeferralSchedule">
            <summary>
            Opens a page with deferral schedule for the purchase line.
            </summary>
            <remarks>
            If the deferral schedule doesn't exist yet, a new one is created and commited before the page is opened.
            </remarks>
        </member>
        <member name="O:Table::Microsoft#Purchases#Pricing#Purchase Discount Access">
            <summary>
            The purpose of the table is to setup access to UX and logic of the purchase discount calculation.
            TableType is not set to Temporary only because the ReadPermission() method always returns true.
            </summary>
        </member>
        <member name="O:Table::Microsoft#Purchases#Pricing#Purchase Price Access">
            <summary>
            The purpose of the table is to setup access to UX and logic of the purchase price calculation.
            TableType is not set to Temporary only because the ReadPermission() method always returns true.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.RunWithCheck(Sales Header@)">
            <summary>
            Verifies and posts the sales document.
            As a result, posted documents will be created, dependent on the type of the doucment, as well as any relevant posting to inventory and finance.
            A Quote cannot be posted - it has to be turned into an order or invoice first, which then can be posted.
            An Order can be shipped and/or invoiced.
            A Return order can be received and/or invoiced.
            An Invoice and a Credit memo can be invoiced.
            Any document, except quote, can be partly shipped/received/invoiced.
            </summary>
            <param name="SalesHeader2">The sales header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ProcessPosting(Sales Header@,Sales Header@,Drop Shpt# Post# Buffer@,Cust# Ledger Entry@,Boolean@)">
            <summary>
            A wrapper function to delegate to either a function that allows commit or a function that ignores commit
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesHeader2">An unmodified copy of the sales header.</param>
            <param name="TempDropShptPostBuffer">An internal temp table holding drop shipment information.</param>
            <param name="CustLedgEntry">The customer ledger entry we are creating (='the invoice').</param>
            <param name="EverythingInvoiced">A flag telling whether it was a partial invoice and something is still left.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ProcessPostingLinesCommitBehaviorIgnore(Sales Header@,Sales Header@,Drop Shpt# Post# Buffer@,Cust# Ledger Entry@,Boolean@)">
            <summary>
            A wrapper function to delegate to the ProcessPostingLines function in order to ignore commits
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesHeader2">An unmodified copy of the sales header.</param>
            <param name="TempDropShptPostBuffer">An internal temp table holding drop shipment information.</param>
            <param name="CustLedgEntry">The customer ledger entry we are creating (='the invoice').</param>
            <param name="EverythingInvoiced">A flag telling whether it was a partial invoice and something is still left.</param>    
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ProcessPostingLines(Sales Header@,Sales Header@,Drop Shpt# Post# Buffer@,Cust# Ledger Entry@,Boolean@)">
            <summary>
            The main funciton that processes the document lines.
            Will update inventory, finance, resources, jobs, etc., dependent on what lines are in the document.
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesHeader2">An unmodified copy of the sales header.</param>
            <param name="TempDropShptPostBuffer">An internal temp table holding drop shipment information.</param>
            <param name="CustLedgEntry">The customer ledger entry we are creating (='the invoice').</param>
            <param name="EverythingInvoiced">A flag telling whether it was a partial invoice and something is still left.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetZeroSalesLineRecID(Sales Header,RecordId@)">
            <summary>
            Generates a record id for an 'empty' line
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLineRecID">Return value: The record ID of the 'empty' line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CopyToTempLines(Sales Header,Sales Line@)">
            <summary>
            Copies all the sales lines to a temporary table to speed up later processing
            </summary>
            <remarks>
            If the item charge exists for an item in sales sine, then gen. prod. posting group of item charge is copied to the sales line.
            </remarks>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="TempSalesLine">Return value: The temp table that holds a copy of all sales lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.FillTempLines(Sales Header,Sales Line@)">
            <summary>
            Copies all the sales lines to a temporary table, if they haven't been copied yet, to speed up later processing 
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="TempSalesLine">Return value: The temp table that holds a copy of all sales lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.RefreshTempLines(Sales Header,Sales Line@)">
            <summary>
            Deletes the sales line from the temp table and copies them again to account for any changes done to the document lines as part of the posting process
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="TempSalesLine">Return value: The temp table that holds a fresh copy of all sales lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ResetTempLines(Sales Line@)">
            <summary>
            Removes any filters on the temp sales line and copies the values from the global temp sales line to the local temp sales line
            </summary>
            <param name="TempSalesLineLocal">Return value: The local temp table that holds a copy of all sales lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CalcInvoice(Sales Header):Boolean">
            <summary>
            Checks if a new invoice should be created for the document
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <returns>True if a new invoice should be created, false otherwise.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CalcInvDiscount(Sales Header@)">
            <summary>
            Calculates the invoice discount for the document and updates the document and lines accordingly
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.RestoreSalesHeader(Sales Header@,Sales Header)">
            <summary>
            Restores postings flags and posting numbers of the document header to their original values.
            </summary>
            <param name="SalesHeader">Return value: The sales header of the document with the restored values.</param>
            <param name="SalesHeaderCopy">The sales header of the document with the original values.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CheckAndUpdate(Sales Header@)">
            <summary>
            Checks if document header and lines are valid for posting, updates the document and lines and creates posted documents.
            Prepayment lines are created for documents that are invoiced.
            Unposted document is archived   
            </summary>
            <remarks>
            Transaction is commited after updating the document header if posting is not in PreviewMode
            Several related tables are locked for update after this procedure.
            DocumentIsReadyToBeChecked is set to true, so that PrepareCheckDocument() is not called again in CheckSalesDocument(). Preparation already happened in RunWithCheck() (parent function).
            </remarks>    
            <param name="SalesHeader">Return value: The sales header of the document that is being posted, returned with updated values.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CheckSalesDocument(Sales Header@)">
            <summary>
            Main function for checking if document header and lines are valid for posting.
            Checks for mandatory fields, posting dates, VAT dates, linked documents, posting restrictions, electronic documents, etc.
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CheckSalesLines(Sales Header@)">
            <summary>
            Checks all sales lines of the document if they are valid for posting.
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PrepareCheckDocument(Sales Header@)">
            <summary>
            Gets all the necessary setup information for the check document process
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostSalesLine(Sales Header@,Sales Line@,Boolean@,VAT Amount Line@,VAT Amount Line@,Item Ledger Entry@,Boolean,Drop Shpt# Post# Buffer@,Integer@)">
            <summary>
            Updates sales line quantities and amounts based on the posting type (Ship, Invoice), posts the line and creates a posted document lines.
            Deferrals and tracking information are posted for the line.
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="EverythingInvoiced">A flag telling whether it was a partial invoice and something is still left.</param>
            <param name="TempVATAmountLine">A temp table holding all VAT amounts for the document.</param>
            <param name="TempVATAmountLineRemainder">A temp table holding Rounding Reminder Amounts for VAT Amounts used to prevent rounding errors when dividing amounts if Qty to post is not equal to full line Qty.</param>
            <param name="TempItemLedgEntryNotInvoiced">A temp table that will be filled in with all Assemble-to-order item ledger entries that have not been invoiced yet. Used when posting Item tracking for Shipment if Tracking Specification doesn't exist</param>
            <param name="HasATOShippedNotInvoiced">A flag telling whether there are any Assemble-to-order item ledger entries that have not been invoiced yet. Used when posting Item tracking for Shipment if Tracking Specification doesn't exist</param>
            <param name="TempDropShptPostBuffer">Return Variable: A temp table that will get an additional entry with Drop Shipment information if it's an Item line.</param>
            <param name="ICGenJnlLineNo">Return Variable: The line number of the Inter Company General Journal Line for that was created, It's only filled if line type is G/L Account.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostInvoice(Sales Header@,Cust# Ledger Entry@)">
            <summary>
            Posts sales and VAT to G/L entries from posting buffer and posts customer entry
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="CustLedgEntry">Return value: The customer ledger entry that was created.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostGLAccICLine(Sales Header,Sales Line,Integer@)">
            <summary>
            Creates a General Journal Line for Inter Company posting
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="ICGenJnlLineNo">Return value: The line number of the Inter Company General Journal Line for that was created.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemLine(Sales Header,Sales Line@,Drop Shpt# Post# Buffer@,Posted Assemble-to-Order Link@)">
            <summary>
            Creates and posts (Invoice and Ship) Item Journal Lines for Sales lines of type Item
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted. A line with Type "Item" is expected.</param>
            <param name="TempDropShptPostBuffer">Return Variable: A temp table Set that will get an additional entry with Drop Shipment information.</param>
            <param name="TempPostedATOLink">A temp table Set containg Posted Assemble-to-Order Links. If a link exists, it posts an item journal line with assembled quantity</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemTrackingLine(Sales Header,Sales Line,Item Ledger Entry@,Boolean)">
            <summary>
            Finds Tracking Specification for the sales line, Posts Item Tracking and saves the Tracking Specification in a temp table
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="TempItemLedgEntryNotInvoiced">A temp table that will be filled in with all Assemble-to-order item ledger entries that have not been invoiced yet. Used when posting Item tracking for Shipment if Tracking Specification doesn't exist</param>
            <param name="HasATOShippedNotInvoiced">A flag telling whether there are any Assemble-to-order item ledger entries that have not been invoiced yet. Used when posting Item tracking for Shipment if Tracking Specification doesn't exist</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLine(Sales Header,Sales Line,Decimal,Decimal,Decimal,Decimal,Integer,Code[20],Tracking Specification,Boolean):Integer">
            <summary>
            Creates and posts Item Journal Line for a sales line
            Creates Tracking Specification entries for the Journal Line
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="QtyToBeShipped">The quantity of the Item to be shipped.</param>
            <param name="QtyToBeShippedBase">The base quantity of the Item to be shipped.</param>
            <param name="QtyToBeInvoiced">The quantity of the Item to be invoiced.</param>
            <param name="QtyToBeInvoicedBase">The base quantity of the Item to be invoiced.</param>
            <param name="ItemLedgShptEntryNo">Item Shipment Entry No. to be assigned to the Item Journal Line.</param>
            <param name="ItemChargeNo">Item Charge No. to be assigned to the Item Journal Line.</param>
            <param name="TrackingSpecification">Tracking Specification for the sales line. This parameter is exposed through events, but isn't directly used in the procedure</param>
            <param name="IsATO">A flag indicating whether the Item is Assemble-to-order.</param>
            <returns>The Item Shipment Entry No. assigned to the Item Journal Line.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLinePrepareJournalLine(Item Journal Line@,Sales Header,Sales Line,Decimal,Decimal,Decimal,Decimal,Integer,Code[20],Tracking Specification,Boolean)">
            <summary>
            Prepares Item Journal Line for posting with information from sales header, sales line and parameters
            </summary>
            <param name="ItemJnlLine">Return value: The Item Journal Line that was prepared.</param>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="QtyToBeShipped">The quantity of the Item to be shipped.</param>
            <param name="QtyToBeShippedBase">The base quantity of the Item to be shipped.</param>
            <param name="QtyToBeInvoiced">The quantity of the Item to be invoiced.</param>
            <param name="QtyToBeInvoicedBase">The base quantity of the Item to be invoiced.</param>
            <param name="ItemLedgShptEntryNo">Item Shipment Entry No. to be assigned to the Item Journal Line.</param>
            <param name="ItemChargeNo">Item Charge No. to be assigned to the Item Journal Line.</param>
            <param name="TrackingSpecification">Tracking Specification for the sales line. This parameter is exposed through events, but isn't directly used in the procedure</param>
            <param name="IsATO">A flag indicating whether the Item is Assemble-to-order.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGlobaDocumentsHeaders(Sales Shipment Header@,Sales Invoice Header@,Sales Cr#Memo Header@,Return Receipt Header@)">
            <summary>
            Gets global document headers that were created during posting
            </summary>
            <param name="NewSalesShptHeader">Return value: Sales Shipment Header</param>
            <param name="NewSalesInvHeader">Return value: Sales Invoice Header</param>
            <param name="NewSalesCrMemoHeader">Return value: Sales Credit Memo Header</param>
            <param name="NewReturnRcptHeader">Return value: Return Receipt Header</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGlobalWhseFlags(Boolean@,Boolean@,Boolean@)">
            <summary>
            Gets global warehouse posting flags that were set during posting
            </summary>
            <param name="NewWhseShip">Return value: Warehouse Shipment</param>
            <param name="NewWhseReceive">Return value: Warehouse Receipt</param>
            <param name="NewInvtPickPutaway">Return value: Inventory Pick/Put-Away</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGlobalTempTrackingSpecificationInv(Tracking Specification@)">
            <summary>
            Gets the Temp Set of Invoiced Tracking Specification lines
            </summary>
            <remarks>
            When Tracking Specification is posted for the line, if line is invoiced (Qty. to Invoice is not 0), the line's tracking information is stored in this buffer
            </remarks>
            <param name="NewTempTrackingSpecificationInv">Return value: Temp Tracking Specification lines that were Invoiced</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGlobalTempTrackingSpecification(Tracking Specification@)">
            <summary>
            Gets the Temp Set of Posted Tracking Specification lines that were posted for the document
            </summary>
            <param name="NewTempTrackingSpecification">Return value: Temp Tracking Specification lines that were Posted</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGlobalSrcCode(Code[10]@)">
            <summary>
            Gets the Source Code that was used during posting
            </summary>
            <param name="NewSrcCode">Return value: Source Code</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLineItemCharges(Sales Header,Sales Line,Item Journal Line@,Integer)">
            <summary>
            Posts Item Charges for a sales line
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="OriginalItemJnlLine">The original Item Journal Line that was posted for the sales line. It servers as the basis for Item Journal Lines that are created for Item Charges.</param>
            <param name="ItemShptEntryNo">Item Shipment Entry No. that is assigned to journal lines for Item Charges.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLineTracking(Sales Line,Tracking Specification@,Boolean,Decimal,Tracking Specification@)">
            <summary>
            Adds Tracking Specification for a sales line to the global temp tables where it will later be posted from
            </summary>
            <remarks>
            If line is being invoiced, it's additionally stored in TempTrackingSpecificationInv, 
            and if Warehouse Journal Lines are being posted, it's also stored in TempWhseTrackingSpecification
            </remarks>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="TempWhseTrackingSpecification">Return value: Temp Tracking Specification lines realted to Warehouse Journal Lines</param>
            <param name="PostWhseJnlLine">A flag indicating whether Warehouse Journal Lines should be posted for the sales line.</param>
            <param name="QtyToBeInvoiced">The quantity of the Item to be invoiced.</param>
            <param name="TempTrackingSpec">Return value: Temp Tracking Specification lines related to the Item Journal Line</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLineWhseLine(Warehouse Journal Line@,Tracking Specification@)">
            <summary>
            Splits the incoming Warehouse Journal Line into more lines if tracking is required and posts them
            </summary>
            <param name="TempWhseJnlLine">The Warehouse Journal Line to be posted.</param>
            <param name="TempWhseTrackingSpecification">The Tracking Specification Record Set for the Warehouse Journal Line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemJnlLineBeforePost(Item Journal Line@,Sales Line,Warehouse Journal Line@,Boolean@,Decimal,Tracking Specification)">
            <summary>
            Prepares Warehouse Journal Line and Reservation Entries for later posting
            </summary>
            <param name="ItemJnlLine">The Item Journal Line to be posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="TempWhseJnlLine">Return value: The Warehouse Journal Line information that gets populated if the sales line requires Warehouse Journal Line to be posted.</param>
            <param name="PostWhseJnlLine">Return value: A flag indicating whether Warehouse Journal Lines should be posted for the sales line.</param>
            <param name="QtyToBeShippedBase">The base quantity of the Item to be shipped.</param>
            <param name="TrackingSpecification">Tracking Specification for the sales line. This parameter is exposed through events, but isn't directly used in the procedure</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ShouldPostWhseJnlLine(Sales Line):Boolean">
            <summary>
            Checks wheter a Warehouse Journal Line should be posted for a sales line
            </summary>
            <param name="SalesLine">The sales line for which the check is performed.</param>
            <returns>true if a Warehouse Journal Line should be posted for the sales line; otherwise, false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemChargePerShpt(Sales Header,Sales Line@)">
            <summary>
            Checks if Item Charge should be distributed across multiple Item Ledger Entries and posts the charges
            </summary>
            <remarks>
            If Sales Shipment Line doesn't exist for the Item Charge Line of the sales line, an error is raised within CheckItemChargePerShpt().
            If no related Item Ledger Entries are found for the sales line, an error is raised.
            </remarks>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostDistributeItemCharge(Sales Header,Sales Line,Item Ledger Entry@,Decimal,Decimal,Decimal)">
            <summary>
            Distributes the item charge across Item Ledger Entries and posts the charges
            </summary>
            <remarks>
            Throws an error if no Item Ledger Entries are found in the TempItemLedgerEntry Record Set
            </remarks>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being posted.</param>
            <param name="TempItemLedgEntry">Temp Set of Item Ledger Entries to distribute the charge across</param>
            <param name="NonDistrQuantity">The full quantity, used for calculating the factor for individual Item Ledger Entries</param>
            <param name="NonDistrQtyToAssign">The full quantity to assign to be distributed</param>
            <param name="NonDistrAmountToAssign">The full amount to be distributed</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ReleaseSalesDocument(Sales Header@)">
            <summary>
            Executes various checks and updates for an Open or Pending Prepayment document and releases it
            </summary>
            <remarks>
            Changes are committed to the database if the PreviewMode flag is not set
            Open Linked ATOs (Assembly-to-Order documents) are reopened after the document is released
            </remarks>
            <param name="SalesHeader">The sales header of the document that is being released.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.TestStatusRelease(Sales Header)">
            <summary>
            Checks if status of the document is Released
            </summary>
            <param name="SalesHeader">The sales header of the document whose status is being checked.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.TestSalesLine(Sales Header,Sales Line)">
            <summary>
            Checks varous sales line fields (quantities, tracking, posting groups) depending on the Type of the Line, to ensure it is valid for posting
            </summary>
            <param name="SalesHeader">The sales header of the document that is being posted.</param>
            <param name="SalesLine">The sales line of the document line that is being tested.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateAssocLines(Sales Line@)">
            <summary>
            Removes the association between the sales line and the Purchase Line
            </summary>
            <param name="SalesOrderLine">The sales line for which the association is being removed.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.DeleteAfterPosting(Sales Header@,Boolean)">
            <summary>
            Deletes the document, lines and records related to the sales header after posting, unless the SkipDelete parameter is set.
            This is only run if everything was invoiced and the posting is not in PreviewMode
            </summary>
            <param name="SalesHeader">The sales header of the document that was posted.</param>
            <param name="EverythingInvoiced">A flag indicating whether everything was invoiced. Only used in events, serves no functional purpose.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetCurrency(Code[10])">
            <summary>
            Initializes the global Currency variable with the currency code passed as a parameter.
            </summary>
            <param name="CurrencyCode">The currency code to initialize the global Currency variable with.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ReverseAmount(Sales Line@)">
            <summary>
            Reverses the amounts and quantities of a sales line.
            </summary>
            <param name="SalesLine">The sales line for which to reverse the amounts and quantities.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.IncrAmount(Sales Header,Sales Line,Sales Line@)">
            <summary>
            Adds the amounts from sales line to the TotalSalesLine record.
            </summary>
            <param name="SalesHeader">The sales header of the document.</param>
            <param name="SalesLine">The sales line to add the amounts from.</param>
            <param name="TotalSalesLine">Return Variable: The TotalSalesLine record to which the amounts are added.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetSalesLines(Sales Header@,Sales Line@,Option)">
            <summary>
            Collects the sales lines for the specified sales header and stores them in the NewSalesLine record set.
            Collected lines will have the amounts divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.    
            </summary>
            <remarks>
            An overload for GetSalesLines that always includes prepayments (if QtyType is set to Invoicing).
            </remarks>
            <param name="SalesHeader">The sales header of the document.</param>
            <param name="NewSalesLine">Return Variable: The NewSalesLine record set to store the collected sales lines in. This should be a temporary variable as new records will be inserted.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetSalesLines(Sales Header@,Sales Line@,Option,Boolean)">
            <summary>
            Collects and divides amounts of the sales lines for the specified sales header and stores them in the NewSalesLine record set.
            Collected lines will have the amounts divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <param name="SalesHeader">The sales header of the document.</param>
            <param name="NewSalesLine">Return Variable: The NewSalesLine record set to store the collected sales lines in. This should be a temporary variable as new records will be inserted.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
            <param name="IncludePrepayments">A flag indicating whether prepayments should be included in the collected lines. Only applies if QtyType is set to Invoicing.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetSalesLinesTemp(Sales Header@,Sales Line@,Sales Line@,Option)">
            <summary>
            Divides amounts of the sales lines passed as OldSalesLine parameter and stores them in the NewSalesLine record set.
            Lines will have the amounts divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>
            Behaves similarly to GetSalesLines with the exception that GetSalesLines collects all the lines for the specified sales header, 
            while this method only divides the amounts of the lines passed as OldSalesLine parameter.
            </remarks>
            <param name="SalesHeader">The sales header of the document.</param>
            <param name="NewSalesLine">Return Variable: The NewSalesLine record set to store the collected sales lines in. This should be a temporary variable as new records will be inserted.</param>
            <param name="OldSalesLine">The sales line record set to copy the lines from and divide the amounts.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SumSalesLines(Sales Header@,Option,Sales Line@,Sales Line@,Decimal@,Text[30]@,Decimal@,Decimal@,Decimal@)">
            <summary>
            Sums the sales lines for the specified sales header (within the filters that are already set on OldSalesLine) and stores the results in the NewTotalSalesLine and NewTotalSalesLineLCY record variables.
            The amounts will be divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>    
            This is an overload for SumSalesLineTemp that always includes prepayments in amount calculations
            it always takes the lines for the specified sales header (doesn't support a parameter for filtered or temp sales lines).
            </remarks>
            <param name="NewSalesHeader">The sales header of the document.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
            <param name="NewTotalSalesLine">Return Variable: The NewTotalSalesLine record to store the summed amounts in.</param>
            <param name="NewTotalSalesLineLCY">Return Variable: The NewTotalSalesLineLCY record to store the summed amounts in LCY in.</param>
            <param name="VATAmount">Return Variable: The total VAT amount.</param>
            <param name="VATAmountText">Return Variable: The text to display for the VAT amount. This will include the VAT rate if the VAT rate is the same for all lines.</param>
            <param name="ProfitLCY">Return Variable: The total profit in LCY.</param>
            <param name="ProfitPct">Return Variable: The total profit percentage.</param>
            <param name="TotalAdjCostLCY">Return Variable: The total adjusted cost in LCY.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SumSalesLinesTemp(Sales Header@,Sales Line@,Option,Sales Line@,Sales Line@,Decimal@,Text[30]@,Decimal@,Decimal@,Decimal@)">
            <summary>
            Sums the sales lines for the specified sales header (within the filters that are already set on OldSalesLine) and stores the results in the NewTotalSalesLine and NewTotalSalesLineLCY record variables.
            The amounts will be divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>
            OldSalesLine can be a temporary variable
            This is an overload for SumSalesLineTemp that always includes prepayments in amount calculations
            </remarks>
            <param name="SalesHeader"></param>
            <param name="OldSalesLine"></param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
            <param name="NewTotalSalesLine">Return Variable: The NewTotalSalesLine record to store the summed amounts in.</param>
            <param name="NewTotalSalesLineLCY">Return Variable: The NewTotalSalesLineLCY record to store the summed amounts in LCY in.</param>
            <param name="VATAmount">Return Variable: The total VAT amount.</param>
            <param name="VATAmountText">Return Variable: The text to display for the VAT amount. This will include the VAT rate if the VAT rate is the same for all lines.</param>
            <param name="ProfitLCY">Return Variable: The total profit in LCY.</param>
            <param name="ProfitPct">Return Variable: The total profit percentage.</param>
            <param name="TotalAdjCostLCY">Return Variable: The total adjusted cost in LCY.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SumSalesLinesTemp(Sales Header@,Sales Line@,Option,Sales Line@,Sales Line@,Decimal@,Text[30]@,Decimal@,Decimal@,Decimal@,Boolean)">
            <summary>
            Sums the sales lines for the specified sales header (within the filters that are already set on OldSalesLine) and stores the results in the NewTotalSalesLine and NewTotalSalesLineLCY record variables.
            The amounts will be divided by quantity the same way as they are divided during the posting process, depending on the selected QtyType.
            </summary>
            <remarks>
            OldSalesLine can be a temporary variable
            </remarks>
            <param name="SalesHeader">The sales header of the document.</param>
            <param name="OldSalesLine">The sales lines to sum.</param>
            <param name="QtyType">The QtyType to use when dividing the amounts by quantity. General = Quantity, Invoicing = Qty. to Invoice, Shipping = Qty. to Ship.</param>
            <param name="NewTotalSalesLine">Return Variable: The NewTotalSalesLine record to store the summed amounts in.</param>
            <param name="NewTotalSalesLineLCY">Return Variable: The NewTotalSalesLineLCY record to store the summed amounts in LCY in.</param>
            <param name="VATAmount">Return Variable: The total VAT amount.</param>
            <param name="VATAmountText">Return Variable: The text to display for the VAT amount. This will include the VAT rate if the VAT rate is the same for all lines.</param>
            <param name="ProfitLCY">Return Variable: The total profit in LCY.</param>
            <param name="ProfitPct">Return Variable: The total profit percentage.</param>
            <param name="TotalAdjCostLCY">Return Variable: The total adjusted cost in LCY.</param>
            <param name="IncludePrepayments">A flag indicating whether prepayments should be included when calculating Line Amounts.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateBlanketOrderLine(Sales Line,Boolean,Boolean,Boolean)">
            <summary>
            Updated the related blanket order line for the quantities that are shipped, received or invoiced with the specified sales line.
            </summary>
            <param name="SalesLine">The sales line to update the blanket order line for.</param>
            <param name="Ship">A flag indicating whether the sales line is being shipped.</param>
            <param name="Receive">A flag indicating whether the sales line is being received (Return Orders).</param>
            <param name="Invoice">A flag indicating whether the sales line is being invoiced.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateSalesOrderChargeAssgnt(Sales Line,Sales Line)">
            <summary>
            Updates the Item Charge Assignment (Sales) lines quantities for the quantity that was posted for the specified sales line.
            </summary>
            <param name="SalesOrderInvLine">sales line of type Charge (Item) for the document being posted which is of type Invoice or Credit Memo</param>
            <param name="SalesOrderLine">sales line of  document type Order or Return Order that is related to the SalesOrderInvLine</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CreateWhseJnlLine(Item Journal Line,Sales Line,Warehouse Journal Line@)">
            <summary>
            Creates a Warehouse Journal Line for the specified sales line.
            </summary>
            <remarks>
            Error can be raised if the Adjustment Bin of the Location has Movement Block.
            </remarks>
            <param name="ItemJnlLine">The Item Journal Line to create the Warehouse Journal Line for.</param>
            <param name="SalesLine">The sales line to create the Warehouse Journal Line for.</param>
            <param name="TempWhseJnlLine">Return Variable: The created Warehouse Journal Line.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.WhseHandlingRequiredExternal(Sales Line):Boolean">
            <summary>
            Checks if warehouse handling (warehouse shipment or receipt) is required for the specified sales line.
            Warehouse handling is relevant for sales lines for inventoriable item. Warehouse setup or location (if specified) determines if Warehouse Handling is required.
            Drop shipments do not require Warehouse Handling.
            </summary>
            <param name="SalesLine">The sales line to check.</param>
            <returns>Returns true if Warehouse Handling is required, otherwise false.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CheckTrackingSpecification(Sales Header,Sales Line@)">
            <summary>
            Checks if the sales line is posted with Item Tracking, then tracked quantity must be equal to posted quantity.
            </summary>
            <param name="SalesHeader">The sales header of the document. Only Orders and Return Orders are relevant.</param>
            <param name="TempItemSalesLine">Temp sales lines to Check.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.InsertValueEntryRelation">
            <summary>
            Stores Value Entry Relations from a global temp table TempValueEntryRelation to the Value Entry Relation table.
            The global temp table is then cleared.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetWhseRcptHeader(Warehouse Receipt Header@)">
            <summary>
            Sets the incoming Warehouse Receipt Header record to the global variable and inserts it to the global Temp table for Warehouse Receipt Header.
            </summary>
            <param name="WhseRcptHeader2"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetWhseShptHeader(Warehouse Shipment Header@)">
            <summary>
            Sets the incoming Warehouse Shipment Header record to the global variable and inserts it to the global Temp table for Warehouse Shipment Header.
            </summary>
            <param name="WhseShptHeader2"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CreatePrepaymentLines(Sales Header,Boolean)">
            <summary>
            Creates Prepayment lines for the specified sales header and adds them to the global sales line temp table.
            </summary>
            <remarks>
            If CompleteFunctionality is true, then the following is additionally done:
                - Prepayment Amount to deduct is tested using information from Sales Shipment Lines.
                - Validates Qty. to Invoice with Qty. Shipped Not Invoiced if the Qty. to Invoice is larger than shipped Qty.
                - Checks that Prepayment Amount to deduct is not greater than the remaining amount to invoice for each line
                - Prepayment Line Type is Validated (otherwise it's only assigned).    
            If "Compress Prepayments" is enabled for the sales header, only one prepayment line is created.
            </remarks>
            <param name="SalesHeader">The sales header to create the prepayment lines for.</param>
            <param name="CompleteFunctionality">Specifies if the complete functionality of the procedure should be used.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.CheckPrepmtAmtToDeduct(Sales Header,Sales Line@,Decimal)">
            <summary>
            Checks that the Prepayment amount to deduct of the sales line is within limits
            </summary>
            <remarks>
            First condition checks that the Prepayment amount to deduct is not greater than the amount being posted.
            Second condition checks that the remaining Prepayment amount to deduct is not greater than the remaining amount to invoice.
            </remarks>
            <param name="SalesHeader">The sales header of the document being posted.</param>
            <param name="TempSalesLine">The sales line to check.</param>
            <param name="Fraction">The fraction of the sales line to be invoiced.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.InsertedPrepmtVATBaseToDeduct(Sales Header,Sales Line,Integer,Decimal):Decimal">
            <summary>
            Calculates the prepayment VAT Base amount to deduct and inserts a prepayment line for it in a global temp table TempPrepmtDeductLCYSalesLine.
            </summary>
            <param name="SalesHeader">The sales header of the document being posted.</param>
            <param name="SalesLine">The sales line of the document for which the prepayment VAT Base amount is being calculated.</param>
            <param name="PrepmtLineNo">The Line No. of the prepayment line to which this VAT Base Prepayment line is attached to.</param>
            <param name="TotalPrepmtAmtToDeduct">The running total of the prepayment amount to deduct. Used when compressing prepayments to a single line.</param>
            <returns>Prepayment VAT Base amount to deduct</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.DividePrepmtAmountLCY(Sales Line@,Sales Header)">
            <summary>
            Calculates the LCY Amount of Prepayment VAT Base Amount for each prepayment line and updates the global temp table TempPrepmtDeductLCYSalesLine with it.
            </summary>
            <param name="PrepmtSalesLine">Temp tables with prepayment sales lines.</param>
            <param name="SalesHeader">The sales header of the document being posted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdatePrepmtSalesLineWithRounding(Sales Line@,Decimal[],Decimal[],Boolean,Decimal[])">
            <summary>
            Updates the prepayment sales line with rounding adjustments.
            </summary>
            <param name="PrepmtSalesLine">The prepayment sales line to update.</param>
            <param name="TotalRoundingAmount">Array with the total rounding amount to add. First value is the amount excluding VAT, second value is the VAT amount.</param>
            <param name="TotalPrepmtAmount">Array with the total prepayment amount to deduct. First value is the amount excluding VAT, second value is the VAT amount.</param>
            <param name="FinalInvoice">Indicates if the current invoice is the final invoice.</param>
            <param name="PricesInclVATRoundingAmount">Array with the rounding amount to add to the prices including VAT. First value is the amount excluding VAT, second value is the VAT amount.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.DecrementPrepmtAmtInvLCY(Sales Header,Sales Line,Decimal@,Decimal@)">
            <summary>
             Decrements the prepayment amount invoiced in LCY and the prepayment VAT amount invoiced in LCY for a given sales line.
            </summary>
            <param name="SalesHeader">The sales header of the document being posted.</param>
            <param name="SalesLine">The sales line of the document for which the prepayment amount is being calculated.</param>
            <param name="PrepmtAmountInvLCY">The invoiced prepayment amount of a sales line. The amount passed in gets reduced by the amount to be deducted.</param>
            <param name="PrepmtVATAmountInvLCY">The invoiced prepayment VAT amount of a sales line. The amount passed in gets reduced by the amount to be deducted.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.TestGetShipmentPPmtAmtToDeduct">
            <summary>
            Checks if the prepayment amount for the sales lines is too big or too small using information from the related sales order lines.
            It throws an error if it is.     
            </summary>
            <remarks>
            It is too big if the prepayment amount is bigger than the remaining prepayment amount on the sales order line.
            It is too small if the prepayment amount is smaller than the remaining prepayment amount on the sales order line and the sales order line is fully invoiced.
            If this is the last invoice and the sales line has 100% prepayment, then the actual (non-temp) invoice line is adjusted so that prepayment amount to deduct equals the line amount.
            </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.ArchiveUnpostedOrder(Sales Header@)">
            <summary>
            Archives unposted orders and return orders if archiving is enabled in the Sales Setup.
            </summary>
            <remarks>
            Order isn't archived if there are no lines to archive or PreviewMode is true.
            </remarks>
            <param name="SalesHeader"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGLSetup">
            <summary>
            Retrieves the G/L Setup record if it hasn't been read before.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetGeneralPostingSetup(General Posting Setup@,Sales Line)">
            <summary>
            Retrieves the General Posting Setup record for the specified sales line.
            </summary>
            <param name="GenPostingSetup">Return Variable: General Posting Setup record</param>
            <param name="SalesLine">sales line for which to retrieve the Gen. Posting Setup</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetItemEntryRelation(Item Entry Relation@,Sales Shipment Line@,Tracking Specification@,Item Ledger Entry@,Boolean,Boolean)">
            <summary>
            Retrieves the Item Entry Relation and Sales Shipment Line that are related to the item entry
            If tracking specification exists, they are retrieved from the tracking specification information
            If there are assembly-to-order shipped not invoiced lines, they are retrieved from the assembly-to-order shipped not invoiced item ledger entry information
            </summary>
            <remarks>
            If tracking specification doesn't exist, and there are no assembly-to-order shipped not invoiced lines, Item Entry Relation is assigned the Item Shipment Entry No. from the incoming Sales Shipment Line
            </remarks>
            <param name="ItemEntryRelation">Return value: Item Entry Relation related to the Item Entry</param>
            <param name="SalesShptLine">Return value: Sales Shipment Line related to the Item Entry</param>
            <param name="InvoicingTrackingSpecification">Tracking Specification for the Item Ledger Entry</param>
            <param name="ItemLedgEntryNotInvoiced">An assemble-to-order Item Ledger Entry that is shipped, but not invoiced.</param>
            <param name="TrackingSpecificationExists">Indicates whether the Item Ledger Entry has a Tracking Specification</param>
            <param name="HasATOShippedNotInvoiced">Indicates whether there are Assembly-to-order Shipped Not Invoiced lines</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetWhseJnlRegisterCU(Codeunit::Microsoft#Warehouse#Journal#Whse# Jnl#-Register Line@)">
            <summary>
            Sets the Warehouse Journal Register Line codeunit to the global variable
            The codeunit is used when posting Warehouse Journal Lines, Assembly Orders and Warehouse Shipments
            </summary>
            <param name="WhseJnlRegisterLine">Warehouse Journal Register Line codeunit to be set</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.InitProgressWindow(Sales Header)">
            <summary>
            Initializes the progress window for posting with information about the sales header.
            </summary>
            <param name="SalesHeader">The sales header record for which the progress window is being initialized.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.GetPostedDocumentRecord(Sales Header,Variant@)">
            <summary>
            Gets the posted document that was created from the specified sales header.
            </summary>
            <remarks>
            Orders and Return Orders return Invoice or Credit Memo. If the Invoice or Credit Memo was not posted, the function does not return a value.
            </remarks>
            <param name="SalesHeader">The sales header for which to get the posted document.</param>
            <param name="PostedSalesDocumentVariant">Return Variable: The posted document that was created from the specified sales header.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SendPostedDocumentRecord(Sales Header,Document Sending Profile@)">
            <summary>
            Sends the posted document(s) that were created during posting to the specified Document Sending Profile.
            </summary>
            <remarks>
            Send function in Document Sending Profile commits the transaction after it successfully sends the document.
            </remarks>
            <param name="SalesHeader">The sales header for which to find the documents to send.</param>
            <param name="DocumentSendingProfile">The Document Sending Profile to use for sending the documents.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetCalledBy(Integer)">
            <summary>
            Sets the CalledBy global variable.        
            </summary>
            <param name="NewCalledBy"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetPreviewMode(Boolean)">
            <summary>
            Sets the Preview Mode for the current instance of the codeunit.
            Preview Mode ensures no transactions are commited to the database and no documents are sent.
            </summary>
            <param name="NewPreviewMode">The new value for the Preview Mode.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemTrackingCheckReturnReceipt(Sales Line,Decimal)">
            <summary>
            Checks if remaining quantity to be invoiced is greater than the return quantity to be received. Throws an error if it is.
            </summary>
            <param name="SalesLine">The sales line to check.</param>
            <param name="RemQtyToBeInvoiced">The remaining quantity to be invoiced.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.PostItemTrackingCheckShipment(Sales Line,Decimal)">
            <summary>
            Checks if remaining quantity to be invoiced is greater than the quantity to be shipped. Throws an error if it is
            </summary>
            <param name="SalesLine">The sales line to check.</param>
            <param name="RemQtyToBeInvoiced">The remaining quantity to be invoiced.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetPostingFlags(Sales Header@)">
            <summary>
            Sets the posting flags (Ship, Invoice, Receive) on the sales header based on the document type.
            </summary>
            <param name="SalesHeader">The sales header for which to set the posting flags.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.SetSuppressCommit(Boolean)">
            <summary>
            Sets the Supress Commit flag.
            </summary>
            <param name="NewSuppressCommit">The new value of the Supress Commit flag.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.IsItemJnlPostLineHandled(Item Journal Line@,Sales Line@,Sales Header@):Boolean">
            <summary>
            Raises the OnBeforePostResJnlLine event.
            </summary>
            <param name="ItemJnlLine">The item journal line that is posted.</param>
            <param name="SalesLine">The sales line of the document that is posted.</param>
            <param name="SalesHeader">The sales header of the document that is posted.</param>
            <returns>Value of the IsHandled variable that is exposed by the event. False by default</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateChargeItemReturnRcptLineGenProdPostingGroup(Return Receipt Line@)">
            <summary>
            Updates the Gen. Prod. Posting Group on the return receipt line with the value from the item charge.
            Only lines for item charges that don't have a Gen. Prod. Posting Group are updated.
            </summary>
            <param name="ReturnReceiptLine">The return receipt line that is updated.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateChargeItemSalesShptLineGenProdPostingGroup(Sales Shipment Line@)">
            <summary>
            Updates the Gen. Prod. Posting Group on the sales shipment line with the value from the item charge.
            </summary>
            <param name="SalesShipmentLine">The sales shipment line that is updated.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Posting#Sales-Post.UpdateChargeItemSalesLineGenProdPostingGroup(Sales Line@)">
            <summary>
            Updates the Gen. Prod. Posting Group on the sales line with the value from the item charge.
            </summary>
            <param name="SalesLine">The sales line that is updated.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InitInsert">
            <summary>
            Initializes a new sales header with a new document number from the number series.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InitRecord">
            <summary>
            Initializes a new sales header with default values.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InitPostingDescription">
            <summary>
            Initializes the posting description with formatted document type and number text for the sales header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetStandardCodesMgt(Codeunit::Microsoft#Utilities#Standard Codes Mgt#@)">
            <summary>
            Sets global StandardCodesMgtGlobal codeunit to a new instance.
            </summary>
            <remarks>
            StandardCodesMgtGlobal codeunit is used to check whether sales recurring lines should be applied for sales document,
            if necessary, creates a sales line on insert sales header.
            </remarks>
            <param name="StandardCodesMgtNew">The new codeunit instance to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.AssistEdit(Sales Header):Boolean">
            <summary>
            Opens a page to select related number series for the sales header and updates the document number with the selected number series.
            </summary>
            <param name="OldSalesHeader">
            Sales header record before the change. The no series code from this record will be highlighted by default on the open page.
            </param>
            <returns>True if the document number has changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestNoSeries">
            <summary>
            Checks if the number series for different types of sales documents are filled in the sales setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetNoSeriesCode:Code[20]">
            <summary>
            Returns the number series code from the sales setup based on the document type of the sales header.
            </summary>
            <returns>Number series code.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestNoSeriesDate(Code[20],Code[20],Text[1024],Text[1024])">
            <summary>
            Checks if the number series has to be assigned chronologically after various documents are already posted.
            </summary>
            <param name="No">Posted document number.</param>
            <param name="NoSeriesCode">Number series code to check.</param>
            <param name="NoCapt">Posted document number field caption.</param>
            <param name="NoSeriesCapt">Number series field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ConfirmDeletion:Boolean">
            <summary>
            Opens a confirmation dialog to confirm the deletion of the sales header.
            This check is to confirm with the user that gaps will happen in the posted documents if the document is deleted.
            </summary>
            <returns>True if sales header should be deleted, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCust(Code[20]):Customer">
            <summary>
            Updates the global Customer record. Record will not be retrieved if document type is quote and provided customer no is blank.
            </summary>
            <param name="CustNo">Customer number to retrieve the record for.</param>
            <returns>Retrieved customer record.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SalesLinesExist:Boolean">
            <summary>
            Checks if any sales lines exists for sales header.
            </summary>
            <returns>True if sales lines exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.RecreateSalesLines(Text[100])">
            <summary>
            Recreates sales lines for a sales document when the provided field in the sales header is changed.
            </summary>
            <remarks>
            Opens confirmation dialog to confirm the deletion of existing sales lines
            and then recreates the sales lines based on the new information in the sales header.
            It also handles item charge assignments and extended text lines.
            </remarks>
            <param name="ChangedFieldName">
            Name of the field that is changed.
            This name is used only in error messages and confirmation dialogs.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.StoreSalesCommentLineToTemp(Sales Comment Line@)">
            <summary>
            Inserts existing sales comment lines into a temporary record.
            </summary>
            <param name="TempSalesCommentLine">Return value: Inserted sales comment lines.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.RestoreSalesCommentLine(Sales Comment Line@,Integer,Integer)">
            <summary>
            Inserts sales comment lines for the sales line of the document.
            Lines are inserted from the provided temporary sales comment line record set.
            </summary>
            <param name="TempSalesCommentLine">Temporary sales comment line record set to insert.</param>
            <param name="OldDocumnetLineNo">Previous sales line number.</param>
            <param name="NewDocumentLineNo">New sales line number.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.MessageIfSalesLinesExist(Text[100])">
            <summary>
            Displays a message if sales lines exist for the sales header and the changed field was not updated on the lines.
            </summary>
            <remarks>
            Message states that the user must update the existing sales lines manually.
            </remarks>
            <param name="ChangedFieldName">Changed sales header field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.PriceMessageIfSalesLinesExist(Text[100])">
            <summary>
            Displays a message to the user if there are existing sales lines and a provided field in the sales header has been changed,
            which might affect the prices and discounts on the sales lines.
            </summary>
            <param name="ChangedFieldName">Changed sales header field caption.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateCurrencyFactor">
            <summary>
            Updates currency factor on the sales header and recreates sales lines if the currency code has changed.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ConfirmCurrencyFactorUpdate">
            <summary>
            Updates currency factor on the sales header if confirmed by the user.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetHideValidationDialog(Boolean)">
            <summary>
            Sets the value of the global flag HideValidationDialog.
            </summary>
            <remarks>
            Global flag HideValidationDialog is used to hide various confirmation/message/other dialogs.
            </remarks>
            <param name="NewHideValidationDialog">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetHideValidationDialog:Boolean">
            <summary>
            Returns the value of the global flag HideValidationDialog.
            </summary>
            <remarks>
            Global flag HideValidationDialog is used to hide various confirmation/message/other dialogs.
            </remarks>
            <returns>The value of the global flag HideValidationDialog.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetHideCreditCheckDialogue(Boolean)">
            <summary>
            Sets the value of the global flag HideCreditCheckDialogue.
            </summary>
            <remarks>
            Global flag HideCreditCheckDialogue is used to hide exceeded credit limit notification in sales document.
            </remarks>
            <param name="NewHideCreditCheckDialogue">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetHideCreditCheckDialogue:Boolean">
            <summary>
            Returns the value of the global flag HideCreditCheckDialogue.
            </summary>
            <remarks>
            Global flag HideCreditCheckDialogue is used to hide exceeded credit limit notification in sales document.
            </remarks>
            <returns>The value of the global flag HideCreditCheckDialogue.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateLocationCode(Code[10])">
            <summary>
            Updates the location code with the specified location code. If it's empty, it takes location code from user setup management.
            </summary>
            <param name="LocationCode">New location code.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateSalesLines(Text[100],Boolean)">
            <summary>
            Updates sales lines to reflect changes in the sales header field.
            Optionally the confirmation is raised, for the user to confirm the update of lines.
            </summary>
            <remarks>
            Field captions must not be duplicated in the sales header, otherwise an error will be raised.
            </remarks>
            <param name="ChangedFieldName">Changed sales header field caption.</param>
            <param name="AskQuestion">
            If true, a confirmation message is shown to update the lines, otherwise confirmation is not shown.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateSalesLinesByFieldNo(Integer,Boolean)">
            <summary>
            Updates sales lines based on the provided field number.
            </summary>
            <param name="ChangedFieldNo">Changed field number.</param>
            <param name="AskQuestion">
            If true, confirmation message is shown to update the lines, otherwise confirmation is not shown.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ConfirmReservationDateConflict">
            <summary>
            Raises a confirmation informing the user that reservations may be canceled if the change in the field causes a date conflict.
            Confirmation is only raised if reservations exist. If not confirmed, the execution stops.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CreateDim(List of [Dictionary])">
            <summary>
            Creates and assigns dimensions for the sales header based on the provided default dimension sources.
            </summary>
            <remarks>
            If sales lines exist and the dimension set has changed the dimensions are updated on the lines as well.
            </remarks>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Verifies whether the provided shortcut dimension code and value are valid.
            If valid, assigns it to the sales document.
            </summary>
            <remarks>
            If sales lines exist, the dimensions are updated on the lines as well.
            </remarks>
            <param name="FieldNumber">Number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShippedSalesLinesExist:Boolean">
            <summary>
            Determines if sales lines that are already shipped exist.
            </summary>
            <returns>True if shipped sales lines exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ReturnReceiptExist:Boolean">
            <summary>
            Determines if sales lines that are already returned exist.
            </summary>
            <returns>True if return receipt exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.DeleteAllSalesLines">
            <summary>
            Deletes all sales lines, reservation, and comment lines for the document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckCustomerCreated(Boolean):Boolean">
            <summary>
            Checks if sell-to and bill-to customer numbers are filled. If not, it creates customers based on the associated
            contact and customer template, and assigns the new customer number to the document.
            </summary>
            <remarks>
            The transaction is committed after each customer record is created.
            Procedure are used in release sales quote or make order from quote processes.
            </remarks>
            <param name="Prompt">If set to true, a confirmation dialog to create a customer will be shown, otherwise not.</param>
            <returns>True if sell-to and bill-to customer numbers are filled, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.RecreateReqLine(Requisition Line@,Sales Line,Integer,Boolean)">
            <summary>
            Recreates requisition lines linked to a sales line, either shifting them to a temporary table or
            back based on the provided ToTemp flag, updating the order promising line ID in the process.
            </summary>
            <remarks>
            Temporary requisition line table is defined as a local variable and the caller has no way to pass in / retrieve lines.
            Old requisition lines after recreation are deleted.
            </remarks>
            <param name="TempReqLine">Return value Temporary Requisition Line that contains the requisition lines that have been recreated.</param>
            <param name="OldSalesLine">Sales line that is associated with the requisition lines that need to be recreated.</param>
            <param name="NewSourceRefNo">New order promising line ID that should be assigned to the requisition lines when they are moved back from the temporary table to the main table.</param>
            <param name="ToTemp">
            If true, the procedure moves the requisition lines to a temporary table,
            otherwise it moves the requisition lines back from the temporary table to the main table.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.RecreateReqLine(Sales Line,Integer,Boolean)">
            <summary>
            Recreates requisition lines linked to a sales line, either shifting them to a temporary table or
            back based on the provided ToTemp flag, updating the order promising line ID in the process.
            </summary>
            <remarks>
            Temporary requisition line table is defined as a local variable and the caller has no way to pass in / retrieve lines.
            Old requisition lines after recreation are deleted.
            </remarks>
            <param name="OldSalesLine">Sales line that is associated with the requisition lines that need to be recreated.</param>
            <param name="NewSourceRefNo">New order promising line ID that should be assigned to the requisition lines when they are moved back from the temporary table to the main table.</param>
            <param name="ToTemp">
            If true, the procedure moves the requisition lines to a temporary table,
            otherwise it moves the requisition lines back from the temporary table to the main table.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateSellToCont(Code[20])">
            <summary>
            Updates the sell-to contact details of a sales header based on the provided customer number.
            </summary>
            <remarks>
            If the contact linked to a specific business relation is found, sell-to contact information is updated from the contact.
            </remarks>
            <param name="CustomerNo">Customer number from which details are taken.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateBillToCont(Code[20])">
            <summary>
            Updates the bill-to contact details of a sales header based on the provided customer number.
            </summary>
            <remarks>
            If the contact linked to a specific business relation is found, bill-to contact information is updated from the contact.
            </remarks>
            <param name="CustomerNo">Customer number from which details are taken.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateSellToCust(Code[20])">
            <summary>
            Updates the sell-to customer details of a sales header based on the provided contact number.
            </summary>
            <remarks>
            If the contact linked to a specific business relation is found, sell-to customer information is updated from the contact.
            </remarks>
            <param name="ContactNo">Contact number from which details are taken.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetShippingTime(Integer)">
            <summary>
            Updates the shipping time on the sales header.
            </summary>
            <remarks>
            Checks if the procedure is called by a field other than the current field. If so, the procedure exits.
            If shipping agent is defined in sales header then shipping time is set from the shipping agent services, otherwise from sell-to customer.
            If the procedure was not called by the shipping agent code or shipping agent service code fields,
            it validates the current shipping time value.
            </remarks>
            <param name="CalledByFieldNo">Field number of the field that called this procedure.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetSellToCustomerFaxNo:Text">
            <summary>
            Gets sell-to customer fax number.
            </summary>
            <returns>Customer fax number.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckCreditMaxBeforeInsert">
            <summary>
            Checks the bill to customer credit limit and if credit limit is exceeded, creates a notification.
            </summary>
            <remarks>
            Notifiction will be created only if credit warnings is not disabled in sales setup.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CreateInvtPutAwayPick">
            <summary>
            Creates inventory put-away, pick, or movement documents for a released sales document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CreateTask">
            <summary>
            Starts the create task wizard with information from the sales header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateShipToAddress">
            <summary>
            Updates the ship-to address information if the sales header has a credit document type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShowDocDim">
            <summary>
            Opens a page for editing dimensions for the sales header.
            If dimensions are changed, they're updated on the sales lines as well.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateAllLineDim(Integer,Integer)">
            <summary>
            Updates the dimensions of sales lines in a sales document when the dimensions of the sales header are changed.
            </summary>
            <param name="NewParentDimSetID">New dimension set ID.</param>
            <param name="OldParentDimSetID">Previous dimension set ID.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.LookupAdjmtValueEntries(Option)">
            <summary>
            Opens a page with adjustment value entries related to the sales header.
            </summary>
            <param name="QtyType">
            General - filters all related value entries.
            Invoicing - filters only not invoiced value entries.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCustomerVATRegistrationNumber:Text">
            <summary>
            Returns the VAT registration number from a sales header.
            </summary>
            <returns>VAT registration number.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCustomerVATRegistrationNumberLbl:Text">
            <summary>
            Returns the VAT registration number field caption from a sales header.
            </summary>
            <returns>Caption of the VAT registration number field in the sales header.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCustomerGlobalLocationNumber:Text">
            <summary>
            Returns customer global location number. Currently defined to return an empty value.
            </summary>
            <returns>Empty text.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCustomerGlobalLocationNumberLbl:Text">
            <summary>
            Returns customer global location number caption. Currently defined to return an empty value.
            </summary>
            <returns>Empty text.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetStatusStyleText:Text">
            <summary>
            Returns document status field style expression based on the status of the sales header.
            </summary>
            <returns>Status style expression.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetPstdDocLinesToReverse">
            <summary>
            Opens a page with posted document lines that can be reversed. After the user selects the lines,
            they are copied to the current document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CalcInvDiscForHeader">
            <summary>
            Calculates invoice discount for a sales header if calculate invoice discount is enabled in the sales setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetSecurityFilterOnRespCenter">
            <summary>
            Filters the sales header for responsibility center set in the user setup or company information.
            The filter is set in filter group 2 and is hidden from the user.
            </summary>
            <remarks>
            Responsibility filter is set from user setup sales responsibility control filter field if this field is filled,
            otherwise it is set from the company information responsibility center field.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SynchronizeForReservations(Sales Line@,Sales Line)">
            <summary>
            Updates reservations data if location or bin have changed on the sales line.
            </summary>
            <remarks>
            Procedure is used on sales lines recreation process.
            </remarks>
            <param name="NewSalesLine">Return value: Updated sales line record.</param>
            <param name="OldSalesLine">The original sales line record before updates.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InventoryPickConflict(Enum::Microsoft#Sales#Document#Sales Document Type,Code[20],Enum::Microsoft#Foundation#Shipping#Sales Header Shipping Advice):Boolean">
            <summary>
            Determines if there is a conflict between inventory pick and sales line for a given sales document.
            </summary>
            <param name="DocType">The type of the sales document.</param>
            <param name="DocNo">The number of the sales document.</param>
            <param name="ShippingAdvice">The shipping advice for the sales document.</param>
            <returns>True if there is a conflict, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.WhseShipmentConflict(Enum::Microsoft#Sales#Document#Sales Document Type,Code[20],Enum::Microsoft#Foundation#Shipping#Sales Header Shipping Advice):Boolean">
            <summary>
            Determines if there is a conflict between warehouse shipment and sales line for a given sales document.
            </summary>
            <param name="DocType">The type of the sales document.</param>
            <param name="DocNo">The number of the sales document.</param>
            <param name="ShippingAdvice">The shipping advice for the sales document.</param>
            <returns>True if there is a conflict, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckItemAvailabilityInLines">
            <summary>
            Checks if all lines of the document are in stock.
            If the quantity in stock is too low, a notification is shown.
            </summary>
            <remarks>
            Notifications will be displayed if stock notifications are not disabled.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.QtyToShipIsZero:Boolean">
            <summary>
            Determines if the quantity to ship is zero for all sales document lines.
            </summary>
            <returns>True if the quantity to ship is zero for all lines, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.IsApprovedForPosting:Boolean">
            <summary>
            Checks if the sales document can be posted.
            It checks for status, approvals, payments and prepayments, and throws an error if conditions are not met.
            </summary>
            <returns>True if the sales header is approved for posting, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.IsApprovedForPostingBatch:Boolean">
            <summary>
            Determines if the sales document can be posted. It checks for status, approvals, payments, and prepayments.
            </summary>
            <remarks>
            All the checks are executed in the try function, so no errors will be thrown if they appear.
            </remarks>
            <returns>True if the sales header is approved for posting, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetLegalStatement:Text">
            <summary>
            Returns legal statement from sales setup. Currently defined to return an empty value.
            </summary>
            <returns>Empty text.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SendToPosting(Integer):Boolean">
            <summary>
            Posts a sales document by running the provided codeunit if the document is approved for posting.
            </summary>
            <remarks>
            The transaction is committed before the posting codeunit is run.
            After the posting codeunit is executed any errors that occur during the posting operation are shown.
            </remarks>
            <param name="PostingCodeunitID">Posting codeunit id that is executed.</param>
            <returns>True if the document was successfully posted, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CancelBackgroundPosting">
            <summary>
            Cancels a background posting job for a sales document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.EmailRecords(Boolean)">
            <summary>
            Sends an email with the sales document attached.
            </summary>
            <param name="ShowDialog">Determines whether to show the email dialog before sending the email.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetDocTypeTxt:Text[50]">
            <summary>
            Retrieves the full document type name based on the sales header document type.
            </summary>
            <returns>Retrieved document type name.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetFullDocTypeTxt:Text">
            <summary>
            Retrieves the full sales document type name based on the sales header document type.
            </summary>
            <returns>Retrieved document type name.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.LinkSalesDocWithOpportunity(Code[20])">
            <summary>
            Updates the link between the sales document and an opportunity.
            </summary>
            <param name="OldOpportunityNo">The opportunity number before the update.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SynchronizeAsmHeader">
            <summary>
            Updates the posting date of related assembly headers with the sales header.
            </summary>
            <remarks>
            During the update dialog window will be shown for the user.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckShippingAdvice">
            <summary>
            Checks if the sales document can be shipped completely and throws an error if it cannot.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetContactAsCompany(Contact,Contact@):Boolean">
            <summary>
            Retrieves the company contact associated with the provided contact.
            </summary>
            <param name="Contact">The contact record to get the associated company contact for.</param>
            <param name="SearchContact">Return value: associated company contact.</param>
            <returns>True if company contact was found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InvoicedLineExists:Boolean">
            <summary>
            Determines whether there are invoiced sales lines for the sales header.
            </summary>
            <returns>True if invoiced sales lines exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CreateDimSetForPrepmtAccDefaultDim">
            <summary>
            Updates dimensions on lines with prepayments.
            </summary>
            <remarks>
            Dimensions are updated on temporary sales line table.
            Temporary sales line table is defined as a local variable and the caller has no way to retrieve lines.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.OpenSalesOrderStatistics">
            <summary>
            Open statistics page for sales document.
            </summary>
            <remarks>
            Commit is executed before opening the statistics page.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.OpenDocumentStatistics">
            <summary>
            Open statistics page for sales documents.
            </summary>
            <remarks>
            Commit is executed before opening the statistics page.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.PrepareOpeningDocumentStatistics">
            <summary>
            Runs checks and prepares data needed to open the document statistics page.
            </summary>
            <remarks>
            It checks the user's permissions,
            calculates the invoice discount, creates a dimension set for order documents, and commits any changes made.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShowDocumentStatisticsPage:Integer">
            <summary>
            Opens a sales document statistics page based on the document type.
            After the page is closed, the recalculate invoice discount field is set to false on all sales document lines.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckAvailableCreditLimit:Decimal">
            <summary>
            Determines the available credit limit for the customer associated with the sales header.
            </summary>
            <returns>Available credit limit.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetStatus(Option)">
            <summary>
            Sets the status of a sales document.
            </summary>
            <param name="NewStatus">New status to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TransferItemChargeAssgntSalesToTemp(Item Charge Assignment (Sales)@,Item Charge Assignment (Sales)@)">
            <summary>
            Transfers item charge assignments to the temporary record set and deletes them from the original record.
            </summary>
            <param name="ItemChargeAssgntSales">Item charge assignment record set to transfer.</param>
            <param name="TempItemChargeAssgntSales">Return value: Temporary item charge assignment record set to transfer to.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckSalesPostRestrictions">
            <summary>
            Triggers the OnCheckSalesPostRestrictions event that allows customized restrictions to be added to the sales document post process.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CustomerCreditLimitExceeded">
            <summary>
            Triggers the OnCustomerCreditLimitExceeded event that allows a custom solution to be
            added when the calculated credit limit exceeds the customer's credit limit.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CustomerCreditLimitExceeded(Guid)">
            <summary>
            Triggers the OnCustomerCreditLimitExceeded event that allows a custom solution to be added
            when the calculated credit limit exceeds the customer's credit limit.
            </summary>
            <remarks>
            Used on sales lines and sales header check procedures which creates exceeded credit limit notification if needed.
            </remarks>
            <param name="NotificationID">GUID of the credit limit notification.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CustomerCreditLimitNotExceeded">
            <summary>
            Triggers the OnCustomerCreditLimitNotExceeded event that allows a custom solution to be added
            when the calculated credit limit not exceeds the customer's credit limit.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckSalesReleaseRestrictions">
            <summary>
            Checks the sales document approvals if the status is open.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.DeferralHeadersExist:Boolean">
            <summary>
            Determines whether there are related deferrals.
            </summary>
            <returns>True if any related deferal header exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetSellToCustomerFromFilter">
            <summary>
            Sets the sell-to customer number from the filter applied to the sell-to customer field if the filter is not blank.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetSellToCustomerFromFilter:Code[20]">
            <summary>
            Retrieves the sell-to customer no. of a sales header based on a single-value filter applied to the sell-to customer no. field.
            </summary>
            <remarks>
            Single-value filter is retrieved from the current filter group or filter group 2.
            </remarks>
            <returns>Sell-to customer number.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CopySellToCustomerFilter">
            <summary>
            Moves the filter on sell-to customer no. from the current filter group to filter group 2.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.BatchConfirmUpdateDeferralDate(Option@,Boolean,Date,Boolean,Date)">
            <summary>
            Raises a confirmation to update the deferral schedules on the lines to reflect the changed dates.
            If user confirms the update, the sales lines are updated.
            </summary>
            <param name="BatchConfirm"></param>
            <param name="ReplacePostingDate">If true, the sales header's posting date will be replaced with the specified PostingDateReq.</param>
            <param name="PostingDateReq">Posting date to replace.</param>
            <param name="ReplaceVATDate"></param>
            <param name="VATDateReq">Vat reporting date to replace.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetSelectedPaymentServicesText:Text">
            <summary>
            Retrieves the name of the payment service assigned to the document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetDefaultPaymentServices">
            <summary>
            Updates the payment service on the document with the default payment service from the setup.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ChangePaymentServiceSetting">
            <summary>
            Opens a page to either select an existing payment service or set up a new one if none exists.
            The payment service is then assigned to the document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.IsCreditDocType:Boolean">
            <summary>
            Check if sales header is credit document type. Credit documents are return orders and credit memos.
            </summary>
            <returns>True if the sales header is a credit document, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasSellToAddress:Boolean">
            <summary>
            Determines if sales header has sell-to information.
            </summary>
            <returns>True if sales header has sell-to information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasShipToAddress:Boolean">
            <summary>
            Determines if sales header has ship-to information.
            </summary>
            <returns>True if sales header has ship-to information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasBillToAddress:Boolean">
            <summary>
            Determines if sales header has bill-to information.
            </summary>
            <returns>True if sales header has bill-to information, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasItemChargeAssignment:Boolean">
            <summary>
            Determines if the sales header has any item charge assignments.
            </summary>
            <returns>True if item charge assignments exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CopyShipToCustomerAddressFieldsFromCust(Customer@)">
            <summary>
            Updates sales header with data from provided sell-to customer record.
            </summary>
            <param name="SellToCustomer">Sell-to customer record to copy data from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetShipToCustomerAddressFieldsFromShipToAddr(Ship-to Address)">
            <summary>
            Updates the document's shipping address from the provided ship-to address.
            </summary>
            <param name="ShipToAddr">Ship-to address to update the shipping address with.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetBillToCustomerAddressFieldsFromCustomer(Customer@)">
            <summary>
            Updates the billing information on the document from the provided bill-to customer.
            </summary>
            <param name="BillToCustomer">Bill-to customer to update the billing infromation from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetShipToAddress(Text[100],Text[50],Text[100],Text[50],Text[30],Code[20],Text[30],Code[10])">
            <summary>
            Sets the shipping address details for a sales header.
            </summary>
            <param name="ShipToName">New ship-to name value.</param>
            <param name="ShipToName2">New ship-to name 2 value.</param>
            <param name="ShipToAddress">New ship-to address value.</param>
            <param name="ShipToAddress2">New ship-to address 2 value.</param>
            <param name="ShipToCity">New ship-to city value.</param>
            <param name="ShipToPostCode">New ship-to post code value.</param>
            <param name="ShipToCounty">New ship-to county value.</param>
            <param name="ShipToCountryRegionCode">New ship-to country/region code value.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShipToAddressEqualsSellToAddress:Boolean">
            <summary>
            Determines if sell-to address matches the ship-to address.
            </summary>
            <returns>True if the address match, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.BillToAddressEqualsSellToAddress:Boolean">
            <summary>
            Determines if sell-to address matches the bill-to address.
            </summary>
            <returns>True if addresses match, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CopySellToAddressToShipToAddress">
            <summary>
            Copies the sell-to address to the ship-to address.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CopySellToAddressToBillToAddress">
            <summary>
            Copies the sell-to address to the bill-to address if bill-to and sell-to customer numbers are the same.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ConfirmCloseUnposted:Boolean">
            <summary>
            Raises a dialog to confirm closing a page if unposted lines exist.
            </summary>
            <returns>True if page should be closed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InitFromSalesHeader(Sales Header)">
            <summary>
            Initializes a sales header from the provided sales header.
            </summary>
            <param name="SourceSalesHeader">Sales header to copy information from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetWorkDescription(Text)">
            <summary>
            Updates current sales header work description with the provided description.
            </summary>
            <param name="NewWorkDescription">New work description.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetWorkDescription:Text">
            <summary>
            Retrieves work description from the sales header.
            </summary>
            <returns>Work description.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.LookupContact(Code[20],Code[20],Contact@)">
            <summary>
            Filters the contact for the company number that is associated with either the customer or contact number.
            </summary>
            <remarks>
            If no business relations exist within provided customer and contacts
            and document type is quote, then filters company contact based on provided contact number.
            </remarks>
            <param name="CustomerNo">The number of the customer to filter the contact for.</param>
            <param name="ContactNo">The number of the contact to look up.</param>
            <param name="Contact">Return value: Filtered contact record set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetAllowSelectNoSeries">
            <summary>
            Sets the global flag SelectNoSeriesAllowed to true.
            </summary>
            <remarks>
            The global flag is used to determine if the lookup for the number series can been shown.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetDefaultSalesperson">
            <summary>
            Sets the default salesperson code for the sales header.
            </summary>
            <remarks>
            Retrieves default salesperson code from user setup. If retrieved salesperson code privacy is not blocked,
            sets it for the sales header.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetUserSetupSalespersonCode:Code[20]">
            <summary>
            Retrieves the salesperson code of the current user from the user setup.
            </summary>
            <returns>Salesperson code of the current user from the user setup.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SelltoCustomerNoOnAfterValidate(Sales Header@,Sales Header@)">
            <summary>
            Removes the filter on customer number if the customer number has changed.
            </summary>
            <param name="SalesHeader">The current sales header record.</param>
            <param name="xSalesHeader">Sales header record before the changes.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.PerformManualRelease(Sales Header@)">
            <summary>
            Releases the sales documents that are not yet released.
            </summary>
            <param name="SalesHeader">Filtered sales headers to release.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.PerformManualRelease">
            <summary>
            Releases the sales document if it's not already released.
            </summary>
            <remarks>
            The transaction is committed after release.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.PerformManualReopen(Sales Header@)">
            <summary>
            Reopens sales documents that are not already open.
            </summary>
            <param name="SalesHeader">Filtered sales headers to reopen.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SelectSalesHeaderNewCustomerTemplate:Code[20]">
            <summary>
            Opens a page for selecting a customer template to use for creating a new customer.
            </summary>
            <remarks>
            If sell-to contact has no business relations a confirmation for template selection is raised.
            If the user confirms, it commits any changes
            and returns the code of the new customer template selected by the user.
            </remarks>
            <returns>Customer template code.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.RecallModifyAddressNotification(Guid)">
            <summary>
            Recalls a sent notification for the provided notification GUID.
            </summary>
            <remarks>
            If it is a credit document or if notification isn't enabled, it won't recall the notification.
            </remarks>
            <param name="NotificationID">GUID of the notification to recall.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetModifyCustomerAddressNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if the sell-to address on sales documents is different
            from the customer's existing address.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetModifyBillToCustomerAddressNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if the bill-to address on sales documents is different
            from the customer's existing address.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetLineInvoiceDiscountResetNotificationId:Guid">
            <summary>
            Returns a GUID for a notification that warns if the invoice discount amount for the sales line record has been reset.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetWarnWhenZeroQuantitySalesLinePosting:Guid">
            <summary>
            Returns a GUID for a notification that warns before posting lines on sales documents where quantity is 0.
            </summary>
            <returns>Notification GUID.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetModifyCustomerAddressNotificationDefaultState">
            <summary>
            Inserts the default notification to warn that sell-to address on sales documents is different
            from the customer's existing address.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetModifyBillToCustomerAddressNotificationDefaultState">
            <summary>
            Inserts the default notification to warn that bill-to address on sales documents is different
            from the customer's existing address.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.DontNotifyCurrentUserAgain(Guid)">
            <summary>
            Disables a specified notification for the current user.
            </summary>
            <param name="NotificationID">GUID of the notification that needs to be disabled.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasDifferentSellToAddress(Customer):Boolean">
            <summary>
            Determines if the sell-to address matches the provided customer's address.
            </summary>
            <param name="Customer">Customer to compare the sell-to address with.</param>
            <returns>True if sell-to address is different from provided customer's address, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasDifferentBillToAddress(Customer):Boolean">
            <summary>
            Determines if the bill-to address matches the provided customer's address.
            </summary>
            <param name="Customer">Customer to compare the bill-to address with.</param>
            <returns>True if bill-to address is different from provided customer's address, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.HasDifferentShipToAddress(Customer):Boolean">
            <summary>
            Determines if the ship-to address matches the provided customer's address.
            </summary>
            <param name="Customer">Customer to compare the ship-to address with.</param>
            <returns>True if ship-to address is different from provided customer's address, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShowInteractionLogEntries">
            <summary>
            Opens the interaction log entries page where entries related to the sales document are displayed.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetBillToNo:Code[20]">
            <summary>
            Retrieves the bill-to (customer or contact) number for a sales document.
            </summary>
            <remarks>
            If sales document type is quote where the bill-to customer number is blank, but the bill-to contact number
            and bill-to customer template code are specified, it returns the bill-to contact number.
            For all other cases, it returns the bill-to customer number.
            </remarks>
            <returns>Bill-to number.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCurrencySymbol:Text[10]">
            <summary>
            Gets the currency symbol for sales document. If currency symbol is not specified returns the currency code.
            </summary>
            <returns>Currency symbol.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateShipToSalespersonCode">
            <summary>
            Updates the salesperson code from either the ship-to addresses or bill-to customer's salesperson.
            </summary>
            <remarks>
            If neither are set, it uses the default salesperson from the user setup.
            If salesperson is blocked, it doesn't get assigned.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.UpdateShipToSalespersonCode(Integer)">
            <summary>
            Updates the salesperson code from either the ship-to addresses or bill-to customer's salesperson.
            </summary>
            <remarks>
            If neither are set, it uses the default salesperson from the user setup.
            If salesperson is blocked, it doesn't get assigned.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetSalespersonCode(Code[20],Code[20]@)">
            <summary>
            Updates salesperson code. If the provided salesperson code privacy is not blocked, returns provided salesperson code,
            otherwise returns empty value to assign.
            </summary>
            <remarks>
            If the provided salesperson code is empty, it uses the default one from the user setup.
            </remarks>
            <param name="SalesPersonCodeToCheck">Salesperson code to set.</param>
            <param name="SalesPersonCodeToAssign">Return value: Salesperson code to assign.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ValidateSalesPersonOnSalesHeader(Sales Header,Boolean,Boolean)">
            <summary>
            Checks if the document can be created/posted depending on the privacy blocked of the salesperson.
            </summary>
            <param name="SalesHeader2">Sales header on which salesperson code has been changed.</param>
            <param name="IsTransaction">Determines if the check is completed during a write transaction.</param>
            <param name="IsPostAction">Determines if the check is completed during the posting.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.ShouldSearchForCustomerByName(Code[20]):Boolean">
            <summary>
            Determines whether a search for a customer should be performed by name for the provided customer number.
            </summary>
            <param name="CustomerNo">Customer number to check.</param>
            <returns>True if customer should be searched by name, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CanCalculateTax:Boolean">
            <summary>
            Returns the value of the global variable SkipTaxCalculation.
            </summary>
            <remarks>
            Currently SkipTaxCalculation in sales header is used only in variable set and get procedures.
            </remarks>
            <returns>The value of the global variable SkipTaxCalculation.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetSkipTaxCalulation(Boolean)">
            <summary>
            Sets the value of the global variable SkipTaxCalculation.
            </summary>
            <remarks>
            Currently SkipTaxCalculation in sales header is used only in variable set and get procedures.
            </remarks>
            <param name="Skip">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestQuantityShippedField(Sales Line)">
            <summary>
            Checks if the sales line quantity shipped is zero. If it is not, an error is raised.
            </summary>
            <param name="SalesLine">Sales line which shipped quantity has to be checked.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestStatusIsNotPendingApproval:Boolean">
            <summary>
            Determines if sales document status is not pending approval.
            </summary>
            <returns>True if status is not pending approval, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestStatusIsNotPendingPrepayment:Boolean">
            <summary>
            Determines if sales document status is not pending prepayment.
            </summary>
            <returns>True if status is not pending prepayment, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestStatusIsNotReleased:Boolean">
            <summary>
            Determines if sales document status is not released.
            </summary>
            <returns>True if status is not released, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.TestStatusOpen">
            <summary>
            Checks if sales document status is open. If it is not, an error is raised.
            </summary>
            <remakrs>
            If global flag StatusCheckSuspended is set to true, the procedure is not executed.
            </remakrs>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SuspendStatusCheck(Boolean)">
            <summary>
            Sets the value of the global flag StatusCheckSuspended.
            </summary>
            <remarks>
            The global flag is used to suspend the check if the document status is open.
            </remarks>
            <param name="Suspend">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CheckForBlockedLines">
            <summary>
            Checks if there are any blocked items or resources in the sales lines of the sales header.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CopyDocument">
            <summary>
            Runs the copy sales document report for the sales header.
            </summary>
            <remarks>
            The report creates new sales documents based on the existing one.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.LookupSellToCustomerName(Text@):Boolean">
            <summary>
            Opens customer lookup page to select a customer.
            </summary>
            <param name="CustomerName">Return value: Selected customer name.</param>
            <returns>True if customer is selected, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetStatusCheckSuspended:Boolean">
            <summary>
            Returns the value of the global flag StatusCheckSuspended.
            </summary>
            <remarks>
            The global flag is used to suspend the check if the document status is open.
            </remarks>
            <returns>The value of the global flag StatusCheckSuspended.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetCalledFromWhseDoc:Boolean">
            <summary>
            Returns the value of the global flag CalledFromWhseDoc.
            </summary>
            <remarks>
            Global flag CalledFromWhseDoc is used on posting date validation to check if currency factor can be updated.
            </remarks>
            <returns>The value of the global flag CalledFromWhseDoc.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetCalledFromWhseDoc(Boolean)">
            <summary>
            Sets the value of the global flag CalledFromWhseDoc.
            </summary>
            <remarks>
            Global flag CalledFromWhseDoc is set to true on init source header in warahoure shipment and receipt posting.
            </remarks>
            <param name="NewCalledFromWhseDoc">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.GetUseDate:Date">
            <summary>
            Returns the date to use for the sales document.
            </summary>
            <returns>Posting date if posting date is set in sales header, otherwise work date.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.InitPostingNoSeries">
            <summary>
            Initializes the number series for sales document posting based on the document type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the document from default dimensions for the related entry specified in the field.
            </summary>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SelltoContactLookup:Boolean">
            <summary>
            Opens a contact lookup page and validates the sell-to contact number with the selected contact.
            </summary>
            <returns>True if the contact was validated, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SetWarnZeroQuantitySalesPosting">
            <summary>
            Inserts the default notification to warn before posting lines on sales documents where quantity is 0.
            </summary>
            <remarks>
            Notification is enabled by default.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Header.SalesLinesEditable:Boolean">
            <summary>
            Determines if the sales lines are editable based on whether sell-to information is in the sales header.
            </summary>
            <returns>True if sales lines are editable, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitOutstanding">
            <summary>
            Updates outstanding quantities and amounts to reflect changes in posted quantities and amounts.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitOutstandingAmount">
            <summary>
            Updates outstanding amounts to reflect changes in quantity.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitQtyToShip">
            <summary>
            Updates quantity to ship and quantity to invoice based on the outstanding quantities
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitQtyToReceive">
            <summary>
            Updates quantity to receive and quantity to invoice based on the outstanding quantity and document type.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitQtyToInvoice">
            <summary>
            Prepares the sales line for the next invoice posting by setting the quantities and amounts to be invoiced.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.MaxQtyToInvoice:Decimal">
            <summary>
            Determines the maximum quantity that can be invoiced for the current sales line.
            </summary>
            <returns>The maximum quantity that can be invoiced.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.MaxQtyToInvoiceBase:Decimal">
            <summary>
            Determines the maximum quantity (base) that can be invoiced for the current sales line.
            </summary>
            <returns>The maximum quantity (base) that can be invoiced.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.MaxQtyToShipBase(Decimal):Decimal">
            <summary>
            Ensures that the quantity to ship does not exceed the outstanding quantity.
            </summary>
            <param name="QtyToShipBase">The quantity to ship to be checked.</param>
            <returns>The maximum quantity that can be shipped.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcLineAmount:Decimal">
            <summary>
            Calculates the net line amount after applying the invoice discount.
            </summary>
            <returns>The calculated line amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcShipmentDateForLocation">
            <summary>
            Updates the shipment date based on the location's customized calendar.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CopyFromSalesLine(Sales Line)">
            <summary>
            Copies values from a specified sales line to the current sales line.
            </summary>
            <param name="FromSalesLine">The sales line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CopyFromSalesShptLine(Sales Shipment Line)">
            <summary>
            Copies values from a specified sales shipment line to the current sales line.
            </summary>
            <param name="FromSalesShptLine">The sales shipment line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CopyFromSalesInvLine(Sales Invoice Line)">
            <summary>
            Copies values from a specified sales invoice line to the current sales line.
            </summary>
            <param name="FromSalesInvLine">The sales invoice line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CopyFromReturnRcptLine(Return Receipt Line)">
            <summary>
            Copies values from a specified return receipt line to the current sales line.
            </summary>
            <param name="FromReturnRcptLine">The return receipt line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CopyFromSalesCrMemoLine(Sales Cr#Memo Line)">
            <summary>
            Copies values from a specified sales cr. memo line to the current sales line.
            </summary>
            <param name="FromSalesCrMemoLine">The sales cr. memo line to copy from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSkipTaxCalculation:Boolean">
            <summary>
            Returns the value of global SkipTaxCalculation flag. The flag is unused in the object.
            </summary>
            <returns>The value of global SkipTaxCalculation flag.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetSkipTaxCalulation(Boolean)">
            <summary>
            Sets the value of global SkipTaxCalculation flag. The flag is unused in the object.
            </summary>
            <param name="Skip">The value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetSalesHeader(Sales Header)">
            <summary>
            Updates the global SalesHeader variable and initializes the currency based on the new sales header.
            </summary>
            <remarks>
            The global SalesHeader is used whenever data from the sales header is used in other procedures on the object.
            </remarks>
            <param name="NewSalesHeader">The sales header to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSalesHeader:Sales Header">
            <summary>
            Gets the sales header associated with the sales line.
            Ensures the global SalesHeader variable is correctly set.
            </summary>
            <returns>The sales header of the current line.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSalesHeader(Sales Header@,Currency@)">
            <summary>
            Gets the sales header and the currency associated with the sales line.
            Ensures that the global SalesHeader variable and the currency are correctly set.
            </summary>
            <param name="OutSalesHeader">Return value: The sales header of the current line.</param>
            <param name="OutCurrency">Return value: The currency of the current line.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetItem:Item">
            <summary>
            Gets the item record from the item number on the sales line.
            </summary>
            <returns>The item record.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetItem(Item@)">
            <summary>
            Gets the item record from the the item number on the sales line.
            </summary>
            <param name="Item">Return value: The item record.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetResource:Resource">
            <summary>
            Gets the resource record from the resource number on the sales line.
            The global Resource variable is updated with the retrieved resource.
            </summary>
            <returns>The resource record.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetRemainingQty(Decimal@,Decimal@)">
            <summary>
            Calculates the quantity and quantity (base) that remain unreserved on the sales line.
            </summary>
            <param name="RemainingQty">Return value: The remaining unreserved quantity.</param>
            <param name="RemainingQtyBase">Return value: The remaining unreserved quantity (base).</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetReservationQty(Decimal@,Decimal@,Decimal@,Decimal@):Decimal">
            <summary>
            Gets the quantities related to reservations for the sales line.
            </summary>
            <param name="QtyReserved">Return value: The reserved quantity.</param>
            <param name="QtyReservedBase">Return value: The reserved quantity (base).</param>
            <param name="QtyToReserve">Return value: The quantity to reserve.</param>
            <param name="QtyToReserveBase">Return value: The quantity to reserve (base).</param>
            <returns>The quantity per unit of measure.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSourceCaption:Text">
            <summary>
            Returns a caption containing the document type, document number and line number separated by spaces for the sales line.
            </summary>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetReservationEntry(Reservation Entry@)">
            <summary>
            Initializes the reservation entry with information from the sales line.
            </summary>
            <param name="ReservEntry">Return value: The initialized reservation entry.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetReservationFilters(Reservation Entry@)">
            <summary>
            Filters the reservation entries for the sales line.
            </summary>
            <param name="ReservEntry">The reservation entry to filter.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ReservEntryExist:Boolean">
            <summary>
            Checks if a reservation entry exists for the sales line.
            </summary>
            <returns>True if a reservation entry exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsPriceCalcCalledByField(Integer):Boolean">
            <summary>
            Checks if the price calculation was triggered by a specific field.
            </summary>
            <param name="CurrPriceFieldNo">The field number of the field that triggered the price calculation.</param>
            <returns>True if the invoking field no. is the same as the planned field no., otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.PlanPriceCalcByField(Integer)">
            <summary>
            Plans for a price calculation triggered by a specific field, ensuring that the calculation is performed only once.
            </summary>
            <remarks>
            This field no. is checked in IsPriceCalcCalledByField to determine if price calculation should be performed .   
            </remarks>
            <param name="CurrPriceFieldNo">The field number of the field that can cause price calculation.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ClearFieldCausedPriceCalculation">
            <summary>
            Resets the tracking of the field that is planned to trigger a price calculation.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateUnitPrice(Integer)">
            <summary>
            Updates the unit price on the sales line.    
            </summary>
            <param name="CalledByFieldNo">The field number of the field that triggered the price calculation.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateUnitPriceByField(Integer)">
            <summary>
            Updates the unit price on the sales line.
            The calculation is only performed if the field number of the field that triggered the price calculation is the same as the planned field no.
            </summary>
            <param name="CalledByFieldNo">The field number of the field that triggered the price calculation.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetPriceCalculationHandler(Enum::Microsoft#Pricing#PriceList#Price Type,Sales Header,Interface::Microsoft#Pricing#Calculation#Price Calculation@)">
            <summary>
            Gets the "Price Calculation" implementation for the sales line.
            </summary>
            <param name="PriceType">The type of price calculation to get.</param>
            <param name="SalesHeader">The sales header used for getting the price calculation.</param>
            <param name="PriceCalculation">Return value: The "Price Calculation" implementation.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetLineWithPrice(Interface::Microsoft#Pricing#PriceList#Line With Price@)">
            <summary>
            Returns a default "Line With Price" implementation if not overridden.
            </summary>
            <param name="LineWithPrice">Return value: The default or overridden "Line With Price" implementation.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ApplyDiscount(Interface::Microsoft#Pricing#Calculation#Price Calculation@)">
            <summary>
            Applies the discount and assigns the calculated amount to the sales line.
            </summary>
            <param name="PriceCalculation">The "Price Calculation" implementation to use.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ApplyPrice(Integer,Interface::Microsoft#Pricing#Calculation#Price Calculation@)">
            <summary>
            Applies the price and assigns the calculated amount to the sales line.
            </summary>
            <param name="CalledByFieldNo">The field number of the field that triggered the price calculation.</param>
            <param name="PriceCalculation">The "Price Calculation" implementation to use.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CountDiscount(Boolean):Integer">
            <summary>
            Wrapper for price calculation method CountDiscount.
            Returns the number of price list lines with discounts that fit the sales line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>The number of price list lines with discounts.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CountPrice(Boolean):Integer">
            <summary>
            Wrapper for price calculation method CountPrice.
            Returns the number of price list lines with prices that fit the sales line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>The number of price list lines with prices.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.DiscountExists(Boolean):Boolean">
            <summary>
            Wrapper for price calculation method DiscountExists.
            Returns true if any price list line with discount that fit the sales line exist.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>True if any price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.PriceExists(Boolean):Boolean">
            <summary>
            Wrapper for price calculation method PriceExists.
            Returns true if any price list line with price or cost that fit the sales line exist.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>True if any price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.PickDiscount">
            <summary>
            Wrapper for price calculation method PickDiscount.
            Opens a price list selection to pick from lines with discount that fit the sales line.
            After the selection the amounts are assigned to the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.PickPrice">
            <summary>
            Wrapper for price calculation method PickPrice.
            Opens a price list selection to pick from lines with price or cost that fit the sales line.
            After the selection the amounts are assigned to the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateReferencePriceAndDiscount">
            <summary>
            Applies the discount and price for "Item Reference No." field and assigns the calculated amount to the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdatePrepmtSetupFields">
            <summary>
            Updates the prepayment VAT fields on the sales line based on the VAT posting setup
            to account for updates on the prepayment sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdatePrepmtAmounts">
            <summary>
            Updates the prepayment amounts on the sales line to reflect changes in the outstanding amount.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateAmounts">
            <summary>
            Updates line, prepayment, deferral, and VAT amounts for the sales line 
            to account for any changes of the sales line that affect the amounts.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateVATAmounts">
            <summary>
            Updates the VAT amounts on the sales line based on the VAT calculation type and other line details
            to reflect changes in fields that affect them, like line amount, VAT %, and others.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckItemAvailable(Integer)">
            <summary>
            Verifies the availability of the item on the shipment date.
            If the item is not available, a notification is shown and an error is raised to stop the update.
            </summary>
            <remarks>
            The check is only performed if CalledByFieldNo matches the field that initated the call stack (CurrFieldNo).
            If the shipment date is empty, it's set from either the header or the current work date.
            </remarks>
            <param name="CalledByFieldNo">The field no. of the field that initiated the check.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowOrderTracking">
            <summary>
            Opens a Order Tracking summary page for the current sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowReservation">
            <summary>
            Opens a reservation summary page for the current sales line.
            After the page closes, updates the planned status of the line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowReservationEntries(Boolean)">
            <summary>
            Opens a reservation entries page for the current sales line.
            </summary>
            <param name="Modal">If true, execution is paused until the page is closed.</param> 
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AutoReserve">
            <summary>
            Attempts to automatically reserve the quantity of the current sales line based on the item availability.
            If the quantity cannot be reserved automatically, a message is shown and the user is prompted to reserve manually.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AutoAsmToOrder">
            <summary>
            Creates or updates the assembly order associated with the sales line to reflect the current line details.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDate:Date">
            <summary>
            Retrieves the date to be used for operations on the sales line, which is the associated sales header's posting date or the work date if the posting date is not set.
            </summary>
            <returns>The date to be used for operations on the sales line.</returns> 
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcPlannedDeliveryDate(Integer):Date">
            <summary>
            Calculates the planned delivery date based on the shipping agent, planned shipment date 
            and the field that initiated the calculation.
            </summary>
            <param name="CurrFieldNo">The field number of the field that initiated the calculation.</param>
            <returns>The calculated planned delivery date.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcPlannedShptDate(Integer):Date">
            <summary>
            Calculates the planned shipment date based on the shipping agent and the field that initiated the calculation.
            </summary>
            <param name="CurrFieldNo">The field number of the field that initiated the calculation.</param>
            <returns>The calculated planned shipment date.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcShipmentDate:Date">
            <summary>
            Calculates the shipment date based on the shipping agent, location and planned shipment date.
            </summary>
            <returns>The calculated shipment date.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SignedXX(Decimal):Decimal">
            <summary>
            Adjusts the sign of the provided value based on the document type of the sales line.
            </summary>
            <param name="Value">The value to adjust the sign of.</param>
            <returns>The value with its sign adjusted based on the document type.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowDimensions:Boolean">
            <summary>
            Opens a page for editing dimensions for the sale line.
            After the page closes, updates the dimensions on the sales line and assembly orders.
            </summary>
            <remarks>
            If the dimensions are changed for a line that is already shipped, a confirmation is raised. 
            If not confirmed, and error is raised to stop the update.
            </remarks>
            <returns>True if the dimensions were changed, otherwise, false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.OpenItemTrackingLines">
            <summary>
            Opens a page for editing item tracking lines for the sale line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CreateDim(List of [Dictionary])">
            <summary>
            Initializes dimensions on the sales line for the provided list of default dimension sources.
            </summary>
            <param name="DefaultDimSource">The list of default dimension sources.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ValidateShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Checks if the provided shortcut dimension code and value are valid.
            </summary>
            <remarks>
            Checks include if the dimension or value are blocked or if the value is allowed.
            </remarks>
            <param name="FieldNumber">The number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">The value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.LookupShortcutDimCode(Integer,Code[20]@)">
            <summary>
            Opens a page for looking up a shortcut dimension code value.
            </summary>
            <remarks>
            If the dimensions are changed for a line that is already shipped, a confirmation is raised. 
            If not confirmed, and error is raised to stop the update.
            </remarks>
            <param name="FieldNumber">The number of the shortcut dimension.</param>
            <param name="ShortcutDimCode">Return value: The value of the shortcut dimension.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowShortcutDimCode(Code[20][]@)">
            <summary>
            Gets an array of shortcut dimension values from the dimensions of the sales line.
            </summary>
            <param name="ShortcutDimCode">Return value: The array of shortcut dimension values.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SelectMultipleItems">
            <summary>
            Opens a page for selecting multiple items to add to the document.
            Selected items are added to the document.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AddItems(Text)">
            <summary>
            Adds items to the document based on the provided selection filter.
            </summary>
            <param name="SelectionFilter">The filter to use for selecting items.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AddItem(Sales Line@,Code[20])">
            <summary>
            Adds an item to the document.
            </summary>
            <remarks>
            After the line is added, assembly order is automatically created if required.
            If the item has extended text, the text is added as a line.
            </remarks>
            <param name="SalesLine">Return value: The added sales line. Sales line must have the document type and number set.</param>
            <param name="ItemNo">Return value: The number of the item to add.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ProcessSalesLine(Sales Line@)">
            <summary>
            Creates or updates assembly orders if assemble-to-order is required.
            Creates extended text lines applicable to the provided sales line.
            </summary>
            <param name="SalesLine">The sales line to process.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitNewLine(Sales Line@)">
            <summary>
            Initializes a new sales line based on the current sales line.
            </summary>
            <param name="NewSalesLine">Return value: The new sales line.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowItemSub">
            <summary>
            Opens a page for looking up item substitutions for the current item on the sales line.
            If substitution is selected, the item is replaced with the selected item.
            </summary>
            <remarks>
            If item is substituted, it also adds any extended text for the new item.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowNonstock">
            <summary>
            Opens a page for selecting a nonstock item to add to the document.
            If a nonstock item is selected, it is added to the document and the unit price is updated.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetFAPostingGroup">
            <summary>
            Sets tax and posting groups codes for a fixed asset sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetCaptionClass(Integer):Text[80]">
            <summary>
            Gets a caption class for a field.
            </summary>
            <param name="FieldNumber">The number of the field to get the caption class for.</param>
            <returns>The caption class of a field.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSKU:Boolean">
            <summary>
            Gets a stockkeeping unit for the current sales line and saves it in a global variable SKU.
            </summary>
            <returns>True if a stockkeeping unit was found, otherwise, false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSKU(Stockkeeping Unit@):Boolean">
            <summary>
            Gets a stockkeeping unit for the current sales line.
            </summary>
            <param name="StockkeepingUnit">Return value: The stockkeeping unit for the current sales line.</param>
            <returns>True if a stockkeeping unit was found, otherwise, false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetUnitCost">
            <summary>
            Finds and assigns the unit cost for the item specified on the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowItemChargeAssgnt">
            <summary>
            Opens a page for editing item charge assignment for the item charge sales line.
            If assignments don't exist for the item charge, new assignments are created and committed before opening the page.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateItemChargeAssgnt">
            <summary>
            Updates amounts on item charge assignments for the current sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.DeleteItemChargeAssignment(Enum::Microsoft#Sales#Document#Sales Document Type,Code[20],Integer)">
            <summary>
            Deletes item charge assignments applied to a sales document line.
            </summary>
            <param name="DocType">Document type of the applied-to document.</param>
            <param name="DocNo">Document number of the applied-to document.</param>
            <param name="DocLineNo">Line number of the applied-to document.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.DeleteChargeChargeAssgnt(Enum::Microsoft#Sales#Document#Sales Document Type,Code[20],Integer)">
            <summary>
            Deletes item charge assignments associated with a sales line.
            </summary>
            <param name="DocType">Document type of the sales line.</param>
            <param name="DocNo">Document number of the sales line.</param>
            <param name="DocLineNo">Document line number of the sales line.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.TestStatusOpen">
            <summary>
            Tests if sales header of the line is open.
            </summary>
            <remarks>
            Check is executed only for non-system created lines, type changes, and lines with non-blank type.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetSuspendedStatusCheck:Boolean">
            <summary>
            Returns the value of the global variable StatusCheckSuspended.
            </summary>
            <returns>The value of the global variable StatusCheckSuspended.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SuspendStatusCheck(Boolean)">
            <summary>
            Sets the value of the global variable StatusCheckSuspended.
            </summary>
            <remarks>
            Suspends several checks like testing for status open on sales header, sales line check on shipment date validate, and amount updates on delete.
            </remarks>
            <param name="Suspend">The new value to set.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SwitchLinesWithErrorsFilter(Boolean@)">
            <summary>
            Toggles the filter for lines with errors between displaying all lines and only lines with errors.
            </summary>
            <param name="ShowAllLinesEnabled">Return value: A toggle for showing all lines or just lines with errors. After switching the filter, the toggle is returned with the opposite value.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateVATOnLines(Option,Sales Header@,Sales Line@,VAT Amount Line@):Boolean">
            <summary>
            Recalculates and updates line and VAT amounts on all lines of the document.
            </summary>
            <remarks>
            QtyType::Shipping exits the function without updating the lines.
            QtyType::Invoicing doesn't update line and VAT amounts, only invoice discount amount to invoice and VAT difference.
            </remarks>
            <param name="QtyType">The type of quantity to consider for the update (Qty, QtyToInvoice, QtyToShip).</param>
            <param name="SalesHeader">The sales header of the document. The sales lines are filtered for this document.</param>
            <param name="SalesLine">The sales line record set that is looped through. Pre-existing filters will narrow down the lines to consider.</param>
            <param name="VATAmountLine">VAT amount line record set used in VAT calculations. The line used is retrieved from this set for each sales line.</param>
            <returns>True if any line was modified; otherwise, false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcVATAmountLines(Option,Sales Header@,Sales Line@,VAT Amount Line@)">
            <summary>
            Creates VAT amount lines for all applicable sales lines in the document.
            An overload that sets IncludePrepayments to true.
            </summary>
            <remarks>
            VATAmountLine parameter must be temporary as DeleteAll is called on it.
            </remarks>    
            <param name="QtyType">The type of quantity to consider for the calculation (Qty, QtyToInvoice, QtyToShip).</param>
            <param name="SalesHeader">The sales header of the document. The sales lines are filtered for this document.</param>
            <param name="SalesLine">The sales line record set that is looped through. Pre-existing filters will narrow down the lines to consider.</param>
            <param name="VATAmountLine">Return value: VAT amount line set where records are inserted. This must be a temporary variable as DeleteAll is called on it.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcVATAmountLines(Option,Sales Header@,Sales Line@,VAT Amount Line@,Boolean)">
            <summary>
            Creates VAT amount lines for all applicable sales lines in the document.
            </summary>
            <remarks>
            VATAmountLine parameter must be temporary as DeleteAll is called on it.
            IncludePrepayments is only applicable to Invoicing and Shipping QtyTypes.
            </remarks>
            <param name="QtyType">The type of quantity to consider for the calculation (Qty, QtyToInvoice, QtyToShip).</param>
            <param name="SalesHeader">The sales header of the document. The sales lines are filtered for this document.</param>
            <param name="SalesLine">The sales line record set that is looped through. Pre-existing filters will narrow down the lines to consider.</param>
            <param name="VATAmountLine">Return value: VAT amount line set where records are inserted. This must be a temporary variable as DeleteAll is called on it.</param>
            <param name="IncludePrepayments">A flag indicating whether amount used in calculation should include prepayment amount</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetCPGInvRoundAcc(Sales Header@):Code[20]">
            <summary>
            Gets the account number to use for invoice rounding from the customer posting group. If invoice rounding is disabled, returns blank
            </summary>
            <param name="SalesHeader">The sales header of the document.</param>
            <returns>The invoice rounding account number</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetVATAmountLineOfMaxAmt(VAT Amount Line@,Sales Line):Boolean">
            <summary>
            Gets the VAT amount line for the sales line with the maximum absolute amount from the VAT amount line set.
            </summary>
            <param name="VATAmountLine">Return value: The VAT amount line with the maximum absolute amount. The search is performed on the record set passed in this parameter.</param>
            <param name="SalesLine">The sales line record to filter the VAT amount line set.</param>
            <returns>True if a VAT amount line was found, otherwise, false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcInvDiscToInvoice">
            <summary>
            Updates the invoice discount amount to invoice based on the current quantity and quantity to invoice.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateWithWarehouseShip">
            <summary>
            Updates the quantities to ship or receive based on the document type, quantity, and location/warehouse requirements.
            </summary>
            <remarks>
            If the default quantity to ship in sales setup is set to blank, 
            the quantity to ship, recieve and invoice are always set to zero.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckWarehouse(Boolean)">
            <summary>
            Checks that the warehouse requirements for the sales line, such as shipment, pick, receive, and put-away
            are met based on the location and document type.
            </summary>
            <remarks>
            If a dialog message is shown, it will either be a message or an error depending on the warehouse requirements and the document type.
            </remarks>
            <param name="ShowDialogMessage">Determines whether to show a dialog message if the warehouse requirements are not met.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckWarehouseForQtyToShip">
            <summary>
            Checks the warehouse requirements for the quantity to be shipped.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateDates">
            <summary>
            Updates the shipment and delivery dates for the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetItemTranslation">
            <summary>
            Retrieves the item translation for the language of the document and updates the descriptions on the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.PriceExists:Boolean">
            <summary>
            Returns true if any price list line with price or cost that fit the sales line exist.
            This is an overload that sets ShowAll to true.
            </summary>
            <returns>True if any price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.LineDiscExists:Boolean">
            <summary>
            Returns true if any price list line with discount that fit the sales line exist.
            This is an overload that sets ShowAll to true.
            </summary>
            <returns>True if any price list line is found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.RowID1:Text[250]">
            <summary>
            Creates a unique row identifier for the sales line used for item tracking.
            </summary>
            <returns>The unique row identifier.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDefaultBin">
            <summary>
            Gets the default bin for the sales line item based on the requriments of the location.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetATOBin(Location,Code[20]@):Boolean">
            <summary>
            Retrieves the Assembly-to-Order (ATO) bin for a given location.
            </summary>
            <param name="Location">The location record to retrieve the ATO bin for.</param>
            <param name="BinCode">Return value: The ATO bin code.</param>
            <returns>True if the ATO bin was found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsInbound:Boolean">
            <summary>
            Determines if the sales document this line belongs to is an inbound document.
            </summary>
            <returns>True if the document is inbound, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckAssocPurchOrder(Text[250])">
            <summary>
            Raises an error if the sales line is associated with a purchase order to ensure no changes are made to the line.
            </summary>
            <param name="TheFieldCaption">
            The caption of the field that is being changed. 
            Used to determine if the check is executed for a field change or a line deletion.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckServItemCreation">
            <summary>
            Ensures that items that create a service item are not shipped in fractional quantities.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ItemExists(Code[20]):Boolean">
            <summary>
            Determines if the provided item number exists.
            </summary>
            <remarks>
             If the line type is not item, the function returns true.
            </remarks>
            <param name="ItemNo">Item number to check.</param>
            <returns>True if the item exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FindOrCreateRecordByNo(Code[20]):Code[20]">
            <summary>
            Finds or creates a record by a given number and returns the number of the found or created record.
            </summary>
            <param name="SourceNo">A record number to find or create.</param>
            <returns>Number of the found or newly created record.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsShipment:Boolean">
            <summary>
            Determines if the sales line represents a shipment.
            </summary>
            <returns>True if the line represents a shipment, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetAbsMin(Decimal,Decimal):Decimal">
            <summary>
            Retrieves the absolute minimum between the quantity to handle and the quantity handled.
            </summary>
            <param name="QtyToHandle">The quantity to handle.</param>
            <param name="QtyHandled">The quantity handled.</param>
            <returns>The absolute minimum quantity.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetHideValidationDialog(Boolean)">
            <summary>
            Sets the global HideValidationDialog flag.
            </summary>
            <remarks>
            The flag is unused in the object.
            </remarks>
            <param name="NewHideValidationDialog">The new value of the flag.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetHideValidationDialog:Boolean">
            <summary>
            Gets the global HideValidationDialog flag.
            </summary>
            <returns>The value of the flag.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcPrepaymentToDeduct">
            <summary>
            Updates the prepayment amount to deduct with the next posting.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsFinalInvoice:Boolean">
            <summary>
            Determines if the line will be fully invoiced after posting.
            </summary>
            <returns>True if the line will be fully invoiced, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetLineAmountToHandle(Decimal):Decimal">
            <summary>
            Calculates the net line amount for the specified quantity to handle.
            </summary>
            <param name="QtyToHandle">The quantity to handle.</param>
            <returns>The net line amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetLineAmountToHandleInclPrepmt(Decimal):Decimal">
            <summary>
            Calculates the net line amount for the specified quantity to handle.
            If line must be fully prepaid then the line amount is calculated with the prepayment amount to deduct.
            </summary>
            <param name="QtyToHandle">The quantity to handle.</param>
            <returns>The net line amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetLineAmountExclVAT:Decimal">
            <summary>
            Calculates the line amount excluding VAT.
            </summary>
            <returns>The line amount excluding VAT.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetLineAmountInclVAT:Decimal">
            <summary>
            Calculates the line amount including VAT.
            </summary>
            <returns>The line amount including VAT.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetHasBeenShown">
            <summary>
            Sets a flag to prevent showing a message if shipment date is before work date.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.TestJobPlanningLine">
            <summary>
            Ensures that a sales line that is associated with a job task has not been changed.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.BlockDynamicTracking(Boolean)">
            <summary>
            Sets the blocking state for dynamic tracking of reservations on quantity change.
            </summary>
            <param name="SetBlock">The new blocking state.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitQtyToShip2">
            <summary>
            Initializes the quantity to ship and invoice to reflect changes after the sales line has been (partially) posted.
            Additionally, reclaculates the proportional invoice discount and prepayment amounts for next posting.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowLineComments">
            <summary>
            Opens a page to show comments for the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetDefaultQuantity">
            <summary>
            Resets quantities to ship/return and invoice to zero based on the sales setup setting for default shipping quantity.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SetReserveWithoutPurchasingCode">
            <summary>
            Sets the reservation method for the sales line from the item. 
            If item's reservation method is optional, the sales header's reservation method is used.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdatePrePaymentAmounts">
            <summary>
            Recalculates prepayment amounts to reflect changes in quantity.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ZeroAmountLine(Option):Boolean">
            <summary>
            Determines if the line has a zero amount. It always returns true for a line with a blank type.
            </summary>
            <param name="QtyType">
            The type of quantity to check. 
            Only Invoicing option makes a difference by checking if quantity to invoice is zero, other options are ignored.
            </param>
            <returns>True if the line has a zero amount, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FilterLinesWithItemToPlan(Item@,Enum::Microsoft#Sales#Document#Sales Document Type)">
            <summary>
            Sets filters on the sales line for item lines, a specified document type, and various flow filters set in the provided item record.
            </summary>
            <param name="Item">Item record to filter the sales lines with.</param>
            <param name="DocumentType">The document type to filter the sales lines with.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FindLinesWithItemToPlan(Item@,Enum::Microsoft#Sales#Document#Sales Document Type):Boolean">
            <summary>
            Retrieves a record set of item sales lines that match the provided document type and various filters set on the item.
            </summary>
            <param name="Item">Item record to filter the sales lines with.</param>
            <param name="DocumentType">The document type to filter the sales lines with.</param>
            <returns>True if any sales line was found, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.LinesWithItemToPlanExist(Item@,Enum::Microsoft#Sales#Document#Sales Document Type):Boolean">
            <summary>
            Determines if any sales lines exist that match the provided document type and various flow filters set on the item.
            </summary>
            <param name="Item">Item record to filter the sales lines with.</param>
            <param name="DocumentType">The document type to filter the sales lines with.</param>
            <returns>True if any sales lines exist, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FilterLinesForReservation(Reservation Entry,Enum::Microsoft#Sales#Document#Sales Document Type,Text,Boolean)">
            <summary>
            Sets filters on the sales line for item lines that match the provided reservation entry.
            </summary>
            <param name="ReservationEntry">Reservation entry to filter the sales lines with.</param>
            <param name="DocumentType">The document type to filter the sales lines with.</param>
            <param name="AvailabilityFilter">Date filter to apply to the shipment date field.</param>
            <param name="Positive">A flag to determine if the quantity filter should be positive or negative.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitQtyToAsm">
            <summary>
            Initializes quantities to assemble to order for the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AsmToOrderExists(Assembly Header@):Boolean">
            <summary>
            Determines if assembly order exists for the sales line and retrieves the assembly header.
            </summary>
            <param name="AsmHeader">Return value: The assembly header record asociated with the sales line.</param>
            <returns>True if the assembly order exists, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FullQtyIsForAsmToOrder:Boolean">
            <summary>
            Determines if the full quantity is for assembly to order.
            </summary>
            <returns>True if the full quantity is for assembly to order, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.QtyBaseOnATO:Decimal">
            <summary>
            Returns the quantity (base) from the associated assembly order, if it doesn't exist, returns zero.
            </summary>
            <returns>The quantity (base) from the associated assembly order or zero.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.QtyAsmRemainingBaseOnATO:Decimal">
            <summary>
            Returns the remaining quantity (base) from the associated assembly order, if it doesn't exist, returns zero.
            </summary>
            <returns>The remaining quantity (base) from the associated assembly order or zero.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.QtyToAsmBaseOnATO:Decimal">
            <summary>
            Returns the quantity to assemble (base) from the associated assembly order, if it doesn't exist, returns zero.
            </summary>
            <returns>The quantity to assemble (base) from the associated assembly order or zero.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsAsmToOrderAllowed:Boolean">
            <summary>
            Determines if the sales line is allowed to be assembled to order.
            </summary>
            <returns>True if the sales line is allowed to be assembled to order, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsAsmToOrderRequired:Boolean">
            <summary>
            Determines if the sales line is required to be assembled to order.
            </summary>
            <returns>True if the sales line is required to be assembled to order, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckAsmToOrder(Assembly Header)">
            <summary>
            Checks that sales line fields match the provided assembly order.
            </summary>
            <param name="AsmHeader">The assembly header to check value against.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowAsmToOrderLines">
            <summary>
            Opens a page with assembly lines for the document of the sales line. The page is only opened if any lines exist.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FindOpenATOEntry(Item Tracking Setup):Integer">
            <summary>
            Finds the first open item ledger entry number for posted assembly that matches the sales line and the provided item tracking setup.
            </summary>
            <param name="ItemTrackingSetup">The item tracking setup to filter the item ledger entry with.</param>
            <returns>The item ledger entry no. if found, otherwise zero.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.RollUpAsmCost">
            <summary>
            Sums up costs from assembly components and updates the unit cost on the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.RollupAsmPrice">
            <summary>
            Sums up prices from assembly components and updates the unit price on the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateICPartner">
            <summary>
            Updates the intercompany partner information on the sales line for outgoing intercompany documents.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.OutstandingInvoiceAmountFromShipment(Code[20]):Decimal">
            <summary>
            Calculates the outstanding invoice amount from shipments for a specified customer.
            </summary>
            <param name="SellToCustomerNo">The sell-to customer number to calculate the outstanding invoice amount for.</param>
            <returns>The outstanding invoice amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.VerifyItemLineDim">
            <summary>
            Checks if dimensions have changed on an already shipped or received item line and prompts the user to confirm the change.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsShippedReceivedItemDimChanged:Boolean">
            <summary>
            Determines if the dimensions have changed on an already shipped or received item line.
            </summary>
            <returns>True if the dimensions have changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsServiceChargeLine:Boolean">
            <summary>
            Determines if the line is a service charge line.
            </summary>
            <returns>True if the line is a service charge line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ConfirmShippedReceivedItemDimChange:Boolean">
            <summary>
            Raises a confirmation dialog to confirm the change of dimensions on an already shipped or received item line. 
            </summary>
            <returns>True if the user confirms the change, otherwise an error is thrown.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitType">
            <summary>
            Initializes the type of a new sales line.
            </summary>
            <remarks>
            It keeps the type of the previous line, unless the document is released and the line type is item or fixed asset.
            In that case, the type is reset to blank.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDefaultLineType:Enum::Microsoft#Sales#Document#Sales Line Type">
            <summary>
            Gets the default line type from the sales setup if it is set.
            </summary>
            <returns>The default line type from the sales setup, otherwise blank.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckLocationOnWMS">
            <summary>
            Checks if shipment or receipt is required for item sales line and throws an error if it's missing.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsNonInventoriableItem:Boolean">
            <summary>
            Determines if the line is a non-inventoriable item line.
            </summary>
            <returns>True if the line is a non-inventoriable item line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsInventoriableItem:Boolean">
            <summary>
            Determines if the line is an inventoriable item line.
            </summary>
            <returns>True if the line is an inventoriable item line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsExtendedText:Boolean">
            <summary>
            Determines if the line is an extended text line.
            </summary>
            <returns>True if the line is an extended text line, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetJnlTemplateName:Code[10]">
            <summary>
            Gets the journal template name to use when posting the document if the template name is mandatory for posting.
            </summary>
            <returns>The journal template name for the document if it is mandatory, otherwise blank.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ValidateReturnReasonCode(Integer)">
            <summary>
            Updates the cost, price and location for return order line.
            </summary>
            <remarks>
            if CallingFieldNo is 0, no updates occur.
            </remarks>
            <param name="CallingFieldNo">The field number that initiated the update.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ValidateLineDiscountPercent(Boolean)">
            <summary>
            Recalculates line discount amount and updates other line amounts.
            Additionally, if specified, removes the invoice discount amount from the line 
            and reduces the invoice discount on the header for the same amount.
            </summary>
            <param name="DropInvoiceDiscountAmount">
            True if the invoice discount amount should be removed from the line and reduced on the header, otherwise false.
            </param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.HasTypeToFillMandatoryFields:Boolean">
            <summary>
            Determines if mandatory fields have to be filled in for the line based on the line type.
            By default, only empty type is not considered mandatory, but can be overridden by the event.
            </summary>
            <returns>True if mandatory fields have to be filled in, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDeferralAmount:Decimal">
            <summary>
            Gets the defferal amount for the sales line to be used in deferral schedules.
            </summary>
            <returns>The deferral amount.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdateDeferralAmounts">
            <summary>
            Removes or updates the deferral schedule for the sales line to reflect changes in the deferral amount and posting date.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdatePriceDescription">
            <summary>
            Formats the price description for the sales line based on the line type and line discount.
            </summary>
            <remarks>
            This procedure is only used in Microsoft Invoicing objects which have been discontinoued and will be removed in a future version.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowDeferrals(Date,Code[10]):Boolean">
            <summary>
            Opens a page with deferral schedule for the sales line.
            </summary>
            <remarks>
            If the deferral schedule doesn't exist yet, a new one is created and commited before the page is opened.
            </remarks>
            <param name="PostingDate">Posting date to calculate the schedule from if a new deferral schedule is created.</param>
            <param name="CurrencyCode">Currency code to use for a new deferral schedule.</param>
            <returns>True if deferral schedule was changed, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitHeaderDefaults(Sales Header)">
            <summary>
            Initializes the default values for the sales line based on the sales header.
            </summary>
            <param name="SalesHeader">The sales header to initialize the default values from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.DefaultDeferralCode">
            <summary>
            Updates the deferral code to the default deferral template code specified on the associated item, resource or g/l account.
            </summary>
            <remarks>
            The deferral code is not set for lines of blanket orders and quotes.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsCreditDocType:Boolean">
            <summary>
            Determines if the document type of the line is a credit document type.
            </summary>
            <returns>True if the document type is a credit document type, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CanEditUnitOfMeasureCode:Boolean">
            <summary>
            Determines if item unit of measure code can be edited.
            </summary>
            <remarks>
            If this is not an item line or if item is not selected the procedure always return true.
            </remarks>
            <returns>True if item unit of measure code can be edited, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InsertFreightLine(Decimal@)">
            <summary>
            Creates or updates a sales line for freight for a specified freight amount.
            </summary>
            <remarks>
            If the freight amount is negative, it's set to 0 and no line is created or updated.
            The current sales line does not point to the freight line after the procedure is executed.
            </remarks>
            <param name="FreightAmount">The new unit price of created or updated line.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.IsLookupRequested:Boolean">
            <summary>
            Determines if additional lookup for item description is required. 
            Used for integration purposes when the default item description lookup is not sufficient.
            </summary>
            <remarks>
            This is currently only used in Microsoft Invoicing functionality which has been discontinued and will be removed in a future version.
            </remarks>
            <returns>True if additional lookup for item description is required, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.TestItemFields(Code[20],Code[10],Code[10])">
            <summary>
            Verifies that item related fields on the item sales line match the provided values.
            If the values do not match, an error is thrown.
            </summary>
            <param name="ItemNo">The item number to verify.</param>
            <param name="VariantCode">The variant code to verify.</param>
            <param name="LocationCode">The location code to verify.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalculateNotShippedInvExlcVatLCY">
            <summary>
            Calculates and sets the shipped not invoiced amount excluding VAT in LCY.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ClearSalesHeader">
            <summary>
            Resets the global SalesHeader variable.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SendLineInvoiceDiscountResetNotification">
            <summary>
            Sends a notification if the line invoice discount amount is reset.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDocumentTypeDescription:Text">
            <summary>
            Gets the text representation of the document type for the sales line.
            </summary>
            <returns>The text representation of the document type.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.FormatType:Text[20]">
            <summary>
            Gets the text representation of the line type for the sales line. 
            </summary>
            <remarks>
            Blank line type is represented by the comment label.
            </remarks>
            <returns>The text representation of the line type.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.RenameNo(Enum::Microsoft#Sales#Document#Sales Line Type,Code[20],Code[20])">
            <summary>
            Renames all sales lines for the specified line type and number to a new number. Used when related entities are renamed.
            </summary>
            <param name="LineType">The line type of lines to rename.</param>
            <param name="OldNo">The old number to rename from.</param>
            <param name="NewNo">The new number to rename to.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.UpdatePlanned:Boolean">
            <summary>
            Updates the 'planned' status of a sales line, depending if all the outstanding quantity is reserved or not.
            </summary>
            <returns>True if the 'planned' status was updated, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AssignedItemCharge:Boolean">
            <summary>
            Determines if the line is a charge item line that has been at least partially assigned.
            </summary>
            <returns>True if the line is a charge item line that has been at least partially assigned, otherwise false.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcPlannedDate:Date">
            <summary>
            Calculates the planned delivery if shippment time is specified, otherwise the planned shipment date.
            </summary>
            <returns>The calculated planned delivery date or planned shipment date.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ValidateUnitCostLCYOnGetUnitCost(Item)">
            <summary>
            Updates the unit cost in LCY based on the quantity per unit of measure and unit cost from either the item or it's SKU.
            </summary>
            <param name="Item">The item record to update the unit cost from.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckPromisedDeliveryDate">
            <summary>
            Throws an error if requested delivery date was changed after the promised delivery date is set.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.VerifyChangeForSalesLineReserve(Integer)">
            <summary>
            Checks the changes to the sales line and adjusts the reservation for the line accordingly.
            </summary>
            <param name="CallingFieldNo">The field number that initiated the check.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowBlanketOrderSalesLines(Enum::Microsoft#Sales#Document#Sales Document Type)">
            <summary>
            Open a page with the sales lines related to the blanket order line.
            </summary>
            <param name="DocumentType">The document type of the sales lines to show.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowBlanketOrderPostedShipmentLines">
            <summary>
            Open a page with the posted sales shipment lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowBlanketOrderPostedInvoiceLines">
            <summary>
            Open a page with the posted sales invoice lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowBlanketOrderPostedReturnReceiptLines">
            <summary>
            Open a page with the posted return receipt lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowBlanketOrderPostedCreditMemoLines">
            <summary>
            Open a page with the posted sales credit memo lines related to the blanket order line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.ShowDeferralSchedule">
            <summary>
            Opens a page with deferral schedule for the sales line.
            </summary>
            <remarks>
            If the deferral schedule doesn't exist yet, a new one is created and commited before the page is opened.
            The posting date and currency code for the new schedule are taken from the sales header.
            </remarks>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CalcBaseQty(Decimal,Text,Text):Decimal">
            <summary>
            Converts the specified quantity to the quantity in the base unit of measure.
            </summary>
            <param name="Qty">The quantity to convert.</param>
            <param name="FromFieldName">Caption of the field containing the quantity to convert.</param>
            <param name="ToFieldName">Caption of the field containing the converted quantity.</param>
            <returns>The quantity in the base unit of measure.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CreateDimFromDefaultDim(Integer)">
            <summary>
            Initializes the dimensions for the sales line if default dimensions are defined for the specified field.
            </summary>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitDefaultDimensionSources(List of [Dictionary]@,Integer)">
            <summary>
            Collects default dimension sources for the sales line 
            with the dimension source for the specified field added in the first place.
            </summary>
            <param name="DefaultDimSource">Return value: The list of default dimension sources.</param>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.InitDefaultDimensionSources(List of [Dictionary]@,Code[20],Integer)">
            <summary>
            Collects default dimension sources for the sales line.
            </summary>
            <remarks>
            The FieldNo is only used on the event publisher.
            </remarks>
            <param name="DefaultDimSource">Return value: The list of default dimension sources.</param>
            <param name="JobNo">The job number to add to the dimension sources.</param>
            <param name="FieldNo">The field number for which to initialize the dimensions.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.SaveLookupSelection(RecordRef)">
            <summary>
            Saves the selected record from the lookup to the lookup state manager.
            </summary>
            <param name="SelectedRecordRef">The reference to the selected record from the lookup.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.AttachToInventoryItemLine(Sales Line@)">
            <summary>
            Opens a page with inventory item lines and attaches the selected line 
            to all non-inventoriable sales lines in the passed SelectedSalesLine record set.
            </summary>
            <param name="SelectedSalesLine">The record set of sales lines to attach the inventory item line to.</param>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.RestoreLookupSelection">
            <summary>
            Restores the selected record from the lookup state manager to the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDateForCalculations:Date">
            <summary>
            Gets the date to use in calculations for the sales line. Used in finding item references and price calculations.
            </summary>
            <returns>The date for calculations.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetDateForCalculations(Sales Header):Date">
            <summary>
            Gets the date to use in calculations for the sales line. Used in finding item references and price calculations.
            </summary>
            <param name="FromSalesHeader">The sales header to get the date from.</param>
            <returns>The date for calculations.</returns>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.GetShippingTime">
            <summary>
            Updates the shipping time on the sales line.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Sales#Document#Sales Line.CheckIfSalesLineMeetsReservedFromStockSetting(Decimal,Enum::Microsoft#Inventory#Tracking#Reservation From Stock):Boolean">
            <summary>
            Determines if the reserved quantity on sales line meets the reserved from stock setting based on the quantity to post.
            </summary>
            <param name="QtyToPost">The quantity to post.</param>
            <param name="ReservedFromStock">The reserved from stock setting.</param>
            <returns>True if the reserved quantity meets the reserved from stock setting, otherwise false.</returns>
        </member>
        <member name="O:Table::Microsoft#Sales#Pricing#Sales Discount Access">
            <summary>
            The purpose of the table is to setup access to UX and logic of the sales discount calculation.
            TableType is not set to Temporary only because the ReadPermission() method always returns true.
            </summary>
        </member>
        <member name="O:Table::Microsoft#Sales#Pricing#Sales Price Access">
            <summary>
            The purpose of the table is to setup access to UX and logic of the sales price calculation.
            TableType is not set to Temporary only because the ReadPermission() method always returns true.
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Reminder#Cancel Issued Reminder.SetParameters(Boolean,Boolean,Date,Boolean,Date,Boolean)">
            <summary>
            Specify parameters with specifying VAT Date
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Sales#Reminder#Cancel Issued Reminder.SetParameters(Boolean,Boolean,Date,Boolean)">
            <summary>
            Specify parameters with UseSameVATDate default to True
            </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.BankAccReconciliationAutoMatch(Bank Acc# Reconciliation,Integer)">
            <summary>
            Algorithm for auto matching used in the Bank Acc. Reconciliation page.
            It updates matched Bank Account Ledger Entries by applying them and setting their Statement No., Statement Line No., etc.
            </summary>
            <param name="BankAccReconciliation"></param>
            <param name="DaysTolerance"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.BankAccReconciliationAutoMatch(Bank Acc# Reconciliation@,Integer,Boolean,Boolean)">
            <summary>
            Algorithm for auto matching used in the Bank Acc. Reconciliation page.
            It updates matched Bank Account Ledger Entries by applying them and setting their Statement No., Statement Line No., etc.
            </summary>
            <param name="BankAccReconciliation"></param>
            <param name="DaysTolerance"></param>
            <param name="RaiseFindBestMatchesEvent"></param>
            <param name="ShouldShowMatchSummary"></param>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.AttemptToMatch(Bank Acc# Reconciliation Line,Ledger Entry Matching Buffer@,Integer,Bank Statement Matching Buffer@,Boolean@,Boolean)">
            <summary>
            Given a BankAccReconciliationLine it attempts to find a match from the non-empty temporary table candidates in
            TempBankAccLedgerEntryMatchingBuffer. It considers DaysTolerance as configuration parameter.
            
            It uses the assumption that entries in TempBankAccLedgerEntryMatchingBuffer are sorted ascendingly by Posting Date and that
            subsequent calls during an automatch have their Transaction Date increasing as well.
            
            If a match is found, the match details are inserted in the TempBankStatementMatchingBuffer. Multiple matches can be inserted.
            
            </summary>
            <param name="BankAccReconciliationLine">Record loaded with the line to find a match for, subsequent calls make the assumption that it was called on a set ordered by Transaction Date</param>
            <param name="TempBankAccLedgerEntryMatchingBuffer">Candidate Bank Account Ledger Entries to consider for the match sorted by Posting Date</param>
            <param name="DaysTolerance">Days of tolerance allowed</param>
            <param name="TempBankStatementMatchingBuffer">Temporary table where the match is inserted if found</param>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.MatchIsBetter(Bank Statement Matching Buffer@,Bank Statement Matching Buffer@):Boolean">
            <summary>
            Returns true if TempBankStatementMatchingBuffer is better than TempToCompareBankStatementMatchingBuffer
            </summary>
            <param name="TempBankStatementMatchingBuffer"></param>
            <param name="TempToCompareBankStatementMatchingBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.IsTextMatchingBetter(Bank Statement Matching Buffer@,Bank Statement Matching Buffer@):Boolean">
            <summary>
            Returns true if the text matchings in TempBankStatementMatchingBuffer are better than TempToCompareBankStatementMatchingBuffer
            </summary>
            <param name="TempBankStatementMatchingBuffer"></param>
            <param name="TempToCompareBankStatementMatchingBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.GetMaxScoreOfWinner(Option,Integer,Option,Integer,Option,Integer,Option@)">
             <summary>
             There are 3 scores associated to how well does Bank Rec. Line **text fields** match a specific Bank Account Ledger Entry:
             - Doc. No Score
             - Ext. Doc. No Score
             - Description Score
             When we compare two matches, we first compare how well they do on each category. If one match is better in a category, it wins that category.
             The Option parameter values are used to store the winner of each category. The Integer parameter values contain the winning score for that category.
            
             The best match is considered as the one for which a category has the highest winning score. This reflects the fact that there is usually one field used to match exactly, while the other fields do not necessarily matter.
             The result of the best match is stored in the output parameter BestMaxWinner.
             </summary>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Match Bank Rec# Lines.BankReconciliationLineTextSimilarityScore(Text,Bank Acc# Reconciliation Line,Boolean):Integer">
            <summary>
            Returns a number between 0 and 100, representing the best match between TextToMatch and the BankAccReconciliationLine fields.
            </summary>
            <param name="TextToMatch"></param>
            <param name="BankAccReconciliationLine"></param>
            <param name="Exact"></param>
            <returns>Returns a number between 0 and 100, representing the TextToMatch matching any of the BankaccReconciliationLine fields.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Record Match Mgt#.CalculateStringNearness(Text,Text,Integer,Integer):Integer">
            <summary>
            Computes a nearness score between strings. Nearness is based on repeatedly finding longest common substrings.
            Substring matches below Threshold are not considered.
            Normalizing factor is the max value returned by this procedure.
            </summary>
            <param name="FirstString">First string to match</param>
            <param name="SecondString">Second string to match</param>
            <param name="Threshold">Substring matches below Threshold are not considered</param>
            <param name="NormalizingFactor">Max value returned by this procedure</param>
            <returns>A number between 0 and NormalizingFactor, representing how much of the strings was matched</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Bank#Reconciliation#Record Match Mgt#.CalculateExactStringNearness(Text,Text,Integer):Integer">
            <summary>
            Like CalculateStringNearness, however it doesn't repeatedly takes substrings, only once.
            The result is normalized with respect to the length of the BaseString, in contrast with 
            CalculateStringNearness where it was normalized with respect ot the shorter one.
            </summary>
            <param name="ComparingString"></param>
            <param name="BaseString"></param>
            <param name="NormalizingFactor">Max value returned by this procedure</param>
            <returns>A number between 0 and NormalizingFactor representing how much of BaseString was found in ComparingString</returns>
        </member>
        <member name="M:Interface::Microsoft#CRM#BusinessRelation#Contact Business Relation Link.GetTableAndSystemId(Code[20],Integer@,Guid@):Boolean">
            <summary>
            Returns table and system id of record that match the No. field 
            </summary>
            <param name="No">The field to lookup</param>
            <param name="TableId">Table id of implementation</param>
            <param name="SystemId">System id for the found record</param>
            <returns>True if the record was found</returns>
        </member>
        <member name="M:Codeunit::Microsoft#CRM#Interaction#Word Template Interactions.Merge(Delivery Sorter@)">
            <summary>
            Performs mail merge on the Word templates from the attachments specified by TempDeliverySorterWord
            and sends them according to the correspondence Type.
            </summary>
            <param name="TempDeliverySorterWord">A temporary table containing information about attachments and their recipients.</param>
        </member>
        <member name="M:Codeunit::Microsoft#CRM#Interaction#Word Template Interactions.RunMergedDocument(Segment Line@,Attachment@)">
            <summary>
            Download a merged Word template for a given segment line and attachment.
            </summary>
            <param name="SegLine">Specifies the segment line for which the attachment is for.</param>
            <param name="Attachment">Specifies the attachemnt (Word template) to be downloaded.</param>
        </member>
        <member name="M:Codeunit::Microsoft#CRM#Interaction#Word Template Interactions.IsWordDocumentExtension(Text):Boolean">
            <summary>
            Checks if the provided file extension is a Word document extension.
            </summary>
            <param name="FileExtension">File extension to check.</param>
            <returns>True if the provided extension is a Word document extension, false otherwise.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.OutboxJnlLineDimToInbox(IC Inbox Jnl# Line@,IC Inbox/Outbox Jnl# Line Dim#@,IC Inbox/Outbox Jnl# Line Dim#@,Integer)">
            <summary>
            Transfers ic outbox transaction dimensions to ic inbox transaction dimensions.
            </summary>
            <param name="ICInboxJnlLine">Ic transaction that is being processed. </param>
            <param name="ICOutboxJnlLineDim">Source ic outbox journal line. </param>
            <param name="ICInboxJnlLineDim">Destination ic inbox journal line. </param>
            <param name="ICInboxTableID">Number of record table. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.OutboxDocDimToInbox(IC Document Dimension@,IC Document Dimension@,Integer,Code[20],Integer)">
            <summary>
            Transfers ic outbox document dimensions to ic inbox document dimensions.
            </summary>
            <param name="ICOutboxDocDim">Source ic outbox document dimensions. </param>
            <param name="ICInboxDocDim">Destination ic inbox document dimensions. </param>
            <param name="InboxTableID">Destination table number. </param>
            <param name="InboxICPartnerCode">Ic partner code. </param>
            <param name="InboxTransSource">Source of transaction 'Rejected by Current Company' or 'Created by Current Company'. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.MoveICJnlDimToHandled(Integer,Integer,Integer,Code[20],Boolean,Integer)">
            <summary>
            Moves ic journal line dimensions to handled ic journal dimensions.
            </summary>
            <param name="TableID">Source table number. </param>
            <param name="NewTableID">Destination table number. </param>
            <param name="TransactionNo">Number of transaction that is being processed. </param>
            <param name="ICPartner">Ic partner code. </param>
            <param name="LineNoFilter">If 'true' parameter LineNo will be used.</param>
            <param name="LineNo">Line number of processed dimension.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.MoveOutboxTransToHandledOutbox(IC Outbox Transaction@)">
            <summary>
            Moves ic outbox documents to handled ic outbox documents.
            </summary>
            <param name="ICOutboxTrans">Ic outbox transaction that is being processed. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.CreateICDocDimFromPostedDocDim(IC Document Dimension,Integer,Integer)">
            <summary>
            Creates ic document dimensions with provided 'DimSetID'.
            </summary>
            <param name="ICDocDim">Ic Document dimensions that are created. </param>
            <param name="DimSetID">Dimension set id of a given document. </param>
            <param name="TableNo">Table number of document in process. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.FindReceiptLine(Purch# Rcpt# Line@,Purchase Line):Boolean">
            <summary>
            Retrieves purchase receipt lines for purchase lines that have been received and not invoiced.
            </summary>
            <param name="PurchRcptLine">Retrieved purchase receipt lines. </param>
            <param name="PurchaseLineSource">Source purchase line. </param>
            <returns>Returns 'true' if found, otherwise 'false'. </returns>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.UpdatePurchLineICPartnerReference(Purchase Line@,Purchase Header,IC Inbox Purchase Line)">
            <summary>
            Updates ic partner reference information on created purchase line from ic inbox purchase line.
            </summary>
            <param name="PurchaseLine">Destination purchase document line. </param>
            <param name="PurchaseHeader">Processed purchase document header. </param>
            <param name="ICInboxPurchLine">Source ic inbox purchase line. </param>
            <remarks>Changes made to purchase document line 'PurchaseLine' are not saved to database. </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Intercompany#ICInboxOutboxMgt.UpdatePurchLineReceiptShipment(Purchase Line@)">
            <summary>
            Updates purchase line information based on purchase receipt line or return shipment line for given purchase line if exists.
            </summary>
            <param name="PurchaseLine">Source purchase line. </param>
            <remarks>If either purchase receipt line or return shipment line is found, item tracking information will be transferred if exists. 
            Changes made to purchase document line 'PurchaseLine' are not saved to database. </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.FormatAddr(Text[100][]@,Text[100],Text[100],Text[100],Text[100],Text[50],Text[50],Code[20],Text[50],Code[10])">
            <summary>
            Formats address information based on value 'Address Format' for country, provided by CountryCode.
            </summary>
            <param name="AddrArray">Array that will hold formatted address.</param>
            <param name="Name">Provided name information.</param>
            <param name="Name2">Provided name 2 information.</param>
            <param name="Contact">Provided contact name information.</param>
            <param name="Addr">Provided address information.</param>
            <param name="Addr2">Provided address 2 information.</param>
            <param name="City">Provided city name information.</param>
            <param name="PostCode">Provided post code information.</param>
            <param name="County">Provided county name information.</param>
            <param name="CountryCode">Country code for selected country.</param>
            <remarks>In case that CountryCode is empty 'Address Format' will be taken from general ledger setup.</remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.FormatPostCodeCity(Text[100]@,Text[50]@,Text[50],Code[20],Text[50],Code[10])">
            <summary>
            Formats post code information based on value 'Address Format' for country, provided by CountryCode.
            </summary>
            <param name="PostCodeCityText">Parameter PostCodeCityText that will hold formatted post code information. </param>
            <param name="CountyText">Parameter CountyText that will hold formatted county information. </param>
            <param name="City">Provided city information. </param>
            <param name="PostCode">Provided post code information. </param>
            <param name="County">Provided county information. </param>
            <param name="CountryCode">Country code for selected country. </param>
            <remarks>In case that CountryCode is empty 'Address Format' will be taken from general ledger setup. </remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.GeneratePostCodeCity(Text[100]@,Text[50]@,Text[50],Code[20],Text[50],Country/Region)">
            <summary>
            Combines post code and city information based on value 'Address Format' of provided country.
            </summary>
            <param name="PostCodeCityText">Parameter PostCodeCityText that will hold combined post code and city information. </param>
            <param name="CountyText">Parameter CountyText that will hold formatted county information. </param>
            <param name="City">Provided city name information. </param>
            <param name="PostCode">Provided post code information. </param>
            <param name="County">Provided county information. </param>
            <param name="Country">Selected country record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.GetCompanyAddr(Code[10],Responsibility Center@,Company Information@,Text[100][]@)">
            <summary>
            Formats company information.
            </summary>
            <param name="RespCenterCode">Selected responsibility center code. </param>
            <param name="ResponsibilityCenter">Record holding selected responsibility center. </param>
            <param name="CompanyInfo">Company information record. </param>
            <param name="CompanyAddr">Array that will hold company information. </param>
            <remarks> in case responsibility center exists information will be taken from it, otherwise from company information. </remarks>  
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.Company(Text[100][]@,Company Information@)">
            <summary>
            Formats company name and address information.
            </summary>
            <param name="AddrArray">Array that will hold formated name and address. </param>
            <param name="CompanyInfo">Source compnay information record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.Customer(Text[100][]@,Customer@)">
            <summary>
            Formats customer name and address information.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="Cust">Source customer record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.Vendor(Text[100][]@,Vendor@)">
            <summary>
            Formats vendor name and address information.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="Vend">Source vendor record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.BankAcc(Text[100][]@,Bank Account@)">
            <summary>
            Formats bank account name and address information.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="BankAcc">Source bank account record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.Location(Text[100][]@,Location@)">
            <summary>
            Formats location name and address information.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="Location">Source location record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesHeaderSellTo(Text[100][]@,Sales Header@)">
            <summary>
            Formats customer name and address information based on 'Sell-to' information of provided sales header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesHeader">Source sales header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesHeaderBillTo(Text[100][]@,Sales Header@)">
            <summary>
            Formats customer name and address information based on 'Bill-to' information of provided sales header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesHeader">Source sales header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesHeaderShipTo(Text[100][]@,Text[100][],Sales Header@):Boolean">
            <summary>
            Formats shipment address information based on 'Ship-to' information of provided sales header.
            </summary>
            <param name="AddrArray">Array that will hold formatted shipment information. </param>
            <param name="CustAddr">Array that holds customer information. </param>
            <param name="SalesHeader">Source sales header record. </param>
            <returns>Returns 'true' if shipment address is different than customer address, otherwise 'false'. </returns>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.PurchHeaderBuyFrom(Text[100][]@,Purchase Header@)">
            <summary>
            Formats vendor name and address information based on 'Buy-from' information of provided purchase header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="PurchHeader">Source purchase header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.PurchHeaderPayTo(Text[100][]@,Purchase Header@)">
            <summary>
            Formats vendor name and address information based on 'Pay-to' information of provided purchase header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="PurchHeader">Source purchase header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.PurchHeaderShipTo(Text[100][]@,Purchase Header@)">
            <summary>
            Formats shipment address information based on 'Ship-to' information of provided purchase header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="PurchHeader">Source purchase header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.PurchHeaderRemitTo(Remit Address Buffer@,Purchase Header@):Boolean">
            <summary>
            Gets vendor remit address information if exist.
            </summary>
            <param name="RemitAddressBuffer">Buffer record that will hold remit address information. </param>
            <param name="PurchHeader">Source purchase header record. </param>
            <returns>Returns 'false' if remit address doesn't exist, otherwise 'true'. </returns>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesShptSellTo(Text[100][]@,Sales Shipment Header@)">
            <summary>
            Formats customer name and address information based on 'Sell-to' information of provided sales shipment header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesShptHeader">Source sales shipment header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesShptBillTo(Text[100][]@,Text[100][],Sales Shipment Header@):Boolean">
            <summary>
            Format provided sales shipment document 'Bill-to' information.
            </summary>
            <param name="AddrArray">Array that will hold formatted 'Bill-to' information. </param>
            <param name="ShipToAddr">Array that holds shipment information. </param>
            <param name="SalesShptHeader">Source sales shipment header record. </param>
            <returns>Returns 'true' if 'Bill-to' information is different than 'Ship-to' customer information, otherwise 'false'. </returns>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesShptShipTo(Text[100][]@,Sales Shipment Header@)">
            <summary>
            Formats shipment information for provided sales shipment header.
            </summary>
            <param name="AddrArray">Array that will hold formated name and address.</param>
            <param name="SalesShptHeader">Source sales shipment header record.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesInvSellTo(Text[100][]@,Sales Invoice Header@)">
            <summary>
            Formats customer information based on 'Sell-to' information of provided sales invoice header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesInvHeader">Source sales invoice header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesInvBillTo(Text[100][]@,Sales Invoice Header@)">
            <summary>
            Formats customer information based on 'Bill-to' information of provided sales invoice header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesInvHeader">Source sales invoice header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesInvShipTo(Text[100][]@,Text[100][],Sales Invoice Header@):Boolean">
            <summary>
            Formats provided sales invoice header shipment information. 
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="CustAddr">Array that holds customer information. </param>
            <param name="SalesInvHeader">Source sales invoice header record. </param>
            <returns>Returns 'true' if shipment information is different than provided customer information, otherwise 'false'. </returns>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesCrMemoBillTo(Text[100][]@,Sales Cr#Memo Header@)">
            <summary>
            Formats customer name and address information based on 'Sell-to' information of provided sales cr.memo header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesCrMemoHeader">Source sales cr.memo header record. </param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Address#Format Address.SalesCrMemoShipTo(Text[100][]@,Text[100][],Sales Cr#Memo Header@):Boolean">
            <summary>
            Formats customer name and address information based on 'Bill-to' information of provided sales cr.memo header.
            </summary>
            <param name="AddrArray">Array that will hold formatted name and address. </param>
            <param name="SalesCrMemoHeader">Source sales cr.memo header record. </param>
        </member>
        <member name="O:Codeunit::Microsoft#Foundation#NoSeries#No# Series Check">
            <summary>
            This codeunit verifies that a number can be retrieved for the given No. Series.
            </summary>
        </member>
        <member name="O:PageExtension::Microsoft#Foundation#NoSeries#No# Series Check">
            <summary>
            Adds support for validating the selected no. series in a batch process
            </summary>
        </member>
        <member name="O:Enum::Microsoft#Foundation#Period#Date Compression Period Length">
            <summary>
            Represents the periods of time for which date compression can summarize entries.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Day">
            <summary>
            Summarize data for each day.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Week">
            <summary>
            Summarize data for each week.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Month">
            <summary>
            Summarize data for each month.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Quarter">
            <summary>
            Summarize data for each quarter.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Year">
            <summary>
            Summarize data for each year.
            </summary>
        </member>
        <member name="E:Enum::Microsoft#Foundation#Period#Date Compression Period Length.Period">
            <summary>
            Summarize data for each period.
            </summary>
        </member>
        <member name="M:Table::Microsoft#Foundation#Reporting#Custom Report Layout.LoadInternalWordLayout(Integer,Codeunit::System#Utilities#Temp Blob@):Boolean">
            <summary>
            Internal resplacement for the soon deprecated Report.WordLayout function. This function will load the internal Word layout for the given report using the virtual table Report Layout List.
            </summary>
            <param name="ReportID">Report Id.</param>
            <param name="TempBlob">Layout will be provided in the blob object if the procedure return true.</param>
            <returns>True if the layout was loaded.</returns>
        </member>
        <member name="M:Table::Microsoft#Foundation#Reporting#Custom Report Layout.LoadInternalRdlcLayout(Integer,Codeunit::System#Utilities#Temp Blob@):Boolean">
            <summary>
            Internal resplacement for the soon deprecated Report.RdlcLayout function. This function will load the internal RDLC layout for the given report using the virtual table Report Layout List.
            </summary>
            <param name="ReportID">Report Id.</param>
            <param name="TempBlob">Layout will be provided in the blob object if the procedure return true.</param>
            <returns>True if the layout was loaded.</returns>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Reporting#ReportManagement.OnCustomDocumentMergerEx(Integer,Option,JsonObject,InStream@,InStream,OutStream@,Boolean@)">
            <summary>
            Invoke the OnCustomDocumentMergeEx trigger, which handled user defiend report renders given a dataset and a layout. The Render must be implemented in AL and return the output stream as defined by the format given in ReportAction.
            </summary>
            <param name="ObjectId">The report object id.</param>
            <param name="ReportAction">The report action, which can be one of SaveAsPdf, SaveAsWord, SaveAsExcel, Preview, Print or SaveAsHtml.</param>
            <param name="ObjectPayload">The JSON payload that defines metadata for the present report run.</param>
            <param name="XmlData">The xml data set in an input stream</param>
            <param name="LayoutData">The layout input stream. The actual format stored in the stream is defined by the layoutmodel json property (custom formats by the layoutmimetype property in the payload).</param>
            <param name="DocumentStream">Output stream that will contain the rendered output documents.</param>
            <param name="IsHandled">Will be set to true if the procedure call handled the merge.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Reporting#ReportManagement.OnSelectReportLayoutCode(Integer,Text@,Option@,Boolean@)">
            <summary>
            Fetch the currently selected layout code and layout type from application.
            </summary>
            <param name="ObjectId">The object id.</param>
            <param name="LayoutCode">The report layout code if an application override has been set for the current run.</param>
            <param name="LayoutType">The Layout type contained in the target stream.</param>
            <param name="IsHandled">Will be set to true if the subscriber handled the action.</param>
            <remarks>Internal event that will be removed when the report runtime API has been updated</remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Reporting#ReportManagement.OnFetchReportLayoutByCode(Integer,Text,OutStream@,Boolean@)">
            <summary>
            Fetch the currently selected layout code from application.
            </summary>
            <param name="ObjectId">The object id.</param>
            <param name="LayoutCode">The report layout code if an application override has been set for the current run.</param>
            <param name="TargetStream">The layout will be written to this stream.</param>
            <param name="IsHandled">Will be set to true if the layout was found in the application database.</param>
            <remarks>Internal event that will be removed when the report runtime API has been updated.</remarks>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Reporting#ReportManagement.OnApplicationReportMergeStrategy(Integer,Text,Boolean@,Boolean@)">
            <summary>
            Select between platform or application report rendering. 
            If this trigger return InApplication = true, then run the report and layout in a custom report render using the OnCustomDocumentMergerEx event.
            </summary>
            <param name="ObjectId">The object id.</param>
            <param name="LayoutCode">The report layout code if an application override has been set for the current run.</param>
            <param name="InApplication">True if the applicaction should render the report.</param>
            <param name="IsHandled">Will be set to true if the subscriber handled the action.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Foundation#Reporting#ReportManagement.OnWordDocumentMergerAppMode(Integer,Text,Boolean@,Boolean@)">
            <summary>
            Select between platform or application report rendering for Word reports only. 
            If this trigger return InApplication = true, then run the report and layout in the legacy OnMergeDocumentReport event.
            </summary>
            <param name="ObjectId">The object id.</param>
            <param name="LayoutCode">The report layout code if an application override has been set for the current run.</param>
            <param name="InApplication">True if the applicaction should render the report.</param>
            <param name="IsHandled">Will be set to true if the subscriber handled the action.</param>
            <remarks>This event is for backward compatibility only and will be depricated.</remarks>
        </member>
        <member name="O:Page::Microsoft#Shared#Report#Report Layout Edit Dialog">
            <summary>
            A dialog page for editting report layout information.
            </summary>
        </member>
        <member name="O:Page::Microsoft#Shared#Report#Report Layout New Dialog">
            <summary>
            A dialog page for adding new report layouts.
            </summary>
        </member>
        <member name="O:Page::Microsoft#Shared#Report#Report Layouts">
            <summary>
            The report layouts page, used for adding/deleting/editing user and extension defined report layouts.
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Shared#Report#Report Layouts Impl#">
            <summary>
            This code unit supports the 'Report Layouts' page and provides implementations for adding/deleting/editing user and extension defined report layouts.
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Upgrade#Upgrade Permission Sets">
            <summary>
            Upgrade code to fix references of obsolete permission sets.
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Upgrade#Upgrade Privacy Notices">
            <summary>
            Upgrade code to add Privacy Notices
            </summary>
        </member>
        <member name="O:Codeunit::Microsoft#Upgrade#Upgrade Profiles">
            <summary>
            Upgrade code to insert new profiles or modify existing profiles.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.GetNo(Price Asset@)">
            <summary>
            The method fills the Price Asset parameter with "Asset No." and other data from the asset defined in the implementation codeunit. 
            </summary>
            <param name="PriceAsset">the record gets filled with data</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.GetId(Price Asset@)">
            <summary>
            The method fills the Price Asset parameter with "Asset ID" and other data from the asset defined in the implementation codeunit. 
            </summary>
            <param name="PriceAsset">the record gets filled with data</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.IsLookupOK(Price Asset@):Boolean">
            <summary>
            The method runs the modal page for looking up for an asset.
            </summary>
            <param name="PriceAsset">Defines the default asset to be shown on opening of the lookup page</param>
            <returns>true if the lookup is completed</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.ValidateUnitOfMeasure(Price Asset@):Boolean">
            <summary>
            The method validates if the unit of measure exists for the asset. 
            Not used. This validation should happen in IsLookupUnitOfMeasureOK.
            </summary>
            <param name="PriceAsset">The asset with "Unit of Measure Code" that should be validated</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.IsLookupUnitOfMeasureOK(Price Asset@):Boolean">
            <summary>
            The method runs the modal page for looking up for a unit of measure.
            </summary>
            <param name="PriceAsset">Defines the default unit of measure to be shown on opening of the lookup page</param>
            <returns>true if the lookup is completed</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.IsLookupVariantOK(Price Asset@):Boolean">
            <summary>
            The method runs the modal page for looking up for an item variant.
            </summary>
            <param name="PriceAsset">Defines the default item variant to be shown on opening of the lookup page</param>
            <returns>true if the lookup is completed</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.IsAssetNoRequired:Boolean">
            <summary>
            The method should return true for an asset that requires "Asset No." to be filled. 
            In W1 returns false just for one asset type - All.
            </summary>
            <returns>true if "Asset No." must be filled</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.FillBestLine(Price Calculation Buffer,Enum::Microsoft#Pricing#PriceList#Price Amount Type,Price List Line@)">
            <summary>
            The method is called in case there is no a price list line that matches all filters defined by the document/journal line. 
            As a result, the PriceListLine parameter gets pricing data from an asset card or another source.
            </summary>
            <param name="PriceCalculationBuffer">Contains data from a document/journal line</param>
            <param name="AmountType">Price or Discount</param>
            <param name="PriceListLine">gets filled with default data from an asset card or another source</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.FilterPriceLines(Price Asset,Price List Line@):Boolean">
            <summary>
            The method should add the filters for PriceListLine related to the PriceAsset, 
            e.g., besides "Asset Type" and "Asset No." Item adds "Varian Code", Resource adds "Work Type Code" 
            </summary>
            <param name="PriceAsset">current price asset</param>
            <param name="PriceListLine">the variable that gets additional filters</param>
            <returns>not used</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.PutRelatedAssetsToList(Price Asset,Codeunit::Microsoft#Pricing#Asset#Price Asset List@)">
            <summary>
            The method should add assets related to the current one to build the multi-level PriceAssetList.
            E.g., a resource asset can add up to two levels: "Resource Group" and "All resources" to setup the hierarchical search,
            while an item asset adds "Item Discount Group" at the same level as "Item" is, so both participate in search simultaneously.
            </summary>
            <param name="PriceAsset">the current asset</param>
            <param name="PriceAssetList">the list gets filled with one or more assets</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Asset#Price Asset.FillFromBuffer(Price Asset@,Price Calculation Buffer)">
            <summary>
            The method should fill the PriceAsset with asset related data from the PriceCalculationBuffer.
            Used in Add() method of the "Price Asset List" codeunit.
            </summary>
            <param name="PriceAsset">the asset to be added to the list</param>
            <param name="PriceCalculationBuffer">the buffer containing asset's data</param>
        </member>
        <member name="O:Codeunit::Microsoft#Pricing#Calculation#Feature - Price Calculation">
            <summary>
            Copies pricing data from old tables to "Price List Line" and "Price List Header" table.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.Init(Interface::Microsoft#Pricing#PriceList#Line With Price,Price Calculation Setup)">
            <summary>
            Save the source line as an interface variable inside the price calculation codeunit
            </summary>
            <param name="LineWithPrice">The interface parameter for the document or journal line.</param>
            <returns>The updated source line.</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.GetLine(Variant@)">
            <summary>
            After the calculation is done by calling ApplyPrice() or ApplyDiscount() 
            the updated line is retrieved by this method. 
            </summary>
            <param name="Line">The updated source line.</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.ApplyDiscount">
            <summary>
            Executes the calcluation of the discount amount. 
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.ApplyPrice(Integer)">
            <summary>
            Executes the calculation of the price or cost.
            </summary>
            <param name="CalledByFieldNo">The id of the field that caused the calculation.</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.CountDiscount(Boolean):Integer">
            <summary>
            Returns the number of price list lines with discounts that fit the source line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>Number of price list lines with discounts that fit the source line.</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.CountPrice(Boolean):Integer">
            <summary>
            Returnes the number of price list lines with prices that fit the source line.
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>Number of price list lines with prices that fit the source line.</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.FindDiscount(Price List Line@,Boolean):Boolean">
            <summary>
            Returns the list of price list lines with discount that fit the source line.
            </summary>
            <param name="TempPriceListLine">the temporary buffer containing the price list line that fit the source line.</param>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.FindPrice(Price List Line@,Boolean):Boolean">
            <summary>
            Returns the list of price list lines with prices ot costs that fit the source line.
            </summary>
            <param name="TempPriceListLine">the temporary buffer containing the price list line that fit the source line.</param>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.IsDiscountExists(Boolean):Boolean">
            <summary>
            Returns true if exists any price list line with discount that fit the source line. 
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.IsPriceExists(Boolean):Boolean">
            <summary>
            Returns true if exists any price list line with price or cost that fit the source line. 
            </summary>
            <param name="ShowAll">If true it widens the filters set to the price list line.</param>
            <returns>true if any price list line is found</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.PickDiscount">
            <summary>
            Allows to pick from the list of price list lines with disocunt that fit the source line.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.PickPrice">
            <summary>
            Allows to pick from the list of price list lines with price or cost that fit the source line.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Calculation#Price Calculation.ShowPrices(Price List Line@)">
            <summary>
            Opens the list page for reviewing existing prices. 
            </summary>
            <param name="TempPriceListLine">The buffer with the found price list lines.</param>
        </member>
        <member name="M:Codeunit::Microsoft#Pricing#PriceList#CopyFromToPriceListLine.GenerateDescription(Price List Header@)">
            <summary>
            Generates the description for the header, e.g. 'Customer 10000, 01.01.2021 - 31.01.2021'
            </summary>
            <param name="PriceListHeader">the generated header</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.GetTableNo:Integer">
            <summary>
            Returns the table number of the internal record line.
            </summary>
            <returns>The table id of the source line.</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.SetLine(Enum::Microsoft#Pricing#PriceList#Price Type,Variant)">
            <summary>
            Setup the internal record line. Applicable for the journal lines that does not have a header record.
            The PriceType parameter defines what type of price is going to be calculated.
            </summary>
            <param name="PriceType">the price type for which the price or discount will be calculated.</param>
            <param name="Line">the source record line</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.SetLine(Enum::Microsoft#Pricing#PriceList#Price Type,Variant,Variant)">
            <summary>
            Setup the internal records - line and header. Applicable for the document lines.
            The PriceType parameter defines what type of price is going to be calculated.
            </summary>
            <param name="PriceType">the price type for which the price or discount will be calculated.</param>
            <param name="Header">the source record header</param>
            <param name="Line">the source record line</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.SetSources(Codeunit::Microsoft#Pricing#Source#Price Source List@)">
            <summary>
            This method allows to overwrite the internal price source list that is normally filled by SetLine() method.
            </summary>
            <param name="NewPriceSourceList">The new list of sources that should be attached to the line</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.GetLine(Variant@)">
            <summary>
            After the calculations are done this method allows to get the updated internal record line.
            </summary>
            <param name="Line">The updated record line</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.GetLine(Variant@,Variant@)">
            <summary>
            After the calculations are done this method allows to get the updated internal record line and header.
            </summary>
            <param name="Line">The updated record line</param>
            <param name="Line">The updated record header</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.GetAssetType:Enum::Microsoft#Pricing#Asset#Price Asset Type">
            <summary>
            Returns the asset type of the internal record line.
            </summary>
            <returns>The asset type of the internal record line.</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.GetPriceType:Enum::Microsoft#Pricing#PriceList#Price Type">
            <summary>
            Returns the price type that was set by the SetLine() method.
            </summary>
            <returns>The price type</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.IsPriceUpdateNeeded(Enum::Microsoft#Pricing#PriceList#Price Amount Type,Boolean,Integer):Boolean">
            <summary>
            This method defines if the source line should be updated after the search for a price list line is done.
            </summary>
            <param name="AmountType">The amount type</param>
            <param name="FoundPrice">If FoundPrice is true this method returns true</param>
            <param name="CalledByFieldNo">The number of the field that caused the calculation</param>
            <returns>If the price amount should be updated</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.IsDiscountAllowed:Boolean">
            <summary>
            The calculation of the price defines if the discount allowed for this line.
            This method should be called after the price is calculated.
            </summary>
            <returns>If the discount allowed for this line</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.Verify">
            <summary>
            Verification of the line before price calculation, usually some TESTFIELD calls.
            </summary>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.SetAssetSourceForSetup(Dtld# Price Calculation Setup@):Boolean">
            <summary>
            Copy asset and source data to the buffer to search for a detailed price calculation setup.
            </summary>
            <param name="DtldPriceCalculationSetup">The buffer record that get values of filters for search</param>
            <returns>If the internal record line is consistent and all filters for detailed setup are in place</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.CopyToBuffer(Codeunit::Microsoft#Pricing#Calculation#Price Calculation Buffer Mgt#@):Boolean">
            <summary>
            Copy the fields related for price calculation to the buffer that is used in calculation handlers.
            </summary>
            <param name="PriceCalculationBufferMgt">The buffer that got filled</param>
            <returns>If all the internal record line is consistent and can fill the buffer</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.Update(Enum::Microsoft#Pricing#PriceList#Price Amount Type)">
            <summary>
            This method is called after the calculation and allow to do corrections.
            </summary>
            <param name="AmountType">The amount type</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.SetPrice(Enum::Microsoft#Pricing#PriceList#Price Amount Type,Price List Line)">
            <summary>
            After calculation is done, and the right price list line is found this method copies required fields
            to the internal record line. The amount type defines what amount will be copied.
            </summary>
            <param name="AmountType">the amount type.</param>
            <param name="PriceListLine">The price list line that should define the price or discount.</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#PriceList#Line With Price.ValidatePrice(Enum::Microsoft#Pricing#PriceList#Price Amount Type)">
            <summary>
            The method SetPrice() copies amounts to the internal record line. 
            This method calls the validation triggers on the amount defined by AmountType parameter.
            </summary>
            <param name="AmountType">the amount type</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.GetNo(Price Source@)">
            <summary>
            The method fills the Price Source parameter with "Source No." and other data from the source defined in the implementation codeunit. 
            </summary>
            <param name="PriceSource">the record gets filled with data</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.GetId(Price Source@)">
            <summary>
            The method fills the Price Source parameter with "Source ID" and other data from the source defined in the implementation codeunit. 
            </summary>
            <param name="PriceSource">the record gets filled with data</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.IsForAmountType(Enum::Microsoft#Pricing#PriceList#Price Amount Type):Boolean">
            <summary>
            The method should return true if the source can define both price and discount.
            If the price source is relevant only for prices 
            it should return true when AmountType is Price, and false if AmountType is Discount
            E.g., "Customer Price Group" is not relevant for discounts, "Customer Discount Group" is not relevant for prices.
            </summary>
            <param name="AmountType">Current amount type: price or discount</param>
            <returns>true if the price source is relevant for the AmountType</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.IsLookupOK(Price Source@):Boolean">
            <summary>
            The method runs the modal page for looking up for a price source.
            </summary>
            <param name="PriceSource">Defines the default price source to be shown on opening of the lookup page</param>
            <returns>true if the lookup is completed</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.VerifyParent(Price Source@):Boolean">
            <summary>
            The method should throw an error if the price source does not support the parent source, but "Parent Source No" is filled, 
            and vice versa, if the parent source is supported but "Parent Source No" is empty or inconsistent.
            E.g., "Job Task" is the only price source that supports "Job" price source as a parent.
            </summary>
            <param name="PriceSource">Current price source</param>
            <returns>true is the parent is supported and validated</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.IsSourceNoAllowed:Boolean">
            <summary>
            The method should return true for a source that requires "Source No." to be filled. 
            In W1 returns false for group source types: "All", "All Customers", "All Vendors", "All Jobs".
            </summary>
            <returns>true is "Source No." must be filled</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source.GetGroupNo(Price Source):Code[20]">
            <summary>
            The method should return "Source No." of the related Customer, Vendor, or Job.
            E.g., "Job Task" returns the parent job's "Source No.",
            so the detailed price calculation setup defined for the job will be applied for all Job Tasks.
            </summary>
            <param name="PriceSource">Current price source</param>
            <returns>"Source No." of the related customer, vendor, or job</returns>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source Group.IsSourceTypeSupported(Enum::Microsoft#Pricing#Source#Price Source Type):Boolean">
            <summary>
            "Price Source Group" enum is a subset of the "Price Source Type" enum. 
            The group limits allowed Source Types, e.g. for Customer group the Vendor source type is not supported.
            Returns true if the passed price source type belongs to the price source group.
            </summary>
            <param name="SourceType">Price source type</param>
        </member>
        <member name="M:Interface::Microsoft#Pricing#Source#Price Source Group.GetGroup:Enum::Microsoft#Pricing#Source#Price Source Group">
            <summary>
            Some of source types are mapped to the price source groups that is used in setup. 
            If the source type does not belong to one group then it returns group All.
            </summary>
            <returns>the source group.</returns>
        </member>
        <member name="M:Table::Microsoft#Projects#Project#Planning#Job Planning Line.SetJob(Job)">
            <summary>
            Use this method to set the global Job variable.
            This is useful for passing unsaved job record changes.
            </summary>
            <param name="NewJob">The job record</param>
        </member>
        <member name="O:Enum::Licenses">
            <summary>
            Specifies the type of license.
            </summary>
        </member>
        <member name="O:Table::What's New Notified">
            <summary>
            Stores which user has seen the What's New Wizard page.
            </summary>
        </member>
        <member name="M:Interface::Consolidation Method.Consolidate(Consolidation Process,Business Unit,Bus# Unit Consolidation Data@)">
            <summary>
            This procedure is called for each business unit in the consolidation process. It should consolidate (insert the appropriate GL Entries in the consolidation company) with the information in the BusUnitConsolidationData temporary record.
            When this procedure is called BusUnitConsolidationData contains the data imported from the business unit (ImportConsolidationData interface), it contains the "Consolidate" codeunit which contains the data to be consolidated.
            </summary>
            <param name="ConsolidationProcess"></param>
            <param name="BusinessUnit"></param>
            <param name="BusUnitConsolidationData"></param>
        </member>
    </members>
</doc>
