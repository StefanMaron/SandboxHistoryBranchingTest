<?xml version="1.0"?>
<doc>
    <application>
        <id>5095f467-0a01-4b99-99d1-9ff1237d286f</id>
        <name>Library Variable Storage</name>
        <publisher>Microsoft</publisher>
        <version>26.0.30643.36002</version>
    </application>
    <members>
        <member name="O:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage">
            <summary>
            Library - Variable Storage" provides functions that pass values from test methods to page and message handler methods that are called out of context and cannot be called directly.
            This provides a flexible way to store values when running tests because you do not need to have specific global variables for each scenario.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.AssertEmpty">
            <summary>
            Displays an error if the queue is not empty.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.AssertFull">
            <summary>
            Displays an error if the queue is full.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.AssertNotOverflow">
            <summary>
            Displays an error if adding a value to the queue will cause an overflow.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.AssertNotUnderflow">
            <summary>
            Displays an error if there are fewer than zero values in the queue.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.AssertPeekAvailable(Integer)">
            <summary>
            Indicates whether you can peek at the value in the queue at the given index without dequeing the value. Displays an error if there is a value in the queue at the given index.
            </summary>
            <param name="Index">The position in the queue to test.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.Clear">
            <summary>
            Removes all values from the queue.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.Dequeue(Variant@)">
            <summary>
            Reads the top value from the queue and removes it.
            </summary>
            <param name="Variant">Returns the top value read from the queue. </param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.Peek(Variant@,Integer)">
            <summary>
            Returns the value from a given index in the queue without dequeuing the value.
            </summary>
            <param name="Variant">Returns the value that is stored in the queue.</param>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.Enqueue(Variant)">
            <summary>
            Store one value in to the queue.
            </summary>
            <param name="Variant">The value to add to the queue.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.Length:Integer">
            <summary>
            Returns the length of the queue.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.MaxLength:Integer">
            <summary>
            Returns the maximum length of the queue.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueText:Text">
            <summary>
            Reads one value of type Text from the queue and removes it. If the type of the value is not Text an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueDecimal:Decimal">
            <summary>
            Reads one value of type Decimal from the queue and removes it. If the type of the value is not Decimal an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueInteger:Integer">
            <summary>
            Reads one value of type Integer from the queue and removes it. If the type of the value is not Integer an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueDate:Date">
            <summary>
            Reads one value of type Date from the queue and removes it. If the type of the value is not Date an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueDateTime:DateTime">
            <summary>
            Reads one value of type DateTime from the queue and removes it. If the type of the value is not DateTime an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueTime:Time">
            <summary>
            Reads one value of type Time from the queue and removes it. If the type of the value is not Time an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.DequeueBoolean:Boolean">
            <summary>
            Reads one value of type Boolean from the queue and removes it. If the type of the value is not Boolean an error is displayed.
            </summary>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekText(Integer):Text">
            <summary>
            Returns a value of type Text at the given position in the queue without dequeuing the value. If the type of the value is not Text an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekDecimal(Integer):Decimal">
            <summary>
            Returns a value of type Decimal at the given position in the queue without dequeuing the value. If the type of the value is not Decimal an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekInteger(Integer):Integer">
            <summary>
            Returns a value of type Integer at the given position in the queue without dequeuing the value. If the type of the value is not Integer an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekDate(Integer):Date">
            <summary>
            Returns a value of type Date at the given position in the queue without dequeuing the value. If the type of the value is not Date an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekTime(Integer):Time">
            <summary>
            Returns a value of type Time at the given position in the queue without dequeuing the value. If the type of the value is not Time an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
        <member name="M:Codeunit::System#TestLibraries#Utilities#Library - Variable Storage.PeekBoolean(Integer):Boolean">
            <summary>
            Returns a value of type Boolean at the given position in the queue without deaueuing the value. If the type of the value is not Boolean an error is displayed.
            </summary>
            <param name="Index">The position in the queue from which the value will be read.</param>
        </member>
    </members>
</doc>
